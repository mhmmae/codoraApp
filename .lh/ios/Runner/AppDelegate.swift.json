{
    "sourceFile": "ios/Runner/AppDelegate.swift",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752751500681,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752751500681,
            "name": "Commit-0",
            "content": "import Flutter\nimport UIKit\nimport GoogleMaps\nimport flutter_local_notifications\nimport Firebase\nimport FirebaseAuth\n\n@main\n@objc class AppDelegate: FlutterAppDelegate {\n  override func application(\n    _ application: UIApplication,\n    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?\n  ) -> Bool {\n    \n    // تكوين Firebase\n    FirebaseApp.configure()\n    \n    // تكوين إعدادات Firebase Auth لحل مشكلة reCAPTCHA\n    configureFirebaseAuth()\n    \n    // تكوين Google Maps\n    GMSServices.provideAPIKey(\"AIzaSyC8YAMGRKrLJxeMR1uLJm49PZ5xjS_BKoc\")\n    \n    // تكوين الإشعارات\n    configureNotifications()\n    \n    // تسجيل الـ plugins\n    GeneratedPluginRegistrant.register(with: self)\n    \n    return super.application(application, didFinishLaunchingWithOptions: launchOptions)\n  }\n  \n  /// تكوين إعدادات Firebase Auth\n  private func configureFirebaseAuth() {\n    // تعطيل التحقق من التطبيق أثناء التطوير لحل مشكلة reCAPTCHA\n    if #available(iOS 14.0, *) {\n      // استخدام الطريقة الآمنة للوصول لإعدادات Auth\n      if let authSettings = Auth.auth().settings {\n        authSettings.isAppVerificationDisabledForTesting = true\n      }\n    }\n    \n    // تكوين إعدادات إضافية لـ reCAPTCHA\n    #if DEBUG\n    if #available(iOS 14.0, *) {\n      Auth.auth().settings?.isAppVerificationDisabledForTesting = true\n    }\n    #endif\n  }\n  \n  /// تكوين الإشعارات\n  private func configureNotifications() {\n    FlutterLocalNotificationsPlugin.setPluginRegistrantCallback { (registry) in\n      GeneratedPluginRegistrant.register(with: registry)\n    }\n    \n    if #available(iOS 10.0, *) {\n      UNUserNotificationCenter.current().delegate = self as? UNUserNotificationCenterDelegate\n    }\n  }\n}"
        }
    ]
}