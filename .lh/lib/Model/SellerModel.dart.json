{
    "sourceFile": "lib/Model/SellerModel.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752570376679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752700868683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,8 +38,11 @@\n   // التقييمات\n   final double averageRating;\n   final int numberOfRatings;\n \n+  // نظام الثقة\n+  final double trustScore; // نقاط الثقة، تبدأ بـ 50 عند التسجيل\n+\n   // الحقول الجديدة\n   final String?\n   sellerType; // نوع البائع: 'wholesale', 'retail', أو null إذا لم يحدد بعد\n   final bool registrationCompleted; // هل أكمل البائع جميع خطوات التسجيل\n@@ -70,8 +73,9 @@\n     this.isActiveBySeller = true, // البائع يعتبر متجره نشطًا مبدئيًا\n     required this.isPhoneNumberVerified, // يجب تمرير هذا بناءً على نتيجة OTP\n     this.averageRating = 0.0,\n     this.numberOfRatings = 0,\n+    this.trustScore = 50.0, // الثقة الافتراضية عند التسجيل\n     this.sellerType, // إضافة هنا\n     this.registrationCompleted = false, // إضافة هنا\n     required this.createdAt,\n     this.updatedAt,\n@@ -99,8 +103,9 @@\n       'isActiveBySeller': isActiveBySeller,\n       'isPhoneNumberVerified': isPhoneNumberVerified,\n       'averageRating': averageRating,\n       'numberOfRatings': numberOfRatings,\n+      'trustScore': trustScore, // إضافة نقاط الثقة\n       'sellerType': sellerType, // إضافة هنا\n       'registrationCompleted': registrationCompleted, // إضافة هنا\n       'createdAt':\n           createdAt, // أو FieldValue.serverTimestamp() إذا كان الإنشاء من جانب الخادم أو في معاملة\n@@ -151,8 +156,9 @@\n       isActiveBySeller: map['isActiveBySeller'] as bool? ?? true,\n       isPhoneNumberVerified: map['isPhoneNumberVerified'] as bool? ?? false,\n       averageRating: (map['averageRating'] as num?)?.toDouble() ?? 0.0,\n       numberOfRatings: (map['numberOfRatings'] as num?)?.toInt() ?? 0,\n+      trustScore: (map['trustScore'] as num?)?.toDouble() ?? 50.0, // قيمة افتراضية للبيانات القديمة\n       sellerType: map['sellerType'] as String?, // إضافة هنا\n       registrationCompleted:\n           map['registrationCompleted'] as bool? ?? false, // إضافة هنا\n       createdAt:\n@@ -195,8 +201,9 @@\n     bool? isActiveBySeller,\n     bool? isPhoneNumberVerified,\n     double? averageRating,\n     int? numberOfRatings,\n+    double? trustScore, // إضافة نقاط الثقة\n     String? sellerType, // إضافة هنا\n     bool? registrationCompleted, // إضافة هنا\n     Timestamp? createdAt,\n     Timestamp? updatedAt,\n@@ -225,8 +232,9 @@\n       isApprovedByAdmin: isApprovedByAdmin ?? this.isApprovedByAdmin,\n       isActiveBySeller: isActiveBySeller ?? this.isActiveBySeller,\n       averageRating: averageRating ?? this.averageRating,\n       numberOfRatings: numberOfRatings ?? this.numberOfRatings,\n+      trustScore: trustScore ?? this.trustScore, // إضافة نقاط الثقة\n       sellerType: sellerType ?? this.sellerType, // إضافة هنا\n       registrationCompleted:\n           registrationCompleted ?? this.registrationCompleted, // إضافة هنا\n       createdAt: createdAt ?? this.createdAt,\n"
                }
            ],
            "date": 1752570376679,
            "name": "Commit-0",
            "content": "import 'package:cloud_firestore/cloud_firestore.dart';\n\nclass SellerModel {\n  final String\n  uid; // معرف المستخدم من FirebaseAuth، سيكون هو ID المستند في مجموعة البائعين\n  final String sellerName; // اسم صاحب المحل\n  final String? sellerProfileImageUrl;\n  final String shopName; // اسم المحل التجاري\n  final String? shopFrontImageUrl;\n  final String shopPhoneNumber; // رقم الهاتف الذي تم التحقق منه\n  final String? shopDescription;\n  final String? email; // إضافة حقل البريد الإلكتروني\n\n  // الموقع\n  final GeoPoint location; // يُخزن كـ GeoPoint في Firestore\n  final String? shopAddressText; // العنوان النصي المقروء\n\n  // الفئة وساعات العمل\n  final List<String>\n  shopCategories; // قائمة فئات المحل (يمكن أن يكون لديه أكثر من فئة)\n  final Map<String, dynamic>\n  workingHours; // هيكل Map لتخزين ساعات العمل لكل يوم\n\n  // معلومات إضافية اختيارية\n  final String? commercialRegistrationNumber;\n  final String? websiteUrl;\n  final Map<String, String>?\n  socialMediaLinks; // مثال: {'facebook': 'url', 'instagram': 'url'}\n\n  // حالات وحالة التحقق من قبل المشرف (إذا كان لديك نظام موافقة للبائعين)\n  final bool\n  isProfileComplete; // هل أكمل البائع ملفه (عادةً ما يكون true بعد هذه العملية)\n  final bool\n  isApprovedByAdmin; // هل تمت الموافقة على البائع من قبل مشرف التطبيق\n  final bool isActiveBySeller; // هل البائع جعل متجره نشطًا لاستقبال الطلبات\n  final bool isPhoneNumberVerified; // تم التحقق من رقم الهاتف\n\n  // التقييمات\n  final double averageRating;\n  final int numberOfRatings;\n\n  // الحقول الجديدة\n  final String?\n  sellerType; // نوع البائع: 'wholesale', 'retail', أو null إذا لم يحدد بعد\n  final bool registrationCompleted; // هل أكمل البائع جميع خطوات التسجيل\n\n  final Timestamp createdAt;\n  final Timestamp? updatedAt; // يُحدث مع كل تعديل\n\n  SellerModel({\n    required this.uid,\n    required this.sellerName,\n    this.sellerProfileImageUrl,\n    required this.shopName,\n    this.shopFrontImageUrl,\n    required this.shopPhoneNumber,\n    this.shopDescription,\n    this.email, // إضافة هنا\n    required this.location,\n    this.shopAddressText,\n    required this.shopCategories,\n    required this.workingHours,\n    this.commercialRegistrationNumber,\n    this.websiteUrl,\n    this.socialMediaLinks,\n    this.isProfileComplete =\n        true, // يفترض أنه true عند إنشاء هذا النموذج بعد التسجيل\n    this.isApprovedByAdmin =\n        false, // يبدأ غير موافق عليه (إذا كان هناك نظام موافقة)\n    this.isActiveBySeller = true, // البائع يعتبر متجره نشطًا مبدئيًا\n    required this.isPhoneNumberVerified, // يجب تمرير هذا بناءً على نتيجة OTP\n    this.averageRating = 0.0,\n    this.numberOfRatings = 0,\n    this.sellerType, // إضافة هنا\n    this.registrationCompleted = false, // إضافة هنا\n    required this.createdAt,\n    this.updatedAt,\n  });\n\n  Map<String, dynamic> toMap() {\n    return {\n      'uid': uid,\n      'sellerName': sellerName,\n      'sellerProfileImageUrl': sellerProfileImageUrl,\n      'shopName': shopName,\n      'shopFrontImageUrl': shopFrontImageUrl,\n      'shopPhoneNumber': shopPhoneNumber,\n      'shopDescription': shopDescription,\n      'email': email, // إضافة هنا\n      'location': location, // GeoPoint\n      'shopAddressText': shopAddressText,\n      'shopCategories': shopCategories, // List<String>\n      'workingHours': workingHours, // Map <String, Map<String, dynamic>>\n      'commercialRegistrationNumber': commercialRegistrationNumber,\n      'websiteUrl': websiteUrl,\n      'socialMediaLinks': socialMediaLinks,\n      'isProfileComplete': isProfileComplete,\n      'isApprovedByAdmin': isApprovedByAdmin,\n      'isActiveBySeller': isActiveBySeller,\n      'isPhoneNumberVerified': isPhoneNumberVerified,\n      'averageRating': averageRating,\n      'numberOfRatings': numberOfRatings,\n      'sellerType': sellerType, // إضافة هنا\n      'registrationCompleted': registrationCompleted, // إضافة هنا\n      'createdAt':\n          createdAt, // أو FieldValue.serverTimestamp() إذا كان الإنشاء من جانب الخادم أو في معاملة\n      'updatedAt':\n          FieldValue.serverTimestamp(), // يتم تحديثه تلقائيًا مع كل عملية set/update\n    };\n  }\n\n  factory SellerModel.fromMap(Map<String, dynamic> map, String documentId) {\n    // تحويل workingHours من Firestore (الذي سيكون Map<String, dynamic>)\n    // إلى Map<String, Map<String, dynamic>> إذا لزم الأمر لمزيد من الدقة في النوع،\n    // أو تركه كـ Map<String, dynamic> إذا كان هذا كافيًا لاستخدامك.\n    Map<String, dynamic> workingHoursFromDb = {};\n    if (map['workingHours'] is Map) {\n      (map['workingHours'] as Map).forEach((key, value) {\n        if (value is Map) {\n          workingHoursFromDb[key.toString()] = Map<String, dynamic>.from(value);\n        }\n      });\n    }\n\n    return SellerModel(\n      uid: documentId, // أو map['uid'] إذا كنت تخزنه كحقل أيضًا\n      sellerName: map['sellerName'] as String? ?? '',\n      sellerProfileImageUrl: map['sellerProfileImageUrl'] as String?,\n      shopName: map['shopName'] as String? ?? '',\n      shopFrontImageUrl: map['shopFrontImageUrl'] as String?,\n      shopPhoneNumber: map['shopPhoneNumber'] as String? ?? '',\n      shopDescription: map['shopDescription'] as String?,\n      email: map['email'] as String?, // إضافة هنا\n      location:\n          map['location'] as GeoPoint? ??\n          const GeoPoint(0, 0), // قيمة افتراضية إذا كان null\n      shopAddressText: map['shopAddressText'] as String?,\n      shopCategories:\n          (map['shopCategories'] as List<dynamic>?)?.cast<String>() ??\n          ['أخرى'], // قيمة افتراضية\n      workingHours: workingHoursFromDb,\n      commercialRegistrationNumber:\n          map['commercialRegistrationNumber'] as String?,\n      websiteUrl: map['websiteUrl'] as String?,\n      socialMediaLinks:\n          map['socialMediaLinks'] != null\n              ? Map<String, String>.from(map['socialMediaLinks'] as Map)\n              : null,\n      isProfileComplete: map['isProfileComplete'] as bool? ?? false,\n      isApprovedByAdmin: map['isApprovedByAdmin'] as bool? ?? false,\n      isActiveBySeller: map['isActiveBySeller'] as bool? ?? true,\n      isPhoneNumberVerified: map['isPhoneNumberVerified'] as bool? ?? false,\n      averageRating: (map['averageRating'] as num?)?.toDouble() ?? 0.0,\n      numberOfRatings: (map['numberOfRatings'] as num?)?.toInt() ?? 0,\n      sellerType: map['sellerType'] as String?, // إضافة هنا\n      registrationCompleted:\n          map['registrationCompleted'] as bool? ?? false, // إضافة هنا\n      createdAt:\n          map['createdAt'] as Timestamp? ?? Timestamp.now(), // قيمة افتراضية\n      updatedAt: map['updatedAt'] as Timestamp?,\n    );\n  }\n\n  // --- دوال مساعدة ( اختيارية ) ---\n\n  // دالة للتحقق مما إذا كان المتجر مفتوحًا الآن\n  // هذه تحتاج إلى منطق أكثر تفصيلاً لمقارنة الوقت الحالي بساعات العمل المحفوظة\n  // مع مراعاة اليوم الحالي والمنطقة الزمنية إذا لزم الأمر.\n  // bool isShopOpenNow() {\n  //   if (!isActiveBySeller || !isApprovedByAdmin) return false;\n  //   // منطق للتحقق من workingHours مقابل الوقت الحالي\n  //   // ... (سيكون هذا معقدًا بعض الشيء ويتطلب تحويل أوقات السلسلة النصية)\n  //   return true; // مجرد قيمة افتراضية الآن\n  // }\n\n  //  يمكن إضافة copyWith إذا احتجت لتعديل كائنات النموذج بسهولة\n  SellerModel copyWith({\n    String? uid,\n    String? sellerName,\n    String? sellerProfileImageUrl,\n    String? shopName,\n    // ...أضف باقي الحقول\n    String? shopPhoneNumber,\n    String? shopDescription,\n    String? email, // إضافة هنا\n    GeoPoint? location,\n    String? shopAddressText,\n    List<String>? shopCategories,\n    Map<String, dynamic>? workingHours,\n    String? commercialRegistrationNumber,\n    String? websiteUrl,\n    Map<String, String>? socialMediaLinks,\n    bool? isProfileComplete,\n    bool? isApprovedByAdmin,\n    bool? isActiveBySeller,\n    bool? isPhoneNumberVerified,\n    double? averageRating,\n    int? numberOfRatings,\n    String? sellerType, // إضافة هنا\n    bool? registrationCompleted, // إضافة هنا\n    Timestamp? createdAt,\n    Timestamp? updatedAt,\n  }) {\n    return SellerModel(\n      uid: uid ?? this.uid,\n      sellerName: sellerName ?? this.sellerName,\n      sellerProfileImageUrl:\n          sellerProfileImageUrl ?? this.sellerProfileImageUrl,\n      shopName: shopName ?? this.shopName,\n      // ...مرر باقي القيم\n      shopPhoneNumber: shopPhoneNumber ?? this.shopPhoneNumber,\n      shopDescription: shopDescription ?? this.shopDescription,\n      email: email ?? this.email, // إضافة هنا\n      location: location ?? this.location,\n      shopAddressText: shopAddressText ?? this.shopAddressText,\n      shopCategories: shopCategories ?? this.shopCategories,\n      workingHours: workingHours ?? this.workingHours,\n      commercialRegistrationNumber:\n          commercialRegistrationNumber ?? this.commercialRegistrationNumber,\n      websiteUrl: websiteUrl ?? this.websiteUrl,\n      socialMediaLinks: socialMediaLinks ?? this.socialMediaLinks,\n      isProfileComplete: isProfileComplete ?? this.isProfileComplete,\n      isPhoneNumberVerified:\n          isPhoneNumberVerified ?? this.isPhoneNumberVerified,\n      isApprovedByAdmin: isApprovedByAdmin ?? this.isApprovedByAdmin,\n      isActiveBySeller: isActiveBySeller ?? this.isActiveBySeller,\n      averageRating: averageRating ?? this.averageRating,\n      numberOfRatings: numberOfRatings ?? this.numberOfRatings,\n      sellerType: sellerType ?? this.sellerType, // إضافة هنا\n      registrationCompleted:\n          registrationCompleted ?? this.registrationCompleted, // إضافة هنا\n      createdAt: createdAt ?? this.createdAt,\n      updatedAt:\n          updatedAt, // يمكن تمرير null إذا كان سيتحدث بواسطة serverTimestamp\n    );\n  }\n}\n\n// Firestore Collection Name for Sellers (من FirebaseX الخاص بك)\n// static const String sellersCollection = \"Sellercodora\";\n\n// Firestore Collection Name for Sellers (من FirebaseX الخاص بك)\n// static const String sellersCollection = \"Sellercodora\";\n"
        }
    ]
}