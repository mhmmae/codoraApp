{
    "sourceFile": "lib/main.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1752490157849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752798050012,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,5 @@\n-import 'package:codora/%D8%A7%D9%84%D9%83%D9%88%D8%AF%20%D8%A7%D9%84%D8%AE%D8%A7%D8%B5%20%D8%A8%D8%AA%D8%B7%D8%A8%D9%8A%D9%82%20%D8%A7%D9%84%D8%A8%D8%A7%D8%A6%D8%B9/seller_app_auth/controllers/seller_auth_controller.dart';\n-import 'package:codora/%D8%A7%D9%84%D9%83%D9%88%D8%AF%20%D8%A7%D9%84%D8%AE%D8%A7%D8%B5%20%D8%A8%D8%AA%D8%B7%D8%A8%D9%8A%D9%82%20%D8%A7%D9%84%D8%A8%D8%A7%D8%A6%D8%B9/ui/controllers/retail_cart_controller.dart';\n-import 'package:codora/%D8%A7%D9%84%D9%83%D9%88%D8%AF%20%D8%A7%D9%84%D8%AE%D8%A7%D8%B5%20%D8%A8%D8%AA%D8%B7%D8%A8%D9%8A%D9%82%20%D8%A7%D9%84%D8%A8%D8%A7%D8%A6%D8%B9/seller_app_auth/controllers/seller_auth_bindings.dart';\n-import 'package:codora/%D8%A7%D9%84%D9%83%D9%88%D8%AF%20%D8%A7%D9%84%D8%AE%D8%A7%D8%B5%20%D8%A8%D8%AA%D8%B7%D8%A8%D9%8A%D9%82%20%D8%A7%D9%84%D8%A8%D8%A7%D8%A6%D8%B9/seller_app_auth/ui/welcome1.dart';\n+import 'package:codora/الكود الخاص بتطبيق العميل /registration/welcomePage/WelcomePage.dart';\n import 'routes/app_pages.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:firebase_core/firebase_core.dart';\n import 'package:firebase_messaging/firebase_messaging.dart';\n@@ -13,19 +10,19 @@\n import 'package:intl/date_symbol_data_local.dart';\n import 'dart:io';\n \n import 'الكود الخاص بتطبيق العميل /controler/local-notification-onroller.dart';\n+import 'الكود الخاص بتطبيق العميل /services/phone_auth_service.dart';\n import 'firebase_options.dart';\n import 'package:permission_handler/permission_handler.dart';\n \n late FirebaseMessaging messaging;\n \n class InitialBindings extends Bindings {\n   @override\n   void dependencies() {\n-    Get.put(SellerAuthBindings());\n-    Get.lazyPut(()=>SellerAuthController()) ;\n-    Get.put(RetailCartController(), permanent: true);\n+    // تهيئة PhoneAuthService\n+    Get.put(PhoneAuthService(), permanent: true);\n   }\n }\n \n void main() async {\n@@ -33,37 +30,35 @@\n \n   // Initialize Firebase properly with iOS-specific handling\n   try {\n     print(\"🔧 Starting Firebase initialization...\");\n-    \n+\n     // Always try to initialize from Dart to ensure proper configuration\n     await Firebase.initializeApp(\n       options: DefaultFirebaseOptions.currentPlatform,\n     );\n     print(\"✅ Firebase initialized successfully from Dart\");\n-    \n+\n     // Wait longer for iOS to ensure everything is ready\n     if (Platform.isIOS) {\n       await Future.delayed(Duration(milliseconds: 5000));\n       print(\"✅ iOS Firebase extended initialization delay completed\");\n     } else {\n       await Future.delayed(Duration(milliseconds: 2000));\n       print(\"✅ Android Firebase initialization delay completed\");\n     }\n-    \n+\n     // Initialize Firebase Messaging safely\n     try {\n       messaging = FirebaseMessaging.instance;\n       print(\"✅ Firebase Messaging initialized\");\n-      \n     } catch (messagingError) {\n       print(\"⚠️ Firebase Messaging initialization error: $messagingError\");\n       // Continue without messaging features\n     }\n-    \n   } catch (e) {\n     print(\"⚠️ Firebase initialization error: $e\");\n-    \n+\n     // If initialization fails, try to use existing app (for iOS)\n     if (Platform.isIOS && Firebase.apps.isNotEmpty) {\n       print(\"🔄 Using existing Firebase app on iOS\");\n       try {\n@@ -87,16 +82,17 @@\n       criticalAlert: false,\n       provisional: false,\n       sound: true,\n     );\n-    \n+\n     // Configure foreground notifications\n-    await FirebaseMessaging.instance.setForegroundNotificationPresentationOptions(\n-      alert: true,\n-      badge: true,\n-      sound: true,\n-    );\n-    \n+    await FirebaseMessaging.instance\n+        .setForegroundNotificationPresentationOptions(\n+          alert: true,\n+          badge: true,\n+          sound: true,\n+        );\n+\n     print(\"✅ Firebase Messaging permissions configured\");\n   } catch (e) {\n     print(\"⚠️ Firebase Messaging configuration error: $e\");\n   }\n@@ -146,9 +142,9 @@\n     await Firebase.initializeApp(\n       options: DefaultFirebaseOptions.currentPlatform,\n     );\n   }\n-  \n+\n   print(\"✅ Background handler called - handling notification\");\n \n   try {\n     final String type = message.data['type'] ?? '';\n@@ -218,35 +214,30 @@\n   }\n }\n \n class MyApp extends StatelessWidget {\n-   const MyApp({super.key, this.isLoggedIn});\n+  const MyApp({super.key, this.isLoggedIn});\n   final bool? isLoggedIn;\n \n   @override\n   Widget build(BuildContext context) {\n     return GetMaterialApp(\n       initialBinding: InitialBindings(),\n       getPages: AppPages.routes,\n       debugShowCheckedModeBanner: false,\n-        theme: ThemeData(\n+      theme: ThemeData(\n         scaffoldBackgroundColor: Colors.white,\n         appBarTheme: const AppBarTheme(\n+          elevation: 0,\n+          titleTextStyle: TextStyle(\n+            color: Colors.white,\n+            fontSize: 20,\n+            fontWeight: FontWeight.bold,\n+          ),\n+        ),\n+      ),\n \n-        elevation: 0,\n-        titleTextStyle: TextStyle(\n-        color: Colors.white,\n-        fontSize: 20,\n-        fontWeight: FontWeight.bold, ),\n-             ),\n-             ),\n-\n       // You can use the library anywhere in the app even in theme\n-\n-      home:isLoggedIn!\n-          ? WelcomePage1()\n-          : WelcomePage1(),\n+      home: isLoggedIn! ? WelcomePage() : WelcomePage(),\n     );\n   }\n }\n-\n-\n"
                },
                {
                    "date": 1752837553470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,10 +19,28 @@\n \n class InitialBindings extends Bindings {\n   @override\n   void dependencies() {\n-    // تهيئة PhoneAuthService\n-    Get.put(PhoneAuthService(), permanent: true);\n+    // تهيئة PhoneAuthService مع التحقق من النجاح\n+    try {\n+      final phoneAuthService = PhoneAuthService();\n+      Get.put(phoneAuthService, permanent: true);\n+      debugPrint(\"✅ تم تسجيل PhoneAuthService بنجاح في InitialBindings\");\n+\n+      // التحقق من التسجيل\n+      Future.delayed(Duration(seconds: 1), () {\n+        try {\n+          final service = Get.find<PhoneAuthService>();\n+          service.testService();\n+          final report = service.getServiceReport();\n+          debugPrint(\"📊 تقرير خدمة المصادقة: ${report['status']}\");\n+        } catch (e) {\n+          debugPrint(\"❌ خطأ في اختبار PhoneAuthService: $e\");\n+        }\n+      });\n+    } catch (e) {\n+      debugPrint(\"❌ فشل في تسجيل PhoneAuthService: $e\");\n+    }\n   }\n }\n \n void main() async {\n@@ -37,8 +55,19 @@\n       options: DefaultFirebaseOptions.currentPlatform,\n     );\n     print(\"✅ Firebase initialized successfully from Dart\");\n \n+    // اختبار Firebase Auth بعد التهيئة\n+    try {\n+      final auth = FirebaseAuth.instance;\n+      print(\"🔐 Firebase Auth instance created: ${auth.app.name}\");\n+      print(\"📱 Current user: ${auth.currentUser?.uid ?? 'No user'}\");\n+      print(\"🌍 App ID: ${auth.app.options.appId}\");\n+      print(\"🏗️ Project ID: ${auth.app.options.projectId}\");\n+    } catch (authError) {\n+      print(\"❌ Firebase Auth test failed: $authError\");\n+    }\n+\n     // Wait longer for iOS to ensure everything is ready\n     if (Platform.isIOS) {\n       await Future.delayed(Duration(milliseconds: 5000));\n       print(\"✅ iOS Firebase extended initialization delay completed\");\n"
                },
                {
                    "date": 1753097375568,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,272 @@\n+import 'package:codora/%D8%A7%D9%84%D9%83%D9%88%D8%AF%20%D8%A7%D9%84%D8%AE%D8%A7%D8%B5%20%D8%A8%D8%AA%D8%B7%D8%A8%D9%8A%D9%82%20%D8%A7%D9%84%D8%B9%D9%85%D9%8A%D9%84%20/bottonBar/botonBar.dart';\n+import 'routes/app_pages.dart';\n+import 'package:firebase_auth/firebase_auth.dart';\n+import 'package:firebase_core/firebase_core.dart';\n+import 'package:firebase_messaging/firebase_messaging.dart';\n+import 'package:flutter/material.dart';\n+import 'package:flutter_screenutil/flutter_screenutil.dart';\n+import 'package:get/get.dart';\n+import 'package:get_storage/get_storage.dart';\n+import 'package:intl/date_symbol_data_local.dart';\n+import 'dart:io';\n+\n+import 'الكود الخاص بتطبيق العميل /controler/local-notification-onroller.dart';\n+import 'الكود الخاص بتطبيق العميل /services/phone_auth_service.dart';\n+import 'firebase_options.dart';\n+import 'package:permission_handler/permission_handler.dart';\n+\n+late FirebaseMessaging messaging;\n+\n+class InitialBindings extends Bindings {\n+  @override\n+  void dependencies() {\n+    // تهيئة PhoneAuthService مع التحقق من النجاح\n+    try {\n+      final phoneAuthService = PhoneAuthService();\n+      Get.put(phoneAuthService, permanent: true);\n+      debugPrint(\"✅ تم تسجيل PhoneAuthService بنجاح في InitialBindings\");\n+\n+      // التحقق من التسجيل\n+      Future.delayed(Duration(seconds: 1), () {\n+        try {\n+          final service = Get.find<PhoneAuthService>();\n+          service.testService();\n+          final report = service.getServiceReport();\n+          debugPrint(\"📊 تقرير خدمة المصادقة: ${report['status']}\");\n+        } catch (e) {\n+          debugPrint(\"❌ خطأ في اختبار PhoneAuthService: $e\");\n+        }\n+      });\n+    } catch (e) {\n+      debugPrint(\"❌ فشل في تسجيل PhoneAuthService: $e\");\n+    }\n+  }\n+}\n+\n+void main() async {\n+  WidgetsFlutterBinding.ensureInitialized();\n+\n+  // Initialize Firebase properly with iOS-specific handling\n+  try {\n+    print(\"🔧 Starting Firebase initialization...\");\n+\n+    // Always try to initialize from Dart to ensure proper configuration\n+    await Firebase.initializeApp(\n+      options: DefaultFirebaseOptions.currentPlatform,\n+    );\n+    print(\"✅ Firebase initialized successfully from Dart\");\n+\n+    // اختبار Firebase Auth بعد التهيئة\n+    try {\n+      final auth = FirebaseAuth.instance;\n+      print(\"🔐 Firebase Auth instance created: ${auth.app.name}\");\n+      print(\"📱 Current user: ${auth.currentUser?.uid ?? 'No user'}\");\n+      print(\"🌍 App ID: ${auth.app.options.appId}\");\n+      print(\"🏗️ Project ID: ${auth.app.options.projectId}\");\n+    } catch (authError) {\n+      print(\"❌ Firebase Auth test failed: $authError\");\n+    }\n+\n+    // Wait longer for iOS to ensure everything is ready\n+    if (Platform.isIOS) {\n+      await Future.delayed(Duration(milliseconds: 5000));\n+      print(\"✅ iOS Firebase extended initialization delay completed\");\n+    } else {\n+      await Future.delayed(Duration(milliseconds: 2000));\n+      print(\"✅ Android Firebase initialization delay completed\");\n+    }\n+\n+    // Initialize Firebase Messaging safely\n+    try {\n+      messaging = FirebaseMessaging.instance;\n+      print(\"✅ Firebase Messaging initialized\");\n+    } catch (messagingError) {\n+      print(\"⚠️ Firebase Messaging initialization error: $messagingError\");\n+      // Continue without messaging features\n+    }\n+  } catch (e) {\n+    print(\"⚠️ Firebase initialization error: $e\");\n+\n+    // If initialization fails, try to use existing app (for iOS)\n+    if (Platform.isIOS && Firebase.apps.isNotEmpty) {\n+      print(\"🔄 Using existing Firebase app on iOS\");\n+      try {\n+        messaging = FirebaseMessaging.instance;\n+        print(\"✅ Firebase Messaging initialized with existing app\");\n+      } catch (msgError) {\n+        print(\"⚠️ Messaging error with existing app: $msgError\");\n+      }\n+    } else {\n+      print(\"⚠️ App will continue with limited Firebase features\");\n+    }\n+  }\n+\n+  // Configure messaging permissions safely\n+  try {\n+    await messaging.requestPermission(\n+      alert: true,\n+      announcement: false,\n+      badge: true,\n+      carPlay: false,\n+      criticalAlert: false,\n+      provisional: false,\n+      sound: true,\n+    );\n+\n+    // Configure foreground notifications\n+    await FirebaseMessaging.instance\n+        .setForegroundNotificationPresentationOptions(\n+          alert: true,\n+          badge: true,\n+          sound: true,\n+        );\n+\n+    print(\"✅ Firebase Messaging permissions configured\");\n+  } catch (e) {\n+    print(\"⚠️ Firebase Messaging configuration error: $e\");\n+  }\n+\n+  // Initialize local notifications\n+  await LocalNotification.init();\n+\n+  // Request notification permissions\n+  await requestNotificationPermission();\n+\n+  // Set background message handler safely\n+  try {\n+    FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);\n+    print(\"✅ Background message handler set\");\n+  } catch (e) {\n+    print(\"⚠️ Background message handler error: $e\");\n+  }\n+\n+  await GetStorage.init();\n+  await initializeDateFormatting();\n+\n+  final User? currentUser = FirebaseAuth.instance.currentUser;\n+\n+  runApp(\n+    ScreenUtilInit(\n+      designSize: const Size(375, 812),\n+      minTextAdapt: true,\n+      splitScreenMode: true,\n+      builder: (context, child) {\n+        return MyApp(isLoggedIn: currentUser != null);\n+      },\n+    ),\n+  );\n+}\n+\n+Future<void> requestNotificationPermission() async {\n+  if (await Permission.notification.isDenied) {\n+    await Permission.notification.request();\n+  }\n+}\n+\n+/// التعامل مع الإشعارات الواردة في الخلفية\n+@pragma('vm:entry-point')\n+Future<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {\n+  // Initialize Firebase if not already initialized\n+  if (Firebase.apps.isEmpty) {\n+    await Firebase.initializeApp(\n+      options: DefaultFirebaseOptions.currentPlatform,\n+    );\n+  }\n+\n+  print(\"✅ Background handler called - handling notification\");\n+\n+  try {\n+    final String type = message.data['type'] ?? '';\n+\n+    switch (type) {\n+      case 'message':\n+        await LocalNotification.showNotificationMessage(\n+          message.notification?.title ?? '',\n+          message.notification?.body ?? '',\n+          message.data['uid'] ?? '',\n+        );\n+        break;\n+      case 'audio':\n+        await LocalNotification.showNotificationMessage(\n+          message.notification?.title ?? '',\n+          message.notification?.body ?? '',\n+          message.data['uid'] ?? '',\n+        );\n+        break;\n+      case 'AcceptTheRequest':\n+        await LocalNotification.showNotificationAcceptTheRequest(\n+          message.notification?.title ?? '',\n+          message.notification?.body ?? '',\n+          message.data['uid'] ?? '',\n+        );\n+        break;\n+      case 'RequestRejected':\n+        await LocalNotification.showNotificationRequestRejected(\n+          message.notification?.title ?? '',\n+          message.notification?.body ?? '',\n+          message.data['uid'] ?? '',\n+        );\n+        break;\n+      case 'ScanerBarCode':\n+        await LocalNotification.showNotificationScannerBarCode(\n+          message.notification?.title ?? '',\n+          message.notification?.body ?? '',\n+          message.data['uid'] ?? '',\n+        );\n+        break;\n+      case 'Done':\n+        await LocalNotification.showNotificationDone(\n+          message.notification?.title ?? '',\n+          message.notification?.body ?? '',\n+          message.data['uid'] ?? '',\n+        );\n+        break;\n+      case 'image':\n+        await LocalNotification.showNotificationMessage(\n+          message.notification?.title ?? '',\n+          message.notification?.body ?? '',\n+          message.data['uid'] ?? '',\n+        );\n+        break;\n+      case 'video':\n+        await LocalNotification.showNotificationMessage(\n+          message.notification?.title ?? '',\n+          message.notification?.body ?? '',\n+          message.data['uid'] ?? '',\n+        );\n+        break;\n+      default:\n+        debugPrint('Unhandled notification type: $type');\n+    }\n+  } catch (e) {\n+    debugPrint('Error handling background notification: $e');\n+  }\n+}\n+\n+class MyApp extends StatelessWidget {\n+  const MyApp({super.key, this.isLoggedIn});\n+  final bool? isLoggedIn;\n+\n+  @override\n+  Widget build(BuildContext context) {\n+    return GetMaterialApp(\n+      initialBinding: InitialBindings(),\n+      getPages: AppPages.routes,\n+      debugShowCheckedModeBanner: false,\n+      theme: ThemeData(\n+        scaffoldBackgroundColor: Colors.white,\n+        appBarTheme: const AppBarTheme(\n+          elevation: 0,\n+          titleTextStyle: TextStyle(\n+            color: Colors.white,\n+            fontSize: 20,\n+            fontWeight: FontWeight.bold,\n+          ),\n+        ),\n+      ),\n+\n+      // You can use the library anywhere in the app even in theme\n+      home: isLoggedIn! ? BottomBar(initialIndex: 0,) : BottomBar(initialIndex: 0,),\n+    );\n+  }\n+}\n"
                },
                {
                    "date": 1753157006819,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n import 'package:codora/%D8%A7%D9%84%D9%83%D9%88%D8%AF%20%D8%A7%D9%84%D8%AE%D8%A7%D8%B5%20%D8%A8%D8%AA%D8%B7%D8%A8%D9%8A%D9%82%20%D8%A7%D9%84%D8%B9%D9%85%D9%8A%D9%84%20/bottonBar/botonBar.dart';\n import 'package:codora/%D8%A7%D9%84%D9%83%D9%88%D8%AF%20%D8%A7%D9%84%D8%AE%D8%A7%D8%B5%20%D8%A8%D8%AA%D8%B7%D8%A8%D9%8A%D9%82%20%D8%A7%D9%84%D8%B9%D9%85%D9%8A%D9%84%20/chat/google/InitialBindings.dart';\n-import 'package:codora/%D8%A7%D9%84%D9%83%D9%88%D8%AF%20%D8%A7%D9%84%D8%AE%D8%A7%D8%B5%20%D8%A8%D8%AA%D8%B7%D8%A8%D9%8A%D9%82%20%D8%A7%D9%84%D8%B9%D9%85%D9%8A%D9%84%20/registration/welcomePage/WelcomePage.dart';\n import 'routes/app_pages.dart';\n import 'package:firebase_auth/firebase_auth.dart';\n import 'package:firebase_core/firebase_core.dart';\n import 'package:firebase_messaging/firebase_messaging.dart';\n@@ -276,8 +275,9 @@\n         ),\n       ),\n \n       // You can use the library anywhere in the app even in theme\n-      home: isLoggedIn! ? WelcomePage() : WelcomePage(),\n+      home:\n+          isLoggedIn! ? BottomBar(initialIndex: 0) : BottomBar(initialIndex: 0),\n     );\n   }\n }\n"
                }
            ],
            "date": 1752490157848,
            "name": "Commit-0",
            "content": "import 'package:codora/%D8%A7%D9%84%D9%83%D9%88%D8%AF%20%D8%A7%D9%84%D8%AE%D8%A7%D8%B5%20%D8%A8%D8%AA%D8%B7%D8%A8%D9%8A%D9%82%20%D8%A7%D9%84%D8%A8%D8%A7%D8%A6%D8%B9/seller_app_auth/controllers/seller_auth_controller.dart';\nimport 'package:codora/%D8%A7%D9%84%D9%83%D9%88%D8%AF%20%D8%A7%D9%84%D8%AE%D8%A7%D8%B5%20%D8%A8%D8%AA%D8%B7%D8%A8%D9%8A%D9%82%20%D8%A7%D9%84%D8%A8%D8%A7%D8%A6%D8%B9/ui/controllers/retail_cart_controller.dart';\nimport 'package:codora/%D8%A7%D9%84%D9%83%D9%88%D8%AF%20%D8%A7%D9%84%D8%AE%D8%A7%D8%B5%20%D8%A8%D8%AA%D8%B7%D8%A8%D9%8A%D9%82%20%D8%A7%D9%84%D8%A8%D8%A7%D8%A6%D8%B9/seller_app_auth/controllers/seller_auth_bindings.dart';\nimport 'package:codora/%D8%A7%D9%84%D9%83%D9%88%D8%AF%20%D8%A7%D9%84%D8%AE%D8%A7%D8%B5%20%D8%A8%D8%AA%D8%B7%D8%A8%D9%8A%D9%82%20%D8%A7%D9%84%D8%A8%D8%A7%D8%A6%D8%B9/seller_app_auth/ui/welcome1.dart';\nimport 'routes/app_pages.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:firebase_core/firebase_core.dart';\nimport 'package:firebase_messaging/firebase_messaging.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_screenutil/flutter_screenutil.dart';\nimport 'package:get/get.dart';\nimport 'package:get_storage/get_storage.dart';\nimport 'package:intl/date_symbol_data_local.dart';\nimport 'dart:io';\n\nimport 'الكود الخاص بتطبيق العميل /controler/local-notification-onroller.dart';\nimport 'firebase_options.dart';\nimport 'package:permission_handler/permission_handler.dart';\n\nlate FirebaseMessaging messaging;\n\nclass InitialBindings extends Bindings {\n  @override\n  void dependencies() {\n    Get.put(SellerAuthBindings());\n    Get.lazyPut(()=>SellerAuthController()) ;\n    Get.put(RetailCartController(), permanent: true);\n  }\n}\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  // Initialize Firebase properly with iOS-specific handling\n  try {\n    print(\"🔧 Starting Firebase initialization...\");\n    \n    // Always try to initialize from Dart to ensure proper configuration\n    await Firebase.initializeApp(\n      options: DefaultFirebaseOptions.currentPlatform,\n    );\n    print(\"✅ Firebase initialized successfully from Dart\");\n    \n    // Wait longer for iOS to ensure everything is ready\n    if (Platform.isIOS) {\n      await Future.delayed(Duration(milliseconds: 5000));\n      print(\"✅ iOS Firebase extended initialization delay completed\");\n    } else {\n      await Future.delayed(Duration(milliseconds: 2000));\n      print(\"✅ Android Firebase initialization delay completed\");\n    }\n    \n    // Initialize Firebase Messaging safely\n    try {\n      messaging = FirebaseMessaging.instance;\n      print(\"✅ Firebase Messaging initialized\");\n      \n    } catch (messagingError) {\n      print(\"⚠️ Firebase Messaging initialization error: $messagingError\");\n      // Continue without messaging features\n    }\n    \n  } catch (e) {\n    print(\"⚠️ Firebase initialization error: $e\");\n    \n    // If initialization fails, try to use existing app (for iOS)\n    if (Platform.isIOS && Firebase.apps.isNotEmpty) {\n      print(\"🔄 Using existing Firebase app on iOS\");\n      try {\n        messaging = FirebaseMessaging.instance;\n        print(\"✅ Firebase Messaging initialized with existing app\");\n      } catch (msgError) {\n        print(\"⚠️ Messaging error with existing app: $msgError\");\n      }\n    } else {\n      print(\"⚠️ App will continue with limited Firebase features\");\n    }\n  }\n\n  // Configure messaging permissions safely\n  try {\n    await messaging.requestPermission(\n      alert: true,\n      announcement: false,\n      badge: true,\n      carPlay: false,\n      criticalAlert: false,\n      provisional: false,\n      sound: true,\n    );\n    \n    // Configure foreground notifications\n    await FirebaseMessaging.instance.setForegroundNotificationPresentationOptions(\n      alert: true,\n      badge: true,\n      sound: true,\n    );\n    \n    print(\"✅ Firebase Messaging permissions configured\");\n  } catch (e) {\n    print(\"⚠️ Firebase Messaging configuration error: $e\");\n  }\n\n  // Initialize local notifications\n  await LocalNotification.init();\n\n  // Request notification permissions\n  await requestNotificationPermission();\n\n  // Set background message handler safely\n  try {\n    FirebaseMessaging.onBackgroundMessage(_firebaseMessagingBackgroundHandler);\n    print(\"✅ Background message handler set\");\n  } catch (e) {\n    print(\"⚠️ Background message handler error: $e\");\n  }\n\n  await GetStorage.init();\n  await initializeDateFormatting();\n\n  final User? currentUser = FirebaseAuth.instance.currentUser;\n\n  runApp(\n    ScreenUtilInit(\n      designSize: const Size(375, 812),\n      minTextAdapt: true,\n      splitScreenMode: true,\n      builder: (context, child) {\n        return MyApp(isLoggedIn: currentUser != null);\n      },\n    ),\n  );\n}\n\nFuture<void> requestNotificationPermission() async {\n  if (await Permission.notification.isDenied) {\n    await Permission.notification.request();\n  }\n}\n\n/// التعامل مع الإشعارات الواردة في الخلفية\n@pragma('vm:entry-point')\nFuture<void> _firebaseMessagingBackgroundHandler(RemoteMessage message) async {\n  // Initialize Firebase if not already initialized\n  if (Firebase.apps.isEmpty) {\n    await Firebase.initializeApp(\n      options: DefaultFirebaseOptions.currentPlatform,\n    );\n  }\n  \n  print(\"✅ Background handler called - handling notification\");\n\n  try {\n    final String type = message.data['type'] ?? '';\n\n    switch (type) {\n      case 'message':\n        await LocalNotification.showNotificationMessage(\n          message.notification?.title ?? '',\n          message.notification?.body ?? '',\n          message.data['uid'] ?? '',\n        );\n        break;\n      case 'audio':\n        await LocalNotification.showNotificationMessage(\n          message.notification?.title ?? '',\n          message.notification?.body ?? '',\n          message.data['uid'] ?? '',\n        );\n        break;\n      case 'AcceptTheRequest':\n        await LocalNotification.showNotificationAcceptTheRequest(\n          message.notification?.title ?? '',\n          message.notification?.body ?? '',\n          message.data['uid'] ?? '',\n        );\n        break;\n      case 'RequestRejected':\n        await LocalNotification.showNotificationRequestRejected(\n          message.notification?.title ?? '',\n          message.notification?.body ?? '',\n          message.data['uid'] ?? '',\n        );\n        break;\n      case 'ScanerBarCode':\n        await LocalNotification.showNotificationScannerBarCode(\n          message.notification?.title ?? '',\n          message.notification?.body ?? '',\n          message.data['uid'] ?? '',\n        );\n        break;\n      case 'Done':\n        await LocalNotification.showNotificationDone(\n          message.notification?.title ?? '',\n          message.notification?.body ?? '',\n          message.data['uid'] ?? '',\n        );\n        break;\n      case 'image':\n        await LocalNotification.showNotificationMessage(\n          message.notification?.title ?? '',\n          message.notification?.body ?? '',\n          message.data['uid'] ?? '',\n        );\n        break;\n      case 'video':\n        await LocalNotification.showNotificationMessage(\n          message.notification?.title ?? '',\n          message.notification?.body ?? '',\n          message.data['uid'] ?? '',\n        );\n        break;\n      default:\n        debugPrint('Unhandled notification type: $type');\n    }\n  } catch (e) {\n    debugPrint('Error handling background notification: $e');\n  }\n}\n\nclass MyApp extends StatelessWidget {\n   const MyApp({super.key, this.isLoggedIn});\n  final bool? isLoggedIn;\n\n  @override\n  Widget build(BuildContext context) {\n    return GetMaterialApp(\n      initialBinding: InitialBindings(),\n      getPages: AppPages.routes,\n      debugShowCheckedModeBanner: false,\n        theme: ThemeData(\n        scaffoldBackgroundColor: Colors.white,\n        appBarTheme: const AppBarTheme(\n\n        elevation: 0,\n        titleTextStyle: TextStyle(\n        color: Colors.white,\n        fontSize: 20,\n        fontWeight: FontWeight.bold, ),\n             ),\n             ),\n\n      // You can use the library anywhere in the app even in theme\n\n      home:isLoggedIn!\n          ? WelcomePage1()\n          : WelcomePage1(),\n    );\n  }\n}\n\n\n"
        }
    ]
}