{
    "sourceFile": "lib/الكود الخاص بتطبيق البائع/addItem/addQuantity/services/barcode_generator_service.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752414782346,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752414782346,
            "name": "Commit-0",
            "content": "import 'dart:math';\n\n/// خدمة توليد الباركودات التسلسلية\nclass BarcodeGeneratorService {\n  final Random _random = Random();\n  \n  /// توليد باركود تسلسلي فريد\n  String generateSequentialBarcode({\n    required String productId,\n    required int sequenceNumber,\n  }) {\n    // إنشاء timestamp\n    final String timestamp = DateTime.now().millisecondsSinceEpoch.toString();\n    \n    // أخذ آخر 8 أرقام من timestamp كـ base code\n    final String baseCode = timestamp.substring(timestamp.length - 8);\n    \n    // تحويل معرف المنتج إلى كود قصير\n    final String productCode = _generateProductCode(productId);\n    \n    // إنشاء رقم تسلسلي مع padding\n    final String sequentialNumber = sequenceNumber.toString().padLeft(4, '0');\n    \n    // إضافة رقم عشوائي للتفرد\n    final String randomPart = _random.nextInt(99).toString().padLeft(2, '0');\n    \n    // دمج كل الأجزاء لتكوين الباركود النهائي\n    return '$productCode$baseCode$sequentialNumber$randomPart';\n  }\n  \n  /// توليد باركود تسلسلي بمعايير أبسط (للتوافق مع الكود الموجود)\n  String generateSequentialBarcodeSimple(String productName, int index) {\n    // إنشاء timestamp\n    final String timestamp = DateTime.now().millisecondsSinceEpoch.toString();\n    \n    // أخذ آخر 8 أرقام من timestamp كـ base code\n    final String baseCode = timestamp.substring(timestamp.length - 8);\n    \n    // تحويل اسم المنتج إلى كود قصير\n    final String productCode = _generateProductCode(productName);\n    \n    // إنشاء رقم تسلسلي مع padding\n    final String sequentialNumber = index.toString().padLeft(4, '0');\n    \n    // إضافة رقم عشوائي للتفرد\n    final String randomPart = _random.nextInt(99).toString().padLeft(2, '0');\n    \n    // دمج كل الأجزاء لتكوين الباركود النهائي\n    return '$productCode$baseCode$sequentialNumber$randomPart';\n  }\n  \n  /// توليد باركود تسلسلي بدون معاملات (للاستخدام العام)\n  String generateSimpleSequentialBarcode() {\n    final String timestamp = DateTime.now().millisecondsSinceEpoch.toString();\n    final String baseCode = timestamp.substring(timestamp.length - 8);\n    final String randomPart = _random.nextInt(9999).toString().padLeft(4, '0');\n    \n    return '$baseCode$randomPart';\n  }\n  \n  /// توليد كود المنتج من اسم المنتج أو معرفه\n  String _generateProductCode(String input) {\n    if (input.isEmpty) return 'PRD';\n    \n    // تنظيف النص من المسافات والرموز\n    final String cleanInput = input\n        .replaceAll(' ', '')\n        .replaceAll(RegExp(r'[^\\w\\u0600-\\u06FF]'), '')\n        .toUpperCase();\n    \n    if (cleanInput.isEmpty) return 'PRD';\n    \n    // أخذ أول 3 أحرف أو أرقام من النص\n    final String code = cleanInput.length >= 3 \n        ? cleanInput.substring(0, 3)\n        : cleanInput.padRight(3, 'X');\n    \n    return code;\n  }\n  \n  /// توليد باركود رئيسي للمنتج\n  String generateMainBarcode(String productName) {\n    final String timestamp = DateTime.now().millisecondsSinceEpoch.toString();\n    final String productCode = _generateProductCode(productName);\n    final String timeCode = timestamp.substring(timestamp.length - 6);\n    final String randomCode = _random.nextInt(999).toString().padLeft(3, '0');\n    \n    return 'MAIN$productCode$timeCode$randomCode';\n  }\n  \n  /// توليد مجموعة من الباركودات التسلسلية\n  List<String> generateMultipleSequentialBarcodes(String productName, int quantity) {\n    final List<String> barcodes = [];\n    \n    for (int i = 1; i <= quantity; i++) {\n      barcodes.add(generateSequentialBarcodeSimple(productName, i));\n    }\n    \n    return barcodes;\n  }\n  \n  /// التحقق من صحة تنسيق الباركود\n  bool isValidBarcode(String barcode) {\n    if (barcode.isEmpty) return false;\n    \n    // التحقق من الطول الأدنى\n    if (barcode.length < 8) return false;\n    \n    // التحقق من أن الباركود يحتوي على أرقام وحروف فقط\n    final RegExp validPattern = RegExp(r'^[A-Z0-9]+$');\n    return validPattern.hasMatch(barcode.toUpperCase());\n  }\n  \n  /// استخراج معلومات من الباركود التسلسلي\n  Map<String, String> extractBarcodeInfo(String barcode) {\n    if (!isValidBarcode(barcode) || barcode.length < 15) {\n      return {'error': 'باركود غير صالح'};\n    }\n    \n    try {\n      final String productCode = barcode.substring(0, 3);\n      final String timestamp = barcode.substring(3, 11);\n      final String sequentialNumber = barcode.substring(11, 15);\n      final String randomPart = barcode.substring(15);\n      \n      return {\n        'productCode': productCode,\n        'timestamp': timestamp,\n        'sequentialNumber': sequentialNumber,\n        'randomPart': randomPart,\n        'isSequential': 'true'\n      };\n    } catch (e) {\n      return {'error': 'فشل في تحليل الباركود'};\n    }\n  }\n  \n  /// توليد باركود مع معايير مخصصة\n  String generateCustomBarcode({\n    required String prefix,\n    required String productId,\n    int? sequenceNumber,\n    String? suffix,\n  }) {\n    final String timestamp = DateTime.now().millisecondsSinceEpoch.toString();\n    final String timeCode = timestamp.substring(timestamp.length - 6);\n    final String productCode = _generateProductCode(productId);\n    \n    String barcode = '$prefix$productCode$timeCode';\n    \n    if (sequenceNumber != null) {\n      barcode += sequenceNumber.toString().padLeft(4, '0');\n    }\n    \n    if (suffix != null) {\n      barcode += suffix;\n    } else {\n      barcode += _random.nextInt(999).toString().padLeft(3, '0');\n    }\n    \n    return barcode;\n  }\n  \n  /// توليد QR Code data للمنتج\n  String generateQRCodeData({\n    required String productId,\n    required String productName,\n    String? price,\n    String? storeId,\n  }) {\n    final Map<String, String> qrData = {\n      'type': 'product',\n      'id': productId,\n      'name': productName,\n      'timestamp': DateTime.now().millisecondsSinceEpoch.toString(),\n    };\n    \n    if (price != null) qrData['price'] = price;\n    if (storeId != null) qrData['store'] = storeId;\n    \n    // تحويل البيانات إلى نص مرمز\n    return qrData.entries\n        .map((e) => '${e.key}:${e.value}')\n        .join('|');\n  }\n}"
        }
    ]
}