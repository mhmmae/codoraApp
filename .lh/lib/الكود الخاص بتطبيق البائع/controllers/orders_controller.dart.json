{
    "sourceFile": "lib/الكود الخاص بتطبيق البائع/controllers/orders_controller.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752751503157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752751503157,
            "name": "Commit-0",
            "content": "import 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:get/get.dart';\nimport 'dart:async';\nimport '../../XXX/xxx_firebase.dart';\n\n/// تعداد حالات الطلب\nenum OrderStatus {\n  pending, // بانتظار القبول\n  accepted, // تم القبول وجاري التحضير\n  readyForPickup, // جاهز للاستلام من قبل عامل التوصيل\n  pickedUp, // تم استلامه من قبل عامل التوصيل\n  delivered, // تم التسليم\n  cancelled, // تم الإلغاء\n}\n\n/// متحكم إدارة الطلبات للبائع\n/// يدير عرض الطلبات وحساب عدد الطلبات الجديدة\nclass OrdersController extends GetxController {\n  // حالة عدد الطلبات الجديدة\n  final RxInt newOrdersCount = 0.obs;\n\n  // حالة عدد الطلبات المقبولة\n  final RxInt acceptedOrdersCount = 0.obs;\n\n  // حالة عدد الطلبات الجاهزة للاستلام\n  final RxInt readyOrdersCount = 0.obs;\n\n  // حالة التحميل\n  final RxBool isLoading = false.obs;\n\n  // قائمة جميع الطلبات\n  final RxList<QueryDocumentSnapshot> allOrdersList =\n      <QueryDocumentSnapshot>[].obs;\n\n  // قائمة الطلبات الجديدة\n  final RxList<QueryDocumentSnapshot> newOrdersList =\n      <QueryDocumentSnapshot>[].obs;\n\n  // قائمة الطلبات المقبولة\n  final RxList<QueryDocumentSnapshot> acceptedOrdersList =\n      <QueryDocumentSnapshot>[].obs;\n\n  // قائمة الطلبات الجاهزة للاستلام\n  final RxList<QueryDocumentSnapshot> readyOrdersList =\n      <QueryDocumentSnapshot>[].obs;\n\n  // للاستماع لتغييرات الطلبات في الوقت الفعلي\n  StreamSubscription<QuerySnapshot>? _ordersStreamSubscription;\n\n  // معرف البائع الحالي\n  String? get currentSellerId => FirebaseAuth.instance.currentUser?.uid;\n\n  @override\n  void onInit() {\n    super.onInit();\n    _startListeningToOrders();\n  }\n\n  @override\n  void onClose() {\n    _ordersStreamSubscription?.cancel();\n    super.onClose();\n  }\n\n  /// بدء الاستماع للطلبات في الوقت الفعلي\n  void _startListeningToOrders() {\n    if (currentSellerId == null) return;\n\n    _ordersStreamSubscription = FirebaseFirestore.instance\n        .collection(FirebaseX.ordersCollection)\n        .where('appName', isEqualTo: FirebaseX.appName)\n        .where('uidAdd', isEqualTo: currentSellerId)\n        .snapshots()\n        .listen(\n          (QuerySnapshot snapshot) {\n            allOrdersList.value = snapshot.docs;\n            _categorizeOrders(snapshot.docs);\n\n            debugPrint(\n              \"📋 [OrdersController] تم تحديث جميع الطلبات: ${allOrdersList.length}\",\n            );\n            debugPrint(\"   - طلبات جديدة: ${newOrdersCount.value}\");\n            debugPrint(\"   - طلبات مقبولة: ${acceptedOrdersCount.value}\");\n            debugPrint(\"   - طلبات جاهزة: ${readyOrdersCount.value}\");\n          },\n          onError: (error) {\n            debugPrint(\"❌ [OrdersController] خطأ في جلب الطلبات: $error\");\n          },\n        );\n  }\n\n  /// تصنيف الطلبات حسب حالتها\n  void _categorizeOrders(List<QueryDocumentSnapshot> orders) {\n    final newOrders = <QueryDocumentSnapshot>[];\n    final acceptedOrders = <QueryDocumentSnapshot>[];\n    final readyOrders = <QueryDocumentSnapshot>[];\n\n    for (var order in orders) {\n      final data = order.data() as Map<String, dynamic>;\n      final orderStatus = _getOrderStatus(data);\n\n      switch (orderStatus) {\n        case OrderStatus.pending:\n          newOrders.add(order);\n          break;\n        case OrderStatus.accepted:\n          acceptedOrders.add(order);\n          break;\n        case OrderStatus.readyForPickup:\n          readyOrders.add(order);\n          break;\n        default:\n          // الطلبات المكتملة أو الملغاة لا تظهر في القوائم الرئيسية\n          break;\n      }\n    }\n\n    newOrdersList.value = newOrders;\n    acceptedOrdersList.value = acceptedOrders;\n    readyOrdersList.value = readyOrders;\n\n    newOrdersCount.value = newOrders.length;\n    acceptedOrdersCount.value = acceptedOrders.length;\n    readyOrdersCount.value = readyOrders.length;\n  }\n\n  /// تحديد حالة الطلب من البيانات\n  OrderStatus _getOrderStatus(Map<String, dynamic> orderData) {\n    final isAccepted = orderData['RequestAccept'] ?? false;\n    final orderStatus = orderData['orderStatus'] as String?;\n\n    if (!isAccepted) {\n      return OrderStatus.pending;\n    }\n\n    switch (orderStatus) {\n      case 'accepted':\n        return OrderStatus.accepted;\n      case 'readyForPickup':\n        return OrderStatus.readyForPickup;\n      case 'pickedUp':\n        return OrderStatus.pickedUp;\n      case 'delivered':\n        return OrderStatus.delivered;\n      case 'cancelled':\n        return OrderStatus.cancelled;\n      default:\n        return OrderStatus.accepted; // افتراضي للطلبات المقبولة بدون حالة\n    }\n  }\n\n  /// إعادة تحميل الطلبات يدوياً\n  Future<void> refreshOrders() async {\n    if (currentSellerId == null) return;\n\n    isLoading.value = true;\n\n    try {\n      final QuerySnapshot snapshot =\n          await FirebaseFirestore.instance\n              .collection(FirebaseX.ordersCollection)\n              .where('appName', isEqualTo: FirebaseX.appName)\n              .where('uidAdd', isEqualTo: currentSellerId)\n              .get();\n\n      allOrdersList.value = snapshot.docs;\n      _categorizeOrders(snapshot.docs);\n\n      debugPrint(\n        \"🔄 [OrdersController] تم تحديث جميع الطلبات يدوياً: ${allOrdersList.length}\",\n      );\n    } catch (e) {\n      debugPrint(\"❌ [OrdersController] خطأ في تحديث الطلبات: $e\");\n    } finally {\n      isLoading.value = false;\n    }\n  }\n\n  /// جلب تفاصيل طلب معين\n  Future<Map<String, dynamic>?> getOrderDetails(String orderId) async {\n    try {\n      final DocumentSnapshot orderDoc =\n          await FirebaseFirestore.instance\n              .collection(FirebaseX.ordersCollection)\n              .doc(orderId)\n              .get();\n\n      if (orderDoc.exists) {\n        return orderDoc.data() as Map<String, dynamic>?;\n      }\n      return null;\n    } catch (e) {\n      debugPrint(\"❌ [OrdersController] خطأ في جلب تفاصيل الطلب: $e\");\n      return null;\n    }\n  }\n\n  /// قبول طلب جديد\n  Future<void> acceptOrder(String orderId) async {\n    try {\n      await FirebaseFirestore.instance\n          .collection(FirebaseX.ordersCollection)\n          .doc(orderId)\n          .update({\n            'RequestAccept': true,\n            'orderStatus': 'accepted',\n            'acceptedAt': FieldValue.serverTimestamp(),\n            'updatedAt': FieldValue.serverTimestamp(),\n          });\n\n      Get.snackbar(\n        '✅ تم قبول الطلب',\n        'يمكنك الآن البدء في تحضير المنتجات',\n        backgroundColor: Get.theme.colorScheme.primary.withOpacity(0.1),\n        colorText: Get.theme.colorScheme.primary,\n        duration: Duration(seconds: 3),\n      );\n\n      debugPrint(\"✅ [OrdersController] تم قبول الطلب $orderId\");\n    } catch (e) {\n      debugPrint(\"❌ [OrdersController] خطأ في قبول الطلب: $e\");\n      Get.snackbar(\n        '❌ خطأ',\n        'فشل في قبول الطلب، حاول مرة أخرى',\n        backgroundColor: Get.theme.colorScheme.error.withOpacity(0.1),\n        colorText: Get.theme.colorScheme.error,\n      );\n      rethrow;\n    }\n  }\n\n  /// رفض طلب\n  Future<void> rejectOrder(String orderId) async {\n    try {\n      await FirebaseFirestore.instance\n          .collection(FirebaseX.ordersCollection)\n          .doc(orderId)\n          .update({\n            'RequestAccept': false,\n            'orderStatus': 'cancelled',\n            'rejectedAt': FieldValue.serverTimestamp(),\n            'updatedAt': FieldValue.serverTimestamp(),\n          });\n\n      Get.snackbar(\n        '❌ تم رفض الطلب',\n        'تم رفض الطلب بنجاح',\n        backgroundColor: Get.theme.colorScheme.error.withOpacity(0.1),\n        colorText: Get.theme.colorScheme.error,\n        duration: Duration(seconds: 3),\n      );\n\n      debugPrint(\"❌ [OrdersController] تم رفض الطلب $orderId\");\n    } catch (e) {\n      debugPrint(\"❌ [OrdersController] خطأ في رفض الطلب: $e\");\n      rethrow;\n    }\n  }\n\n  /// تحديد الطلب كجاهز للاستلام\n  Future<void> markOrderReady(String orderId) async {\n    try {\n      await FirebaseFirestore.instance\n          .collection(FirebaseX.ordersCollection)\n          .doc(orderId)\n          .update({\n            'orderStatus': 'readyForPickup',\n            'readyAt': FieldValue.serverTimestamp(),\n            'updatedAt': FieldValue.serverTimestamp(),\n          });\n\n      Get.snackbar(\n        '📦 الطلب جاهز!',\n        'تم تحديد الطلب كجاهز للاستلام من قبل عامل التوصيل',\n        backgroundColor: Get.theme.colorScheme.tertiary.withOpacity(0.1),\n        colorText: Get.theme.colorScheme.tertiary,\n        duration: Duration(seconds: 3),\n      );\n\n      debugPrint(\n        \"📦 [OrdersController] تم تحديد الطلب $orderId كجاهز للاستلام\",\n      );\n    } catch (e) {\n      debugPrint(\"❌ [OrdersController] خطأ في تحديد الطلب كجاهز: $e\");\n      Get.snackbar(\n        '❌ خطأ',\n        'فشل في تحديث حالة الطلب، حاول مرة أخرى',\n        backgroundColor: Get.theme.colorScheme.error.withOpacity(0.1),\n        colorText: Get.theme.colorScheme.error,\n      );\n      rethrow;\n    }\n  }\n\n  /// تأكيد استلام الطلب من قبل عامل التوصيل\n  Future<void> confirmPickup(String orderId) async {\n    try {\n      await FirebaseFirestore.instance\n          .collection(FirebaseX.ordersCollection)\n          .doc(orderId)\n          .update({\n            'orderStatus': 'pickedUp',\n            'pickedUpAt': FieldValue.serverTimestamp(),\n            'updatedAt': FieldValue.serverTimestamp(),\n          });\n\n      Get.snackbar(\n        '🚚 تم الاستلام',\n        'تم استلام الطلب من قبل عامل التوصيل',\n        backgroundColor: Get.theme.colorScheme.secondary.withOpacity(0.1),\n        colorText: Get.theme.colorScheme.secondary,\n        duration: Duration(seconds: 3),\n      );\n\n      debugPrint(\n        \"🚚 [OrdersController] تم استلام الطلب $orderId من قبل عامل التوصيل\",\n      );\n    } catch (e) {\n      debugPrint(\"❌ [OrdersController] خطأ في تأكيد استلام الطلب: $e\");\n      rethrow;\n    }\n  }\n\n  /// الحصول على وصف حالة الطلب\n  String getOrderStatusText(OrderStatus status) {\n    switch (status) {\n      case OrderStatus.pending:\n        return 'بانتظار القبول';\n      case OrderStatus.accepted:\n        return 'مقبول - جاري التحضير';\n      case OrderStatus.readyForPickup:\n        return 'جاهز للاستلام';\n      case OrderStatus.pickedUp:\n        return 'تم الاستلام';\n      case OrderStatus.delivered:\n        return 'تم التسليم';\n      case OrderStatus.cancelled:\n        return 'ملغى';\n    }\n  }\n\n  /// الحصول على أيقونة حالة الطلب\n  String getOrderStatusIcon(OrderStatus status) {\n    switch (status) {\n      case OrderStatus.pending:\n        return '⏳';\n      case OrderStatus.accepted:\n        return '✅';\n      case OrderStatus.readyForPickup:\n        return '📦';\n      case OrderStatus.pickedUp:\n        return '🚚';\n      case OrderStatus.delivered:\n        return '✅';\n      case OrderStatus.cancelled:\n        return '❌';\n    }\n  }\n}\n"
        }
    ]
}