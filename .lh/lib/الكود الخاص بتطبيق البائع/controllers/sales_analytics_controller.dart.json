{
    "sourceFile": "lib/الكود الخاص بتطبيق البائع/controllers/sales_analytics_controller.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752704601226,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752704601226,
            "name": "Commit-0",
            "content": "import 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:get/get.dart';\nimport 'package:flutter/material.dart';\nimport '../../XXX/xxx_firebase.dart';\nimport '../../../Model/sales_analytics_model.dart';\n\n/// متحكم تحليل المبيعات للبائع\nclass SalesAnalyticsController extends GetxController {\n  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n  final FirebaseAuth _auth = FirebaseAuth.instance;\n\n  // حالة التحميل\n  final RxBool isLoading = false.obs;\n  final RxString errorMessage = ''.obs;\n\n  // بيانات المبيعات\n  final RxList<SalesAnalyticsModel> dailySales = <SalesAnalyticsModel>[].obs;\n  final RxList<SalesAnalyticsModel> weeklySales = <SalesAnalyticsModel>[].obs;\n  final RxList<SalesAnalyticsModel> monthlySales = <SalesAnalyticsModel>[].obs;\n  final RxList<SalesAnalyticsModel> yearlySales = <SalesAnalyticsModel>[].obs;\n\n  // ملخص المبيعات\n  final Rx<DailySalesSummary?> todaySummary = Rx<DailySalesSummary?>(null);\n  final RxDouble totalDailyRevenue = 0.0.obs;\n  final RxDouble totalDailyProfit = 0.0.obs;\n  final RxInt totalDailyOrders = 0.obs;\n  final RxInt completedDailyOrders = 0.obs;\n\n  // فلترة البيانات\n  final Rx<DateTime> selectedDate = DateTime.now().obs;\n  final RxString selectedPeriod = 'today'.obs; // today, week, month, year\n\n  // معرف البائع الحالي\n  String? get currentSellerId => _auth.currentUser?.uid;\n\n  @override\n  void onInit() {\n    super.onInit();\n    _loadTodaySales();\n  }\n\n  /// تحميل مبيعات اليوم\n  Future<void> _loadTodaySales() async {\n    if (currentSellerId == null) return;\n\n    isLoading.value = true;\n    errorMessage.value = '';\n\n    try {\n      final DateTime today = DateTime.now();\n      final DateTime startOfDay = DateTime(today.year, today.month, today.day);\n      final DateTime endOfDay = DateTime(today.year, today.month, today.day, 23, 59, 59);\n\n      await _loadSalesForPeriod(startOfDay, endOfDay, 'today');\n      await _calculateDailySummary();\n    } catch (e) {\n      errorMessage.value = 'فشل في تحميل بيانات المبيعات: $e';\n      debugPrint('خطأ في تحميل مبيعات اليوم: $e');\n    } finally {\n      isLoading.value = false;\n    }\n  }\n\n  /// تحميل المبيعات لفترة معينة\n  Future<void> _loadSalesForPeriod(DateTime startDate, DateTime endDate, String period) async {\n    if (currentSellerId == null) return;\n\n    try {\n      // جلب الطلبات من Firestore\n      final QuerySnapshot ordersSnapshot = await _firestore\n          .collection('orders')\n          .where('appName', isEqualTo: FirebaseX.appName)\n          .where('uidAdd', isEqualTo: currentSellerId)\n          .where('timeOrder', isGreaterThanOrEqualTo: Timestamp.fromDate(startDate))\n          .where('timeOrder', isLessThanOrEqualTo: Timestamp.fromDate(endDate))\n          .orderBy('timeOrder', descending: true)\n          .get();\n\n      List<SalesAnalyticsModel> salesList = [];\n\n      for (QueryDocumentSnapshot orderDoc in ordersSnapshot.docs) {\n        final orderData = orderDoc.data() as Map<String, dynamic>;\n        \n        try {\n          // جلب بيانات المشتري\n          final buyerId = orderData['uidUser'] as String;\n          final buyerDoc = await _firestore\n              .collection(FirebaseX.collectionApp)\n              .doc(buyerId)\n              .get();\n\n          final buyerData = buyerDoc.exists ? \n              (buyerDoc.data() as Map<String, dynamic>) : <String, dynamic>{};\n\n          // جلب عناصر الطلب\n          final itemsSnapshot = await _firestore\n              .collection('orders')\n              .doc(orderDoc.id)\n              .collection('OrderItems')\n              .get();\n\n          List<OrderItemAnalytics> orderItems = [];\n          double totalProfit = 0.0;\n\n          for (QueryDocumentSnapshot itemDoc in itemsSnapshot.docs) {\n            final itemData = itemDoc.data() as Map<String, dynamic>;\n            \n            // جلب تفاصيل المنتج لحساب التكلفة والربح\n            final productData = await _getProductDetails(\n              itemData['uidItem'] as String,\n              itemData['isOfer'] as bool? ?? false,\n            );\n\n            if (productData != null) {\n              final quantity = (itemData['number'] as num?)?.toInt() ?? 1;\n              final unitPrice = (productData['priceOfItem'] as num?)?.toDouble() ?? 0.0;\n              final unitCost = (productData['cost'] as num?)?.toDouble() ?? unitPrice * 0.7; // افتراض التكلفة 70%\n\n              final orderItem = OrderItemAnalytics(\n                itemId: itemData['uidItem'] as String,\n                itemName: productData['nameOfItem'] ?? 'منتج غير معروف',\n                itemImageUrl: productData['url'],\n                quantity: quantity,\n                unitPrice: unitPrice,\n                unitCost: unitCost,\n                isOffer: itemData['isOfer'] as bool? ?? false,\n              );\n\n              orderItems.add(orderItem);\n              totalProfit += orderItem.itemProfit;\n            }\n          }\n\n          // جلب معلومات التوصيل\n          final deliveryInfo = await _getDeliveryInfo(orderDoc.id);\n\n          final salesRecord = SalesAnalyticsModel(\n            orderId: orderDoc.id,\n            buyerId: buyerId,\n            buyerName: buyerData['name'] ?? 'عميل غير معروف',\n            buyerPhoneNumber: buyerData['phneNumber'],\n            buyerImageUrl: buyerData['url'],\n            totalAmount: (orderData['totalPriceOfOrder'] as num?)?.toDouble() ?? 0.0,\n            sellerProfit: totalProfit,\n            orderDate: (orderData['timeOrder'] as Timestamp).toDate(),\n            deliveryDate: deliveryInfo['deliveryDate'],\n            orderStatus: _getOrderStatus(orderData),\n            deliveryTaskId: deliveryInfo['deliveryTaskId'],\n            driverName: deliveryInfo['driverName'],\n            driverPhoneNumber: deliveryInfo['driverPhoneNumber'],\n            deliveryStatus: deliveryInfo['deliveryStatus'] ?? 'pending',\n            paymentMethod: orderData['paymentMethod'] ?? 'cash_on_delivery',\n            items: orderItems,\n            deliveryAddress: orderData['shopAddressText'] ?? orderData['address'],\n            deliveryFee: deliveryInfo['deliveryFee'],\n          );\n\n          salesList.add(salesRecord);\n        } catch (e) {\n          debugPrint('خطأ في معالجة الطلب ${orderDoc.id}: $e');\n          continue;\n        }\n      }\n\n      // تحديث القوائم حسب الفترة\n      switch (period) {\n        case 'today':\n          dailySales.value = salesList;\n          break;\n        case 'week':\n          weeklySales.value = salesList;\n          break;\n        case 'month':\n          monthlySales.value = salesList;\n          break;\n        case 'year':\n          yearlySales.value = salesList;\n          break;\n      }\n\n    } catch (e) {\n      errorMessage.value = 'فشل في تحميل البيانات: $e';\n      debugPrint('خطأ في تحميل المبيعات: $e');\n    }\n  }\n\n  /// جلب تفاصيل المنتج\n  Future<Map<String, dynamic>?> _getProductDetails(String itemId, bool isOffer) async {\n    try {\n      final collection = isOffer ? 'Itemoffer' : 'Item';\n      final productDoc = await _firestore.collection(collection).doc(itemId).get();\n      \n      if (productDoc.exists) {\n        return productDoc.data() as Map<String, dynamic>;\n      }\n    } catch (e) {\n      debugPrint('خطأ في جلب تفاصيل المنتج $itemId: $e');\n    }\n    return null;\n  }\n\n  /// جلب معلومات التوصيل\n  Future<Map<String, dynamic>> _getDeliveryInfo(String orderId) async {\n    try {\n      final deliverySnapshot = await _firestore\n          .collection(FirebaseX.deliveryTasksCollection)\n          .where('orderId', isEqualTo: orderId)\n          .limit(1)\n          .get();\n\n      if (deliverySnapshot.docs.isNotEmpty) {\n        final deliveryData = deliverySnapshot.docs.first.data();\n        return {\n          'deliveryTaskId': deliverySnapshot.docs.first.id,\n          'deliveryStatus': deliveryData['status'] ?? 'pending',\n          'driverName': deliveryData['driverName'],\n          'driverPhoneNumber': deliveryData['driverPhoneNumber'],\n          'deliveryFee': (deliveryData['deliveryFee'] as num?)?.toDouble(),\n          'deliveryDate': deliveryData['deliveryConfirmationTime'] != null ?\n              (deliveryData['deliveryConfirmationTime'] as Timestamp).toDate() : null,\n        };\n      }\n    } catch (e) {\n      debugPrint('خطأ في جلب معلومات التوصيل للطلب $orderId: $e');\n    }\n\n    return {\n      'deliveryStatus': 'pending',\n      'deliveryFee': 0.0,\n    };\n  }\n\n  /// تحديد حالة الطلب\n  String _getOrderStatus(Map<String, dynamic> orderData) {\n    if (orderData['RequestAccept'] == true) {\n      if (orderData['Ready'] == true) {\n        return 'ready';\n      }\n      return 'accepted';\n    }\n    return 'pending';\n  }\n\n  /// حساب ملخص المبيعات اليومية\n  Future<void> _calculateDailySummary() async {\n    final sales = dailySales;\n    \n    if (sales.isEmpty) {\n      totalDailyRevenue.value = 0.0;\n      totalDailyProfit.value = 0.0;\n      totalDailyOrders.value = 0;\n      completedDailyOrders.value = 0;\n      return;\n    }\n\n    double revenue = 0.0;\n    double profit = 0.0;\n    int completed = 0;\n\n    for (final sale in sales) {\n      revenue += sale.totalAmount;\n      profit += sale.sellerProfit;\n      if (sale.isDelivered) completed++;\n    }\n\n    totalDailyRevenue.value = revenue;\n    totalDailyProfit.value = profit;\n    totalDailyOrders.value = sales.length;\n    completedDailyOrders.value = completed;\n\n    // إنشاء ملخص يومي\n    todaySummary.value = DailySalesSummary(\n      date: DateTime.now(),\n      totalOrders: sales.length,\n      completedOrders: completed,\n      pendingOrders: sales.length - completed,\n      totalRevenue: revenue,\n      totalProfit: profit,\n      averageOrderValue: sales.isNotEmpty ? revenue / sales.length : 0.0,\n      topBuyerIds: _getTopBuyerIds(sales),\n    );\n  }\n\n  /// الحصول على أفضل المشترين\n  List<String> _getTopBuyerIds(List<SalesAnalyticsModel> sales) {\n    Map<String, double> buyerTotals = {};\n    \n    for (final sale in sales) {\n      buyerTotals[sale.buyerId] = (buyerTotals[sale.buyerId] ?? 0) + sale.totalAmount;\n    }\n\n    final sortedBuyers = buyerTotals.entries.toList()\n      ..sort((a, b) => b.value.compareTo(a.value));\n\n    return sortedBuyers.take(5).map((e) => e.key).toList();\n  }\n\n  /// تحميل مبيعات فترة محددة\n  Future<void> loadSalesForPeriod(String period) async {\n    selectedPeriod.value = period;\n    isLoading.value = true;\n\n    try {\n      DateTime startDate, endDate;\n      final now = DateTime.now();\n\n      switch (period) {\n        case 'today':\n          startDate = DateTime(now.year, now.month, now.day);\n          endDate = DateTime(now.year, now.month, now.day, 23, 59, 59);\n          break;\n        case 'week':\n          startDate = now.subtract(Duration(days: now.weekday - 1));\n          startDate = DateTime(startDate.year, startDate.month, startDate.day);\n          endDate = DateTime(now.year, now.month, now.day, 23, 59, 59);\n          break;\n        case 'month':\n          startDate = DateTime(now.year, now.month, 1);\n          endDate = DateTime(now.year, now.month + 1, 0, 23, 59, 59);\n          break;\n        case 'year':\n          startDate = DateTime(now.year, 1, 1);\n          endDate = DateTime(now.year, 12, 31, 23, 59, 59);\n          break;\n        default:\n          return;\n      }\n\n      await _loadSalesForPeriod(startDate, endDate, period);\n      \n      if (period == 'today') {\n        await _calculateDailySummary();\n      }\n    } catch (e) {\n      errorMessage.value = 'فشل في تحميل بيانات الفترة: $e';\n    } finally {\n      isLoading.value = false;\n    }\n  }\n\n  /// تحديث البيانات\n  Future<void> refreshSalesData() async {\n    await loadSalesForPeriod(selectedPeriod.value);\n  }\n\n  /// الحصول على المبيعات الحالية حسب الفترة المحددة\n  List<SalesAnalyticsModel> get currentSales {\n    switch (selectedPeriod.value) {\n      case 'today':\n        return dailySales;\n      case 'week':\n        return weeklySales;\n      case 'month':\n        return monthlySales;\n      case 'year':\n        return yearlySales;\n      default:\n        return dailySales;\n    }\n  }\n\n  /// تصفية المبيعات حسب حالة التوصيل\n  List<SalesAnalyticsModel> getSalesByDeliveryStatus(String status) {\n    return currentSales.where((sale) => sale.deliveryStatus == status).toList();\n  }\n\n  /// تصفية المبيعات حسب المشتري\n  List<SalesAnalyticsModel> getSalesByBuyer(String buyerId) {\n    return currentSales.where((sale) => sale.buyerId == buyerId).toList();\n  }\n\n  /// حساب إجمالي المبيعات للفترة الحالية\n  double get currentPeriodRevenue {\n    return currentSales.fold(0.0, (sum, sale) => sum + sale.totalAmount);\n  }\n\n  /// حساب إجمالي الأرباح للفترة الحالية\n  double get currentPeriodProfit {\n    return currentSales.fold(0.0, (sum, sale) => sum + sale.sellerProfit);\n  }\n\n  /// حساب متوسط قيمة الطلب\n  double get averageOrderValue {\n    final sales = currentSales;\n    return sales.isNotEmpty ? currentPeriodRevenue / sales.length : 0.0;\n  }\n\n}\n"
        }
    ]
}