{
    "sourceFile": "lib/الكود الخاص بتطبيق البائع/seller_app_auth/controllers/seller_auth_controller.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752490157849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752490157849,
            "name": "Commit-0",
            "content": "import 'dart:convert';\nimport 'dart:io';\nimport 'dart:math';\nimport 'package:crypto/crypto.dart';\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:firebase_messaging/firebase_messaging.dart';\nimport 'package:flutter/foundation.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_facebook_auth/flutter_facebook_auth.dart';\nimport 'package:get/get.dart';\nimport 'package:google_sign_in/google_sign_in.dart';\nimport 'package:sign_in_with_apple/sign_in_with_apple.dart';\n\nimport '../../../XXX/xxx_firebase.dart';\nimport '../../../services/gpu_service.dart';\nimport '../controllers/SellerRegistrationController.dart';\nimport '../ui/SellerRegistrationScreen.dart';\nimport '../ui/seller_type_selection_screen.dart';\nimport '../../ui/seller_main_screen.dart';\nimport '../ui/seller_login_screen.dart';\n\nclass GetSignup1 extends GetxController {\n  // المتحكمات الخاصة بالنصوص يجب أن تُنشأ وتُمرَّر من الواجهة الخارجية\n  final TextEditingController email;\n  final TextEditingController password;\n\n  // متغير تفاعلي لحالة التحميل\n  final RxBool isLoading = false.obs;\n\n  GetSignup1({\n    required this.email,\n    required this.password,\n  });\n\n  /// دالة تسجيل الحساب باستخدام البريد الإلكتروني وكلمة المرور.\n  /// تتحقق أولاً من صلاحية النموذج باستخدام [globalKey]، وإن كانت البيانات صحيحة يتم إنشاء الحساب،\n  /// ثم إرسال رسالة التحقق على البريد الإلكتروني.\n  /// عند نجاح العملية يقوم بتنقل المستخدم إلى صفحة تسجيل الدخول.\n  Future<void> signUp(GlobalKey<FormState> globalKey) async {\n    // التأكد من صحة النموذج قبل المتابعة.\n    if (!globalKey.currentState!.validate()) return;\n\n    try {\n      isLoading.value = true;\n      // إنشاء الحساب باستخدام Firebase Authentication.\n      await FirebaseAuth.instance.createUserWithEmailAndPassword(\n        email: email.text.trim(),\n        password: password.text.trim(),\n      );\n\n      // الحصول على المستخدم الحالي وإرسال رسالة التحقق عبر البريد الإلكتروني.\n      User? user = FirebaseAuth.instance.currentUser;\n      await user?.sendEmailVerification();\n\n      // التنقل إلى صفحة تسجيل الدخول باستخدام GetX (تجنب استخدام BuildContext عبر الفجوات غير المتزامنة).\n      Get.off(() => SellerLoginScreen(isFirstTime: true));\n    } on FirebaseAuthException catch (e) {\n      // معالجة الأخطاء بناءً على رمز الخطأ.\n      isLoading.value = false;\n      switch (e.code) {\n        case 'weak-password':\n          Get.defaultDialog(\n            title: 'الباسورد ضعيف',\n            middleText: 'يجب أن يكون أكثر من 6 ارقام',\n            textConfirm: 'موافق',\n            onConfirm: () => Get.back(),\n            barrierDismissible: true,\n          );\n          break;\n        case 'email-already-in-use':\n          Get.defaultDialog(\n            title: 'البريد موجود',\n            middleText: 'هذا البريد مستخدم بالفعل. قم بتسجيل الدخول بدلاً من إنشاء حساب جديد.',\n            textConfirm: 'موافق',\n            onConfirm: () => Get.back(),\n            barrierDismissible: true,\n          );\n          break;\n        case 'invalid-email':\n          Get.defaultDialog(\n            title: 'البريد الإلكتروني غير صالح',\n            middleText: 'يرجى إدخال بريد إلكتروني صحيح.',\n            textConfirm: 'موافق',\n            onConfirm: () => Get.back(),\n            barrierDismissible: true,\n          );\n          break;\n        case 'operation-not-allowed':\n          Get.defaultDialog(\n            title: 'عملية غير مسموح بها',\n            middleText: '',\n            textConfirm: 'موافق',\n            onConfirm: () => Get.back(),\n            barrierDismissible: true,\n          );\n          break;\n        default:\n          Get.defaultDialog(\n            title: 'حدث خطأ',\n            middleText: e.message ?? 'حدث خطأ غير معروف.',\n            textConfirm: 'موافق',\n            onConfirm: () => Get.back(),\n            barrierDismissible: true,\n          );\n      }\n    } catch (e) {\n      isLoading.value = false;\n      // عرض رسالة خطأ عامة عند حدوث استثناء غير متوقع.\n      Get.defaultDialog(\n        title: 'خطأ',\n        middleText: 'حدث خطأ غير معروف: $e',\n        textConfirm: 'موافق',\n        onConfirm: () => Get.back(),\n        barrierDismissible: true,\n      );\n    } finally {\n      // إعادة تعيين حالة التحميل.\n      isLoading.value = false;\n    }\n  }\n}\n\n\n\n\n\n\nclass Get3  extends GetxController{}\n\n\n/// Controller شامل لإدارة تسجيل الدخول باستخدام مزودي المصادقة المتعددين.\n/// يعتمد على GetX لتحديث الحالة وإدارة التنقل دون استخدام BuildContext عبر الفجوات غير المتزامنة.\nclass SignInController1 extends GetxController {\n  /// حالة التحميل لتحديث الواجهة تلقائيًا.\n  final RxBool isLoading = false.obs;\n\n  /// مؤشر لتحديد ما إذا كانت هذه أول مرة لتسجيل الدخول.\n  bool isFirstTime;\n\n  /// المتحكمات الخاصة بنصوص البريد الإلكتروني وكلمة المرور.\n  final TextEditingController emailController;\n  final TextEditingController passwordController;\n\n  /// المثيل الخاص بـ FirebaseAuth.\n  final FirebaseAuth auth = FirebaseAuth.instance;\n\n  SignInController1({\n    required this.isFirstTime,\n    required this.emailController,\n    required this.passwordController,\n  });\n\n  // -----------------------------------------------------------\n  // دالة مساعدة لعرض رسالة الخطأ باستخدام Get.defaultDialog\n  // -----------------------------------------------------------\n  void showError(String message) {\n    Get.defaultDialog(\n      title: \"خطأ\",\n      middleText: message,\n      textConfirm: \"موافق\",\n      onConfirm: () => Get.back(), // يغلق الحوار\n      barrierDismissible: true,\n    );\n  }\n\n  // -----------------------------------------------------------\n  // الدوال المساعدة المشتركة\n  // -----------------------------------------------------------\n\n  /// توليد سلسلة عشوائية (nonce)، بطول 32 حرفًا افتراضيًا.\n  String generateNonce([int length = 32]) {\n    const charset = '0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvwxyz-._';\n    final random = Random.secure();\n    return List.generate(length, (_) => charset[random.nextInt(charset.length)]).join();\n  }\n\n  /// ترجيع قيمة SHA-256 للسلسلة (hex).\n  String sha256ofString(String input) {\n    final bytes = utf8.encode(input);\n    final digest = sha256.convert(bytes);\n    return digest.toString();\n  }\n\n  /// دالة مشتركة للتحقق من وجود سجل المستخدم في Firestore.\n  /// إذا كان السجل موجودًا يتم تحديث توكن Firebase Messaging ثم الانتقال إلى الشاشة الرئيسية.\n  /// وإلا يتم توجيه المستخدم لإكمال بياناته في شاشة InformationUser.\n  Future<void> handleUserNavigation() async {\n    final docRef = FirebaseFirestore.instance\n        .collection(FirebaseX.collectionSeller)\n        .doc(auth.currentUser!.uid);\n    final docSnapshot = await docRef.get();\n\n    if (docSnapshot.exists) {\n      final token = await FirebaseMessaging.instance.getToken();\n      await docRef.update({'fcmToken': token.toString()});\n      Get.offAll(() => SellerMainScreen());\n    } else {\n      Get.to(() => SellerTypeSelectionScreen(), \n          routeName: '/seller_type_selection');\n    }\n  }\n\n  /// دالة موحدة لمعالجة أخطاء FirebaseAuth.\n  void handleFirebaseAuthError(FirebaseAuthException e) {\n    switch (e.code) {\n      case 'account-exists-with-different-credential':\n        showError('يوجد حساب مسجل بنفس البريد الإلكتروني ولكن بمصادقة مختلفة.');\n        break;\n      case 'invalid-credential':\n        showError('الاعتماديات غير صحيحة أو منتهية الصلاحية.');\n        break;\n      case 'operation-not-allowed':\n        showError('عملية تسجيل الدخول غير مفعلة لهذا النوع من الحسابات.');\n        break;\n      case 'user-disabled':\n        showError('تم تعطيل حساب المستخدم.');\n        break;\n      case 'user-not-found':\n        showError('لم يتم العثور على مستخدم بهذا البريد.');\n        break;\n      case 'wrong-password':\n        showError('كلمة المرور المدخلة غير صحيحة.');\n        break;\n      default:\n        showError('حدث خطأ غير معروف: ${e.message}');\n    }\n  }\n\n  // -----------------------------------------------------------\n  // طرق تسجيل الدخول المختلفة\n  // -----------------------------------------------------------\n\n  /// تسجيل الدخول باستخدام Google.\n  Future<void> signInWithGoogle() async {\n    try {\n      isLoading.value = true;\n      final googleUser = await GoogleSignIn(\n        // scopes:\n        // [\n        //   'email',\n        //   'https://www.googleapis.com/auth/contacts.readonly',\n        // ]\n      ).signIn();\n      if (googleUser == null) return; // في حال إلغاء تسجيل الدخول\n\n      final googleAuth = await googleUser.authentication;\n      final credential = GoogleAuthProvider.credential(\n        accessToken: googleAuth.accessToken,\n        idToken: googleAuth.idToken,\n      );\n\n      await auth.signInWithCredential(credential);\n      await handleUserNavigation();\n    } on FirebaseAuthException catch (e) {\n      handleFirebaseAuthError(e);\n    } catch (e) {\n      showError('خطأ أثناء تسجيل الدخول بواسطة Google: $e');\n    } finally {\n      isLoading.value = false;\n    }\n  }\n\n  /// تسجيل الدخول باستخدام Facebook لنظام Android.\n  Future<UserCredential?> signInWithFacebookForAndroid() async {\n    try {\n      isLoading.value = true;\n      final result = await FacebookAuth.instance.login(permissions: ['public_profile', 'email']);\n      if (result.status == LoginStatus.success && result.accessToken != null) {\n        final credential = FacebookAuthProvider.credential(result.accessToken!.tokenString);\n        final userCredential = await auth.signInWithCredential(credential);\n        await handleUserNavigation();\n        return userCredential;\n      }\n    } on FirebaseAuthException catch (e) {\n      handleFirebaseAuthError(e);\n    } catch (e) {\n      showError('خطأ أثناء تسجيل الدخول بواسطة Facebook (Android): $e');\n    } finally {\n      isLoading.value = false;\n    }\n    return null;\n  }\n\n  /// تسجيل الدخول باستخدام Facebook لنظام iOS.\n  Future<UserCredential?> signInWithFacebookForiOS() async {\n    try {\n      isLoading.value = true;\n      final rawNonce = generateNonce();\n      final nonce = sha256ofString(rawNonce);\n\n      final loginResult = await FacebookAuth.instance.login(\n        loginTracking: LoginTracking.limited,\n        nonce: nonce,\n      );\n\n      if (loginResult.accessToken == null) {\n        throw Exception(loginResult.message);\n      }\n\n      OAuthCredential facebookCredential;\n      if (Platform.isIOS) {\n        switch (loginResult.accessToken!.type) {\n          case AccessTokenType.classic:\n            final token = loginResult.accessToken as ClassicToken;\n            facebookCredential = FacebookAuthProvider.credential(token.authenticationToken!);\n            break;\n          case AccessTokenType.limited:\n            final token = loginResult.accessToken as LimitedToken;\n            facebookCredential = OAuthCredential(\n              providerId: 'facebook.com',\n              signInMethod: 'oauth',\n              idToken: token.tokenString,\n              rawNonce: rawNonce,\n            );\n            break;\n        }\n      } else {\n        facebookCredential = FacebookAuthProvider.credential(loginResult.accessToken!.tokenString);\n      }\n\n      final userCredential = await auth.signInWithCredential(facebookCredential);\n      await handleUserNavigation();\n      return userCredential;\n    } on FirebaseAuthException catch (e) {\n      handleFirebaseAuthError(e);\n    } catch (e) {\n      showError('خطأ أثناء تسجيل الدخول بواسطة Facebook (iOS): $e');\n    } finally {\n      isLoading.value = false;\n    }\n    return null;\n  }\n\n  /// تسجيل الدخول باستخدام Apple.\n  Future<void> signInWithApple() async {\n    try {\n      isLoading.value = true;\n      final appleCred = await SignInWithApple.getAppleIDCredential(\n        scopes: [\n          AppleIDAuthorizationScopes.email,\n          AppleIDAuthorizationScopes.fullName,\n        ],\n      );\n      final oauthCred = OAuthProvider('apple.com').credential(\n        accessToken: appleCred.authorizationCode,\n        idToken: appleCred.identityToken,\n      );\n      await auth.signInWithCredential(oauthCred);\n      await handleUserNavigation();\n    } on FirebaseAuthException catch (e) {\n      handleFirebaseAuthError(e);\n    } catch (e) {\n      showError('خطأ أثناء تسجيل الدخول بواسطة Apple: $e');\n    } finally {\n      isLoading.value = false;\n    }\n  }\n\n  /// تسجيل الدخول باستخدام Yahoo.\n  Future<UserCredential?> signInWithYahoo() async {\n    final yahooProvider = YahooAuthProvider();\n    try {\n      isLoading.value = true;\n      late UserCredential userCredential;\n      if (kIsWeb) {\n        userCredential = await auth.signInWithPopup(yahooProvider);\n      } else {\n        userCredential = await auth.signInWithProvider(yahooProvider);\n      }\n      await handleUserNavigation();\n      return userCredential;\n    } on FirebaseAuthException catch (e) {\n      handleFirebaseAuthError(e);\n    } catch (e) {\n      showError('خطأ أثناء تسجيل الدخول بواسطة Yahoo: $e');\n    } finally {\n      isLoading.value = false;\n    }\n    return null;\n  }\n\n  /// تسجيل الدخول باستخدام Microsoft.\n  Future<UserCredential?> signInWithMicrosoft() async {\n    final microsoftProvider = MicrosoftAuthProvider();\n    try {\n      isLoading.value = true;\n      late UserCredential userCredential;\n      if (kIsWeb) {\n        userCredential = await auth.signInWithPopup(microsoftProvider);\n      } else {\n        userCredential = await auth.signInWithProvider(microsoftProvider);\n      }\n      await handleUserNavigation();\n      return userCredential;\n    } on FirebaseAuthException catch (e) {\n      handleFirebaseAuthError(e);\n    } catch (e) {\n      showError('خطأ أثناء تسجيل الدخول بواسطة Microsoft: $e');\n    } finally {\n      isLoading.value = false;\n    }\n    return null;\n  }\n\n  /// تسجيل الدخول بواسطة البريد الإلكتروني وكلمة المرور.\n  Future<void> signInWithEmail(GlobalKey<FormState> formKey) async {\n    if (!formKey.currentState!.validate()) return;\n    try {\n      isLoading.value = true;\n      final userCredential = await auth.signInWithEmailAndPassword(\n        email: emailController.text.trim(),\n        password: passwordController.text.trim(),\n      );\n      if (userCredential.user?.emailVerified ?? false) {\n        final docSnapshot = await FirebaseFirestore.instance\n            .collection(FirebaseX.collectionSeller)\n            .doc(auth.currentUser!.uid)\n            .get();\n        if (docSnapshot.exists) {\n          final token = await FirebaseMessaging.instance.getToken();\n          await FirebaseFirestore.instance\n              .collection(FirebaseX.collectionSeller)\n              .doc(auth.currentUser!.uid)\n              .update({'token': token.toString()});\n          Get.offAll(() => SellerMainScreen());\n        } else {\n          Get.to(() => const SellerRegistrationScreen(), binding: BindingsBuilder(() {\n            Get.lazyPut(() => SellerRegistrationController());\n          }));\n        }\n      } else {\n        await Get.dialog(AlertDialog(\n          title: Text('قم بالتحقق من الآيميل'),\n          content: Text('اذهب إلى البريد الوارد لتفعيل حسابك.'),\n          actions: [\n            IconButton(\n              icon: Icon(Icons.close),\n              onPressed: () {\n                isFirstTime = false;\n                Get.back();\n              },\n            )\n          ],\n        ));\n        return;\n      }\n    } on FirebaseAuthException catch (e) {\n      if (e.code == 'user-not-found') {\n        await Get.dialog(AlertDialog(\n          title: Text('الايميل غير صحيح'),\n          content: Text('هذا الايميل غير موجود.'),\n          actions: [\n            IconButton(\n              icon: Icon(Icons.close),\n              onPressed: () {\n                isFirstTime = false;\n                Get.back();\n              },\n            )\n          ],\n        ));\n      } else if (e.code == 'wrong-password') {\n        await Get.dialog(AlertDialog(\n          title: Text('الايميل أو الرمز السري خطأ'),\n          content: Text('حاول مرة أخرى.'),\n          actions: [\n            IconButton(\n              icon: Icon(Icons.close),\n              onPressed: () {\n                isFirstTime = false;\n                Get.back();\n              },\n            )\n          ],\n        ));\n      } else {\n        showError('خطأ أثناء تسجيل الدخول بواسطة البريد الإلكتروني: ${e.message}');\n      }\n    } catch (e) {\n      showError('خطأ غير معروف أثناء تسجيل الدخول بواسطة البريد الإلكتروني: $e');\n    } finally {\n      isLoading.value = false;\n    }\n  }\n\n\n\n\n\n  @override\n  void onInit() async{\n    // TODO: implement onInit\n    super.onInit();\n    if(isFirstTime){\n      await Get.dialog(AlertDialog(\n        title: Text('قم بالتحقق من الآيميل'),\n        content: Text('اذهب إلى البريد الوارد لتفعيل حسابك.'),\n        actions: [\n          IconButton(\n            icon: Icon(Icons.close),\n            onPressed: () {\n              isFirstTime = false;\n              Get.back();\n            },\n          )\n        ],\n      ));\n\n    }\n  }\n\n\n}\n\n\n\n\nclass SellerAuthController extends GetxController {\n  final FirebaseAuth _auth = FirebaseAuth.instance;\n\n  Rx<User?> firebaseUser = Rx<User?>(FirebaseAuth.instance.currentUser);\n\n  String? sellerType;\n  String? get sellerType1 => sellerType;\n\n\n  Future<void> selectSellerTypeAndNavigate(String type) async {\n    User? currentUser = _auth.currentUser;\n    if (currentUser == null) {\n      Get.snackbar('خطأ', 'لم يتم تسجيل دخول المستخدم. يرجى تسجيل الدخول أولاً.');\n      // يمكنك هنا إضافة انتقال إلى شاشة تسجيل الدخول إذا لزم الأمر\n      // مثال: Get.offAll(() => SellerLoginScreen());\n      return;\n    }\n\n    try {\n      // تحسين GPU قبل التنقل\n      GPUService.handlePageTransition();\n      \n      Get.dialog(\n        const Center(child: CircularProgressIndicator()),\n        barrierDismissible: false,\n      );\n\n      sellerType = type;\n\n      // تهيئة SellerRegistrationController قبل التنقل\n      if (Get.isRegistered<SellerRegistrationController>()) {\n        Get.delete<SellerRegistrationController>();\n      }\n      Get.put(SellerRegistrationController());\n\n      if (Get.isDialogOpen ?? false) {\n        Get.back(); // إغلاق الحوار\n      }\n\n      // تنظيف الصفحات والتنقل مع إعطاء اسم للصفحة\n      Get.to(() => const SellerRegistrationScreen(), \n          routeName: '/seller_registration',\n          binding: BindingsBuilder(() {\n            Get.lazyPut(() => SellerRegistrationController());\n          }));\n\n    } catch (e) {\n      if (Get.isDialogOpen ?? false) {\n        Get.back(); // إغلاق الحوار\n      }\n      Get.snackbar(\n        'خطأ في العملية',\n        'حدث خطأ أثناء حفظ نوع البائع: ${e.toString()}',\n        snackPosition: SnackPosition.BOTTOM,\n      );\n    }\n  }\n\n\n}\n\n"
        }
    ]
}