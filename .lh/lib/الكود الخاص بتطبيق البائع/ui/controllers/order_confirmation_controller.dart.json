{
    "sourceFile": "lib/الكود الخاص بتطبيق البائع/ui/controllers/order_confirmation_controller.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752751503157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752751503157,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\nimport 'package:get/get.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport '../../../Model/SellerModel.dart';\nimport '../../../XXX/xxx_firebase.dart';\nimport 'retail_cart_controller.dart';\n\nclass OrderConfirmationController extends GetxController {\n  bool isLoading = true;\n  bool isProcessing = false;\n\n  List<CartItem> cartItems = [];\n  SellerModel? storeInfo;\n  Map<String, dynamic>? buyerInfo;\n  String deliveryAddress = '';\n  Map<String, dynamic>? deliveryLocation;\n\n  double subtotal = 0.0;\n  double deliveryFee = 0.0;\n  double total = 0.0;\n\n  @override\n  void onInit() {\n    super.onInit();\n    _initializeData();\n  }\n\n  /// تهيئة البيانات\n  Future<void> _initializeData() async {\n    try {\n      // الحصول على بيانات الموقع من arguments\n      deliveryLocation = Get.arguments as Map<String, dynamic>?;\n      deliveryAddress = deliveryLocation?['address'] ?? '';\n\n      // الحصول على بيانات السلة\n      final cartController = Get.find<RetailCartController>();\n      cartItems = List.from(cartController.cartItems);\n      storeInfo = cartController.currentStore;\n\n      // حساب المبالغ\n      _calculateTotals();\n\n      // تحميل معلومات المشتري\n      await _loadBuyerInfo();\n    } catch (e) {\n      debugPrint('خطأ في تهيئة البيانات: $e');\n      Get.snackbar(\n        'خطأ',\n        'فشل في تحميل بيانات الطلب',\n        snackPosition: SnackPosition.BOTTOM,\n        backgroundColor: Colors.red.withOpacity(0.8),\n        colorText: Colors.white,\n      );\n    } finally {\n      isLoading = false;\n      update();\n    }\n  }\n\n  /// تحميل معلومات المشتري (بائع التجزئة)\n  Future<void> _loadBuyerInfo() async {\n    try {\n      final String? userId = FirebaseAuth.instance.currentUser?.uid;\n      if (userId == null) return;\n\n      final doc =\n          await FirebaseFirestore.instance\n              .collection(FirebaseX.collectionSeller)\n              .doc(userId)\n              .get();\n\n      if (doc.exists) {\n        buyerInfo = doc.data() as Map<String, dynamic>;\n      }\n    } catch (e) {\n      debugPrint('خطأ في تحميل معلومات المشتري: $e');\n    }\n  }\n\n  /// حساب المبالغ\n  void _calculateTotals() {\n    subtotal = 0.0;\n    for (final item in cartItems) {\n      subtotal += item.totalPrice;\n    }\n\n    deliveryFee = 0.0; // مجاني للآن\n    total = subtotal + deliveryFee;\n  }\n\n  /// تأكيد الطلب وحفظه\n  Future<void> confirmOrder() async {\n    if (isProcessing) return;\n\n    isProcessing = true;\n    update();\n\n    try {\n      final String? buyerId = FirebaseAuth.instance.currentUser?.uid;\n      if (buyerId == null) {\n        throw Exception('المستخدم غير مسجل');\n      }\n\n      if (storeInfo == null) {\n        throw Exception('معلومات المتجر غير متوفرة');\n      }\n\n      // إنشاء رقم طلب فريد\n      final String orderNumber = 'RO${DateTime.now().millisecondsSinceEpoch}';\n\n      // إعداد بيانات الطلب\n      final Map<String, dynamic> orderData = {\n        // معلومات أساسية\n        'numberOfOrder': orderNumber,\n        'orderType':\n            'wholesale_to_retail', // نوع الطلب: من بائع جملة إلى بائع تجزئة\n        'appName': FirebaseX.appName,\n        'timeOrder': FieldValue.serverTimestamp(),\n        'createdAt': FieldValue.serverTimestamp(),\n        'updatedAt': FieldValue.serverTimestamp(),\n\n        // معلومات المشتري (بائع التجزئة)\n        'uidUser': buyerId,\n        'buyerType': 'retailer',\n        'buyerInfo': {\n          'name': buyerInfo?['sellerName'] ?? '',\n          'phone': buyerInfo?['shopPhoneNumber'] ?? '',\n          'shopName': buyerInfo?['shopName'] ?? '',\n          'shopCategory': buyerInfo?['shopCategory'] ?? '',\n          'email': buyerInfo?['email'] ?? '',\n          'sellerType': 'retail', // تمييز نوع البائع المشتري\n        },\n\n        // معلومات البائع (متجر الجملة)\n        'uidAdd': storeInfo!.uid, // معرف البائع الذي سيستلم الطلب\n        'sellerInfo': {\n          'name': storeInfo!.sellerName,\n          'shopName': storeInfo!.shopName,\n          'phone': storeInfo!.shopPhoneNumber,\n          'shopCategory': storeInfo!.shopCategories,\n          'sellerType': 'wholesale', // تمييز نوع البائع\n        },\n\n        // معلومات التوصيل\n        'deliveryInfo': {\n          'address': deliveryAddress,\n          'location':\n              deliveryLocation != null\n                  ? GeoPoint(\n                    deliveryLocation!['latitude'],\n                    deliveryLocation!['longitude'],\n                  )\n                  : null,\n        },\n\n        // معلومات المنتجات\n        'items':\n            cartItems\n                .map(\n                  (item) => {\n                    'productId': item.productId,\n                    'productName': item.productName,\n                    'productPrice': item.productPrice,\n                    'productImage': item.productImage,\n                    'quantity': item.quantity,\n                    'totalPrice': item.totalPrice,\n                    'productData': item.productData,\n                  },\n                )\n                .toList(),\n\n        // معلومات المبالغ\n        'pricing': {\n          'subtotal': subtotal,\n          'deliveryFee': deliveryFee,\n          'total': total,\n          'currency': 'IQD',\n        },\n\n        // حالة الطلب\n        'status': {\n          'current': 'pending',\n          'RequestAccept': false,\n          'Delivery': false,\n          'isCompleted': false,\n          'isCancelled': false,\n        },\n\n        // معلومات إضافية\n        'totalItems': cartItems.fold(0, (sum, item) => sum + item.quantity),\n        'itemsCount': cartItems.length,\n      };\n\n      // حفظ الطلب في Firestore\n      final docRef = FirebaseFirestore.instance\n          .collection(FirebaseX.ordersCollection)\n          .doc(orderNumber);\n\n      await docRef.set(orderData);\n\n      // حفظ منتجات الطلب في subcollection\n      for (int i = 0; i < cartItems.length; i++) {\n        final item = cartItems[i];\n        await docRef.collection('OrderItems').doc('item_$i').set({\n          'uidItem': item.productId,\n          'number': item.quantity,\n          'price': item.productPrice,\n          'totalPrice': item.totalPrice,\n          'isOfer': false, // إذا كان منتج عرض\n          'productName': item.productName,\n          'productImage': item.productImage,\n          'orderIndex': i,\n          'addedAt': FieldValue.serverTimestamp(),\n        });\n      }\n\n      // مسح السلة\n      final cartController = Get.find<RetailCartController>();\n      cartController.clearCart();\n\n      // إظهار رسالة نجاح\n      Get.snackbar(\n        'تم بنجاح',\n        'تم إرسال طلبك بنجاح. رقم الطلب: $orderNumber',\n        snackPosition: SnackPosition.BOTTOM,\n        backgroundColor: Colors.green.withOpacity(0.8),\n        colorText: Colors.white,\n        duration: const Duration(seconds: 4),\n      );\n\n      // الانتقال لصفحة تتبع الطلبات أو الرئيسية\n      Get.offAllNamed('/seller-main');\n    } catch (e) {\n      debugPrint('خطأ في تأكيد الطلب: $e');\n      Get.snackbar(\n        'خطأ',\n        'فشل في إرسال الطلب. يرجى المحاولة مرة أخرى.',\n        snackPosition: SnackPosition.BOTTOM,\n        backgroundColor: Colors.red.withOpacity(0.8),\n        colorText: Colors.white,\n      );\n    } finally {\n      isProcessing = false;\n      update();\n    }\n  }\n}\n"
        }
    ]
}