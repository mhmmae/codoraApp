{
    "sourceFile": "lib/الكود الخاص بتطبيق البائع/ui/controllers/store_products_controller.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752413026379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752413026379,
            "name": "Commit-0",
            "content": "import 'dart:async';\nimport 'package:flutter/material.dart';\nimport 'package:get/get.dart';\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:get_storage/get_storage.dart';\nimport '../../../Model/SellerModel.dart';\nimport '../../addItem/editProducts/controllers/edit_product_controller.dart';\nimport '../../../XXX/xxx_firebase.dart';\nimport 'retail_cart_controller.dart';\nimport '../pages/product_details_page.dart';\n\nenum ProductViewType { grid, list, compact, detailed }\n\nclass StoreProductsController extends GetxController {\n  /// تحديث نطاق السعر بشكل آمن\n  void setPriceRange(RangeValues values) {\n    // تأكد أن القيم ضمن النطاق الصحيح\n    final double min = minPrice.value;\n    final double max = maxPrice.value;\n    double start = values.start.clamp(min, max);\n    double end = values.end.clamp(min, max);\n    // لا تسمح بأن يكون الحد الأدنى أكبر من الحد الأقصى\n    if (start > end) {\n      final temp = start;\n      start = end;\n      end = temp;\n    }\n    currentMinPrice.value = start;\n    currentMaxPrice.value = end;\n    priceRange.value = RangeValues(start, end);\n    _filterProducts();\n  }\n\n  final SellerModel store;\n\n  StoreProductsController({required this.store});\n\n  // تخزين محلي للمفضلة\n  final GetStorage _storage = GetStorage();\n\n  // متغيرات الحالة\n  final RxList<Map<String, dynamic>> allProducts = <Map<String, dynamic>>[].obs;\n  final RxList<Map<String, dynamic>> filteredProducts =\n      <Map<String, dynamic>>[].obs;\n  final RxBool isLoading = false.obs;\n  final RxBool isGridView = true.obs;\n  final RxString selectedCategory = 'الكل'.obs;\n  final RxList<String> categories = <String>['الكل'].obs;\n\n  // متحكمات البحث والفلاتر\n  final TextEditingController searchController = TextEditingController();\n  final FocusNode searchFocusNode = FocusNode();\n  final RxString searchQuery = ''.obs;\n  final RxString sortBy = 'الأحدث'.obs;\n  final RxBool showFilters = false.obs;\n  final RxBool showFavoritesOnly = false.obs;\n  final RxBool showDiscountedOnly = false.obs;\n  final RxDouble minRating = 0.0.obs;\n  final RxString currentSort = 'الأحدث'.obs;\n\n  // مميزات جديدة\n  final RxList<String> favoriteProducts = <String>[].obs;\n  final RxMap<String, double> productRatings = <String, double>{}.obs;\n  final RxString voiceSearchQuery = ''.obs;\n  final RxBool isVoiceSearching = false.obs;\n  final RxList<String> searchSuggestions = <String>[].obs;\n\n  // نظام المقارنة المحسن\n  final RxList<Map<String, dynamic>> compareProducts =\n      <Map<String, dynamic>>[].obs;\n  final int maxCompareItems = 3;\n\n  // فلاتر السعر\n  final RxDouble minPrice = 0.0.obs;\n  final RxDouble maxPrice =\n      4000.0.obs; // Initialize maxPrice to 1000 to match RangeSlider\n  final RxDouble currentMinPrice = 0.0.obs;\n  final RxDouble currentMaxPrice =\n      2000.0.obs; // Initialize currentMaxPrice to 1000 to match RangeSlider\n\n  // New properties for product view and filters\n  final Rx<ProductViewType> productViewType = ProductViewType.grid.obs;\n  final Rx<RangeValues> priceRange = const RangeValues(0, 1000).obs;\n\n  // فلاتر جديدة\n  final RxString selectedCountry = 'كل الدول'.obs;\n  // استخدم قائمة الدول الموحدة من EditProductController\n  final List<String> countryOptions =\n      [\n        'كل الدول',\n        ...EditProductController.countryOfOriginOptions.entries\n            .map((e) => e.value['ar']!)\n            .toSet(),\n      ].toList();\n  final RxString selectedQuality = 'الكل'.obs;\n  final List<String> qualityOptions =\n      ['الكل', 'ممتاز', 'جيد جداً', 'جيد', 'مقبول'].obs;\n  final RxString selectedProductType = 'الكل'.obs;\n  final List<String> productTypeOptions = ['الكل', 'تجاري', 'أصلي'].obs;\n  final RxBool filterOnOffer = false.obs;\n\n  // تتبع المنتجات في السلة\n  final RxInt totalProductsInCart = 0.obs;\n\n  // متغير لمنع الضغط المتكرر على أزرار السلة (يمنع التجميد بسبب الضغط السريع)\n  final RxBool isProcessingCart = false.obs;\n\n  @override\n  void onInit() {\n    super.onInit();\n    loadProducts();\n    _updateCartCount();\n    _loadFavoritesFromStorage(); // تحميل المفضلة من التخزين المحلي\n    _loadCompareList(); // تحميل قائمة المقارنة من التخزين المحلي\n\n    // مراقبة تغييرات البحث\n    searchController.addListener(() {\n      searchQuery.value = searchController.text;\n      _filterProducts();\n    });\n\n    // مراقبة تغييرات الفلاتر\n    ever(selectedCategory, (_) => _filterProducts());\n    ever(sortBy, (_) => _filterProducts());\n    ever(currentMinPrice, (_) => _filterProducts());\n    ever(currentMaxPrice, (_) => _filterProducts());\n    ever(showFavoritesOnly, (_) => _filterProducts());\n    ever(showDiscountedOnly, (_) => _filterProducts());\n    ever(minRating, (_) => _filterProducts());\n    ever(selectedCountry, (_) => _filterProducts());\n    ever(selectedQuality, (_) => _filterProducts());\n    ever(selectedProductType, (_) => _filterProducts());\n\n    // تحديث عدد المنتجات في السلة كل ثانية\n    Timer.periodic(Duration(seconds: 1), (_) => _updateCartCount());\n  }\n\n  @override\n  void onClose() {\n    searchController.dispose();\n    searchFocusNode.dispose();\n    super.onClose();\n  }\n\n  /// تحميل منتجات المتجر\n  Future<void> loadProducts() async {\n    try {\n      isLoading.value = true;\n      debugPrint('🔄 بدء تحميل منتجات المتجر: ${store.shopName}');\n      debugPrint('🔍 البحث عن منتجات البائع UID: ${store.uid}');\n      debugPrint('🗂️ البحث في مجموعة: ${FirebaseX.itemsCollection}');\n      debugPrint(\n        '🏪 معلومات المتجر: اسم=${store.shopName}, نوع=${store.sellerType}, ID=${store.uid}',\n      );\n\n      final QuerySnapshot snapshot =\n          await FirebaseFirestore.instance\n              .collection(FirebaseX.itemsCollection)\n              .where('uidAdd', isEqualTo: store.uid)\n              .where('addedBySellerType', isEqualTo: 'wholesale')\n              .get();\n\n      final List<Map<String, dynamic>> products = [];\n      final Set<String> categorySet = {'الكل'};\n\n      debugPrint('📊 تم العثور على ${snapshot.docs.length} مستند');\n\n      // إذا لم نجد منتجات، جرب بدون فلتر نوع البائع\n      if (snapshot.docs.isEmpty) {\n        debugPrint(\n          '⚠️ لا توجد منتجات مع فلتر نوع البائع، المحاولة بدون فلتر...',\n        );\n        final fallbackSnapshot =\n            await FirebaseFirestore.instance\n                .collection(FirebaseX.itemsCollection)\n                .where('uidAdd', isEqualTo: store.uid)\n                .get();\n        debugPrint(\n          '📊 الاستعلام الاحتياطي وجد ${fallbackSnapshot.docs.length} مستند',\n        );\n\n        for (var doc in fallbackSnapshot.docs) {\n          final data = doc.data();\n          data['id'] = doc.id;\n\n          debugPrint(\n            '📝 منتج احتياطي: ${data['nameOfItem']} - UID: ${data['uidAdd']} - نوع البائع: ${data['addedBySellerType']}',\n          );\n\n          products.add(data);\n\n          // إضافة الفئة إلى قائمة الفئات\n          final category = data['selectedMainCategoryNameAr'] as String?;\n          if (category != null && category.isNotEmpty) {\n            categorySet.add(category);\n          }\n        }\n      } else {\n        for (var doc in snapshot.docs) {\n          final data = doc.data() as Map<String, dynamic>;\n          data['id'] = doc.id;\n\n          debugPrint(\n            '📝 منتج: ${data['nameOfItem']} - UID: ${data['uidAdd']} - نوع البائع: ${data['addedBySellerType']}',\n          );\n\n          products.add(data);\n\n          // إضافة الفئة إلى قائمة الفئات\n          final category = data['selectedMainCategoryNameAr'] as String?;\n          if (category != null && category.isNotEmpty) {\n            categorySet.add(category);\n          }\n        }\n      }\n\n      debugPrint('📦 إجمالي المنتجات المعالجة: ${products.length}');\n      debugPrint('🏷️ الفئات الموجودة: ${categorySet.join(', ')}');\n\n      allProducts.value = products;\n      categories.value = categorySet.toList();\n\n      // تحديد نطاق الأسعار\n      if (products.isNotEmpty) {\n        final prices =\n            products\n                .map(\n                  (p) =>\n                      double.tryParse(p['priceOfItem']?.toString() ?? '0') ??\n                      0.0,\n                )\n                .where((price) => price > 0)\n                .toList();\n\n        if (prices.isNotEmpty) {\n          minPrice.value = 0.0;\n          maxPrice.value = prices.reduce((a, b) => a > b ? a : b);\n\n          // اضبط currentMinPrice وcurrentMaxPrice وpriceRange حسب النطاق الجديد\n          currentMinPrice.value = minPrice.value;\n          currentMaxPrice.value = maxPrice.value;\n          priceRange.value = RangeValues(minPrice.value, maxPrice.value);\n        }\n      }\n\n      _filterProducts();\n\n      debugPrint(\n        '✅ تم تحميل ${products.length} منتج من متجر ${store.shopName}',\n      );\n      debugPrint('📊 الفئات المتاحة: ${categories.join(', ')}');\n    } catch (e) {\n      debugPrint('❌ خطأ في تحميل منتجات المتجر: $e');\n      Get.snackbar(\n        'خطأ',\n        'فشل في تحميل المنتجات',\n        snackPosition: SnackPosition.BOTTOM,\n        backgroundColor: Colors.red.withOpacity(0.8),\n        colorText: Colors.white,\n      );\n    } finally {\n      isLoading.value = false;\n    }\n  }\n\n  /// تصفية المنتجات\n  void _filterProducts() {\n    // منطق AND: المنتج يجب أن يحقق كل الفلاتر النشطة ليظهر\n    List<Map<String, dynamic>> filtered =\n        allProducts.where((product) {\n          // فلتر البحث\n          if (searchQuery.value.isNotEmpty) {\n            final name = product['nameOfItem']?.toString().toLowerCase() ?? '';\n            final description =\n                product['descriptionOfItem']?.toString().toLowerCase() ?? '';\n            final query = searchQuery.value.toLowerCase();\n            if (!(name.contains(query) || description.contains(query))) {\n              return false;\n            }\n          }\n          // فلتر الفئة (يعرض كل منتج ينتمي لهذا القسم الرئيسي)\n          if (selectedCategory.value != 'الكل') {\n            final String? mainCategoryId =\n                product['mainCategoryId']?.toString();\n            debugPrint(\n              'فلتر القسم الرئيسي: selectedCategory=${selectedCategory.value} | mainCategoryId=$mainCategoryId | اسم المنتج=${product['nameOfItem']}',\n            );\n            if (mainCategoryId == null || mainCategoryId.isEmpty) {\n              debugPrint('❌ المنتج لا يحتوي على mainCategoryId');\n              return false;\n            }\n            if (mainCategoryId != selectedCategory.value) {\n              debugPrint('❌ mainCategoryId لا يطابق القسم المختار');\n              return false;\n            }\n            debugPrint('✅ المنتج يطابق القسم الرئيسي');\n          }\n          // فلتر الدولة (دعم الاسم أو الكود)\n          if (selectedCountry.value != 'كل الدول') {\n            String? filterCountryCode;\n            // إذا كانت القيمة كود دولة (حرفين)\n            if (EditProductController.countryOfOriginOptions.containsKey(\n              selectedCountry.value,\n            )) {\n              filterCountryCode = selectedCountry.value;\n            } else {\n              // ابحث عن الكود من الاسم العربي\n              final match = EditProductController.countryOfOriginOptions.entries\n                  .firstWhere(\n                    (e) => e.value['ar'] == selectedCountry.value,\n                    orElse: () => const MapEntry('', {'ar': '', 'en': ''}),\n                  );\n              filterCountryCode = match.key.isNotEmpty ? match.key : null;\n            }\n            final productCountryCode =\n                product['countryOfOrigin']?.toString() ?? '';\n            if (filterCountryCode == null) return false;\n            if (productCountryCode != filterCountryCode) return false;\n          }\n          // فلتر السعر\n          final price =\n              double.tryParse(product['priceOfItem']?.toString() ?? '0') ?? 0.0;\n          if (price < currentMinPrice.value || price > currentMaxPrice.value) {\n            return false;\n          }\n          // فلتر الجودة\n          if (selectedQuality.value != 'الكل') {\n            if ((product['qualityGrade']?.toString() ?? '') !=\n                selectedQuality.value) {\n              return false;\n            }\n          }\n          // فلتر نوع المنتج (تحويل من العربي إلى الكود)\n          if (selectedProductType.value != 'الكل') {\n            String? typeKey;\n            if (selectedProductType.value == 'أصلي') {\n              typeKey = 'original';\n            } else if (selectedProductType.value == 'تجاري') {\n              typeKey = 'commercial';\n            } else {\n              typeKey = selectedProductType.value;\n            }\n            if ((product['itemCondition']?.toString() ?? '') != typeKey) {\n              return false;\n            }\n          }\n          return true;\n        }).toList();\n\n    // فقط الترتيب\n    _sortProducts(filtered);\n\n    filteredProducts.value = filtered;\n    debugPrint('عدد المنتجات بعد منطق AND للفلاتر: ${filtered.length}');\n  }\n\n  /// ترتيب المنتجات\n  void _sortProducts(List<Map<String, dynamic>> products) {\n    switch (sortBy.value) {\n      case 'الأحدث':\n        products.sort((a, b) {\n          final aTime =\n              a['createdAt'] as Timestamp? ?? a['timestamp'] as Timestamp?;\n          final bTime =\n              b['createdAt'] as Timestamp? ?? b['timestamp'] as Timestamp?;\n          if (aTime == null || bTime == null) return 0;\n          return bTime.compareTo(aTime);\n        });\n        break;\n      case 'الأقدم':\n        products.sort((a, b) {\n          final aTime =\n              a['createdAt'] as Timestamp? ?? a['timestamp'] as Timestamp?;\n          final bTime =\n              b['createdAt'] as Timestamp? ?? b['timestamp'] as Timestamp?;\n          if (aTime == null || bTime == null) return 0;\n          return aTime.compareTo(bTime);\n        });\n        break;\n      case 'السعر: من الأقل للأعلى':\n        products.sort((a, b) {\n          final aPrice =\n              double.tryParse(a['priceOfItem']?.toString() ?? '0') ?? 0.0;\n          final bPrice =\n              double.tryParse(b['priceOfItem']?.toString() ?? '0') ?? 0.0;\n          return aPrice.compareTo(bPrice);\n        });\n        break;\n      case 'السعر: من الأعلى للأقل':\n        products.sort((a, b) {\n          final aPrice =\n              double.tryParse(a['priceOfItem']?.toString() ?? '0') ?? 0.0;\n          final bPrice =\n              double.tryParse(b['priceOfItem']?.toString() ?? '0') ?? 0.0;\n          return bPrice.compareTo(aPrice);\n        });\n        break;\n      case 'الاسم: أ-ي':\n        products.sort((a, b) {\n          final aName = a['nameOfItem']?.toString() ?? '';\n          final bName = b['nameOfItem']?.toString() ?? '';\n          return aName.compareTo(bName);\n        });\n        break;\n      case 'الاسم: ي-أ':\n        products.sort((a, b) {\n          final aName = a['nameOfItem']?.toString() ?? '';\n          final bName = b['nameOfItem']?.toString() ?? '';\n          return bName.compareTo(aName);\n        });\n        break;\n    }\n  }\n\n  /// تبديل عرض الفلاتر\n  void toggleFilters() {\n    showFilters.value = !showFilters.value;\n  }\n\n  /// مسح الفلاتر\n  void clearFilters() {\n    searchController.clear();\n    selectedCategory.value = 'الكل';\n    currentMinPrice.value = minPrice.value;\n    currentMaxPrice.value = maxPrice.value;\n    sortBy.value = 'الأحدث';\n    showFavoritesOnly.value = false;\n    showDiscountedOnly.value = false;\n    minRating.value = 0.0;\n    selectedCountry.value = 'كل الدول';\n    selectedQuality.value = 'الكل';\n    selectedProductType.value = 'الكل';\n    showFilters.value = false;\n  }\n\n  /// التحديث\n  @override\n  Future<void> refresh() async {\n    await loadProducts();\n  }\n\n  /// التحقق من وجود فلاتر نشطة\n  bool get hasFilters {\n    return searchQuery.value.isNotEmpty ||\n        selectedCategory.value != 'الكل' ||\n        currentMinPrice.value != minPrice.value ||\n        currentMaxPrice.value != maxPrice.value ||\n        sortBy.value != 'الأحدث' ||\n        showFavoritesOnly.value ||\n        showDiscountedOnly.value ||\n        minRating.value > 0.0 ||\n        selectedCountry.value != 'كل الدول' ||\n        selectedQuality.value != 'الكل' ||\n        selectedProductType.value != 'الكل';\n  }\n\n  /// عرض تفاصيل المنتج\n  void showProductDetails(Map<String, dynamic> product) {\n    Get.to(\n      () => const ProductDetailsPage(),\n      arguments: {'product': product, 'store': store},\n      transition: Transition.rightToLeft,\n      duration: const Duration(milliseconds: 300),\n    );\n  }\n\n  /// تحديث عدد المنتجات في السلة\n  void _updateCartCount() {\n    try {\n      final cartController = Get.find<RetailCartController>();\n      totalProductsInCart.value = cartController.itemCount;\n    } catch (e) {\n      totalProductsInCart.value = 0;\n    }\n  }\n\n  /// إضافة منتج إلى السلة\n  void addToCart(Map<String, dynamic> product) {\n    if (isProcessingCart.value) return;\n\n    try {\n      isProcessingCart.value = true;\n      final cartController = Get.find<RetailCartController>();\n      cartController.addToCart(product, store);\n\n      // تحديث عداد السلة فقط دون إعادة بناء الصفحة بالكامل\n      _updateCartCount();\n    } catch (e) {\n      // إذا لم يكن Controller مسجل، قم بتسجيله\n      Get.put(RetailCartController());\n      final cartController = Get.find<RetailCartController>();\n      cartController.addToCart(product, store);\n      _updateCartCount();\n    } finally {\n      isProcessingCart.value = false;\n    }\n  }\n\n  /// التحكم في حالة معالجة السلة\n  void setProcessingCart(bool processing) {\n    isProcessingCart.value = processing;\n  }\n\n  /// التحقق من حالة معالجة السلة\n  bool get isCartProcessing => isProcessingCart.value;\n\n  // ===========================================\n  // 🎯 نظام التقييمات والمراجعات\n  // ===========================================\n\n  void rateProduct(String productId, double rating) {\n    productRatings[productId] = rating;\n    // هنا يمكن إرسال التقييم إلى Firebase\n    update(['rating_$productId']);\n  }\n\n  double getProductRating(String productId) {\n    return productRatings[productId] ??\n        (3.5 + (productId.hashCode % 20) / 10); // تقييم واقعي متنوع\n  }\n\n  int getReviewsCount(String productId) {\n    return 15 + (productId.hashCode % 85); // عدد مراجعات واقعي\n  }\n\n  // ===========================================\n  // 🎯 نظام المفضلة المتقدم\n  // ===========================================\n\n  /// إضافة منتج لقائمة المفضلة\n  void toggleFavorite(String productId) {\n    if (isFavorite(productId)) {\n      removeFromFavorites(productId);\n    } else {\n      addToFavorites(productId);\n    }\n  }\n\n  bool isFavorite(String productId) {\n    return favoriteProducts.contains(productId);\n  }\n\n  void addToFavorites(String productId) {\n    if (!favoriteProducts.contains(productId)) {\n      favoriteProducts.add(productId);\n      _saveFavoritesToStorage(); // حفظ التغييرات محلياً\n    }\n    update(['favorites_$productId']); // تحديث محدود للمفضلة فقط\n  }\n\n  void removeFromFavorites(String productId) {\n    favoriteProducts.remove(productId);\n    _saveFavoritesToStorage(); // حفظ التغييرات محلياً\n    update(['favorites_$productId']); // تحديث محدود للمفضلة فقط\n  }\n\n  void clearAllFavorites() {\n    favoriteProducts.clear();\n    _saveFavoritesToStorage(); // حفظ التغييرات محلياً\n    update();\n  }\n\n  int get favoritesCount => favoriteProducts.length;\n\n  // ===========================================\n  // 💾 نظام حفظ المفضلة محلياً باستخدام GetStorage\n  // ===========================================\n\n  /// تحميل المفضلة من التخزين المحلي\n  void _loadFavoritesFromStorage() {\n    try {\n      final favoritesKey = 'favorites_${store.uid}'; // مفتاح خاص لكل متجر\n      final favoritesList = _storage.read<List<dynamic>>(favoritesKey);\n\n      if (favoritesList != null) {\n        favoriteProducts.value = favoritesList.cast<String>();\n        debugPrint(\n          '✅ تم تحميل ${favoriteProducts.length} منتج مفضل من التخزين المحلي',\n        );\n      } else {\n        debugPrint('📝 لا توجد مفضلة محفوظة مسبقاً');\n      }\n    } catch (e) {\n      debugPrint('❌ خطأ في تحميل المفضلة من التخزين المحلي: $e');\n    }\n    update();\n  }\n\n  /// حفظ المفضلة في التخزين المحلي\n  void _saveFavoritesToStorage() {\n    try {\n      final favoritesKey = 'favorites_${store.uid}'; // مفتاح خاص لكل متجر\n      _storage.write(favoritesKey, favoriteProducts.toList());\n      debugPrint(\n        '✅ تم حفظ ${favoriteProducts.length} منتج مفضل في التخزين المحلي',\n      );\n    } catch (e) {\n      debugPrint('❌ خطأ في حفظ المفضلة في التخزين المحلي: $e');\n    }\n  }\n\n  // ===========================================\n  // 🎯 البحث الصوتي والاقتراحات\n  // ===========================================\n\n  void startVoiceSearch() {\n    isVoiceSearching.value = true;\n\n    // محاكاة البحث الصوتي\n    Future.delayed(Duration(seconds: 3), () {\n      isVoiceSearching.value = false;\n      // استخدام اسم منتج عشوائي من المنتجات المتاحة\n      if (allProducts.isNotEmpty) {\n        final randomProduct = allProducts[allProducts.length ~/ 2];\n        voiceSearchQuery.value = randomProduct['nameOfItem'] ?? '';\n        searchController.text = voiceSearchQuery.value;\n        searchProducts();\n      }\n    });\n  }\n\n  void searchProducts() {\n    generateSearchSuggestions();\n    _filterProducts();\n  }\n\n  void generateSearchSuggestions() {\n    if (searchController.text.isNotEmpty) {\n      searchSuggestions.clear();\n      Set<String> uniqueSuggestions = {};\n\n      for (var product in allProducts) {\n        String name = product['nameOfItem']?.toString() ?? '';\n        String category =\n            product['selectedMainCategoryNameAr']?.toString() ?? '';\n\n        if (name.toLowerCase().contains(searchController.text.toLowerCase())) {\n          uniqueSuggestions.add(name);\n        }\n        if (category.toLowerCase().contains(\n          searchController.text.toLowerCase(),\n        )) {\n          uniqueSuggestions.add(category);\n        }\n      }\n\n      searchSuggestions.value = uniqueSuggestions.take(5).toList();\n    } else {\n      searchSuggestions.clear();\n    }\n    update();\n  }\n\n  void selectSuggestion(String suggestion) {\n    searchController.text = suggestion;\n    searchQuery.value = suggestion;\n    searchSuggestions.clear();\n    _filterProducts();\n  }\n\n  // ===========================================\n  // 🎯 فلاتر متقدمة\n  // ===========================================\n\n  /// تبديل فلتر المفضلة\n  void toggleFavoritesFilter() {\n    showFavoritesOnly.value = !showFavoritesOnly.value;\n  }\n\n  /// تبديل فلتر الخصومات\n  void toggleDiscountFilter() {\n    showDiscountedOnly.value = !showDiscountedOnly.value;\n  }\n\n  /// تحديث نطاق السعر\n  void updatePriceRange(double min, double max) {\n    currentMinPrice.value = min;\n    currentMaxPrice.value = max;\n  }\n\n  /// تعيين الحد الأدنى للتقييم\n  void setMinRating(double rating) {\n    minRating.value = rating;\n  }\n\n  /// فلترة المنتجات حسب الفئة\n  void filterByCategory(String category) {\n    selectedCategory.value = category;\n  }\n\n  /// ترتيب المنتجات\n  void sortProducts(String sortType) {\n    sortBy.value = sortType;\n    _sortProducts(filteredProducts);\n  }\n\n  /// تطبيق الفلاتر\n  void applyFilters() {\n    _filterProducts();\n  }\n\n  /// مسح جميع الفلاتر\n  void clearAllFilters() {\n    searchController.clear();\n    selectedCategory.value = '';\n    currentMinPrice.value = minPrice.value;\n    currentMaxPrice.value = maxPrice.value;\n    sortBy.value = 'الأحدث';\n    showFavoritesOnly.value = false;\n    showDiscountedOnly.value = false;\n    minRating.value = 0.0;\n    showFilters.value = false;\n  }\n\n  /// التحقق من وجود فلاتر نشطة\n  bool hasActiveFilters() {\n    return searchController.text.isNotEmpty ||\n        selectedCategory.value.isNotEmpty ||\n        currentMinPrice.value != minPrice.value ||\n        currentMaxPrice.value != maxPrice.value ||\n        sortBy.value != 'الأحدث' ||\n        showFavoritesOnly.value ||\n        showDiscountedOnly.value ||\n        minRating.value > 0.0;\n  }\n\n  /// الحصول على متوسط السعر\n  double getAveragePrice() {\n    if (filteredProducts.isEmpty) return 0.0;\n    double total = 0.0;\n    for (var product in filteredProducts) {\n      final price =\n          double.tryParse(product['priceOfItem']?.toString() ?? '0') ?? 0.0;\n      total += price;\n    }\n    return total / filteredProducts.length;\n  }\n\n  /// الحصول على إجمالي قيمة المخزون\n  double getTotalInventoryValue() {\n    double total = 0.0;\n    for (var product in filteredProducts) {\n      final price =\n          double.tryParse(product['priceOfItem']?.toString() ?? '0') ?? 0.0;\n      final quantity =\n          int.tryParse(product['quantity']?.toString() ?? '1') ?? 1;\n      total += price * quantity;\n    }\n    return total;\n  }\n\n  /// الحصول على الربح المتوقع\n  double getExpectedProfit() {\n    double profit = 0.0;\n    for (var product in filteredProducts) {\n      final price =\n          double.tryParse(product['priceOfItem']?.toString() ?? '0') ?? 0.0;\n      final cost =\n          double.tryParse(product['cost']?.toString() ?? '0') ?? price * 0.7;\n      final quantity =\n          int.tryParse(product['quantity']?.toString() ?? '1') ?? 1;\n      profit += (price - cost) * quantity;\n    }\n    return profit;\n  }\n\n  /// الحصول على نسبة الخصم\n  double getDiscountPercentage(double originalPrice) {\n    final discountedPrice = getDiscountedPrice(originalPrice);\n    if (discountedPrice >= originalPrice) return 0.0;\n    return ((originalPrice - discountedPrice) / originalPrice) * 100;\n  }\n\n  /// الحصول على الكوبونات الصالحة\n  List<Map<String, dynamic>> getValidCoupons() {\n    return [\n      {\n        'code': 'SAVE10',\n        'discount': 10.0,\n        'type': 'percentage',\n        'description': 'خصم 10% على جميع المنتجات',\n        'minAmount': 50.0,\n      },\n      {\n        'code': 'FLAT20',\n        'discount': 20.0,\n        'type': 'fixed',\n        'description': 'خصم 20 ريال على الطلبات',\n        'minAmount': 100.0,\n      },\n      {\n        'code': 'WELCOME15',\n        'discount': 15.0,\n        'type': 'percentage',\n        'description': 'خصم ترحيبي 15%',\n        'minAmount': 75.0,\n      },\n    ];\n  }\n\n  // ===========================================\n  // 🎯 مقارنة المنتجات المحسنة\n  // ===========================================\n\n  void addToCompare(Map<String, dynamic> product) {\n    if (compareProducts.length < maxCompareItems &&\n        !isInCompare(product['id'] ?? '')) {\n      compareProducts.add(product);\n      _saveCompareList(); // حفظ قائمة المقارنة\n      update(['compare', 'compare_${product['id']}']); // تحديث UI المخصص\n    }\n  }\n\n  void removeFromCompare(Map<String, dynamic> product) {\n    compareProducts.removeWhere((p) => p['id'] == product['id']);\n    _saveCompareList(); // حفظ قائمة المقارنة\n    update(['compare', 'compare_${product['id']}']); // تحديث UI المخصص\n  }\n\n  bool isInCompare(String productId) {\n    return compareProducts.any((p) => p['id'] == productId);\n  }\n\n  /// مسح جميع منتجات المقارنة\n  void clearCompare() {\n    compareProducts.clear();\n    _saveCompareList(); // حفظ القائمة الفارغة\n    update(['compare']);\n  }\n\n  /// حفظ قائمة المقارنة في التخزين المحلي\n  void _saveCompareList() {\n    try {\n      final List<Map<String, dynamic>> compareData =\n          compareProducts.map((product) {\n            return {\n              'id': product['id'],\n              'nameOfItem': product['nameOfItem'],\n              'priceOfItem': product['priceOfItem'],\n              'url': product['url'],\n              'manyImages': product['manyImages'],\n              'storeId': store.uid, // حفظ معرف المتجر\n            };\n          }).toList();\n\n      _storage.write('compare_products_${store.uid}', compareData);\n      debugPrint('✅ تم حفظ ${compareProducts.length} منتج في قائمة المقارنة');\n    } catch (e) {\n      debugPrint('❌ خطأ في حفظ قائمة المقارنة: $e');\n    }\n  }\n\n  /// تحميل قائمة المقارنة من التخزين المحلي\n  void _loadCompareList() {\n    try {\n      final List<dynamic>? savedCompare = _storage.read(\n        'compare_products_${store.uid}',\n      );\n      if (savedCompare != null && savedCompare.isNotEmpty) {\n        compareProducts.clear();\n        for (var item in savedCompare) {\n          if (item is Map<String, dynamic>) {\n            compareProducts.add(Map<String, dynamic>.from(item));\n          }\n        }\n        debugPrint(\n          '✅ تم تحميل ${compareProducts.length} منتج من قائمة المقارنة المحفوظة',\n        );\n        update(['compare']); // تحديث UI\n      }\n    } catch (e) {\n      debugPrint('❌ خطأ في تحميل قائمة المقارنة: $e');\n    }\n  }\n\n  void showComparisonDialog() {\n    if (compareProducts.isEmpty) {\n      Get.snackbar(\n        'تنبيه',\n        'لا توجد منتجات للمقارنة',\n        backgroundColor: Colors.orange,\n        colorText: Colors.white,\n      );\n      return;\n    }\n\n    Get.dialog(\n      AlertDialog(\n        title: Text('مقارنة المنتجات (${compareProducts.length})'),\n        content: SizedBox(\n          width: double.maxFinite,\n          height: 400,\n          child: SingleChildScrollView(\n            child: Column(\n              children:\n                  compareProducts.map((product) {\n                    final price =\n                        double.tryParse(\n                          product['priceOfItem']?.toString() ?? '0',\n                        ) ??\n                        0.0;\n                    final rating = getProductRating(product['id'] ?? '');\n                    return Card(\n                      margin: EdgeInsets.symmetric(vertical: 8),\n                      child: ListTile(\n                        title: Text(product['nameOfItem'] ?? 'غير محدد'),\n                        subtitle: Column(\n                          crossAxisAlignment: CrossAxisAlignment.start,\n                          children: [\n                            Text('السعر: ${price.toInt()} ريال'),\n                            Text('التقييم: ${rating.toStringAsFixed(1)} ⭐'),\n                          ],\n                        ),\n                        trailing: IconButton(\n                          icon: Icon(Icons.remove_circle, color: Colors.red),\n                          onPressed: () => removeFromCompare(product),\n                        ),\n                      ),\n                    );\n                  }).toList(),\n            ),\n          ),\n        ),\n        actions: [\n          TextButton(\n            onPressed: () => clearCompare(),\n            child: Text('مسح الكل', style: TextStyle(color: Colors.red)),\n          ),\n          TextButton(onPressed: () => Get.back(), child: Text('إغلاق')),\n        ],\n      ),\n    );\n  }\n\n  // ===========================================\n  // 🎯 نظام الكوبونات والخصومات\n  // ===========================================\n\n  final RxString appliedCoupon = ''.obs;\n  final RxDouble couponDiscount = 0.0.obs;\n  final RxDouble quickRatingValue = 3.0.obs;\n\n  void applyCoupon(String couponCode) {\n    Map<String, double> validCoupons = {\n      'welcome10': 0.10,\n      'save20': 0.20,\n      'summer15': 0.15,\n      'newuser': 0.25,\n      'loyal5': 0.05,\n    };\n\n    String code = couponCode.toLowerCase().trim();\n    if (validCoupons.containsKey(code)) {\n      appliedCoupon.value = couponCode.toUpperCase();\n      couponDiscount.value = validCoupons[code]!;\n    }\n    update(['coupon']);\n  }\n\n  void removeCoupon() {\n    appliedCoupon.value = '';\n    couponDiscount.value = 0.0;\n    update(['coupon']);\n  }\n\n  void setQuickRatingValue(double value) => quickRatingValue.value = value;\n\n  double getDiscountedPrice(double originalPrice) {\n    if (couponDiscount.value > 0) {\n      return originalPrice * (1 - couponDiscount.value);\n    }\n    return originalPrice;\n  }\n\n  // ===========================================\n  // 🎯 إحصائيات وتحليلات\n  // ===========================================\n\n  Map<String, int> get categoryStats {\n    Map<String, int> stats = {};\n    for (var product in allProducts) {\n      String category = product['selectedMainCategoryNameAr'] ?? 'غير محدد';\n      stats[category] = (stats[category] ?? 0) + 1;\n    }\n    return stats;\n  }\n\n  String get mostPopularCategory {\n    var stats = categoryStats;\n    if (stats.isEmpty) return 'لا توجد فئات';\n    return stats.entries.reduce((a, b) => a.value > b.value ? a : b).key;\n  }\n\n  double get averagePrice {\n    if (allProducts.isEmpty) return 0.0;\n    double total = allProducts.fold(0.0, (sum, product) {\n      return sum +\n          (double.tryParse(product['priceOfItem']?.toString() ?? '0') ?? 0.0);\n    });\n    return total / allProducts.length;\n  }\n\n  /// حساب إجمالي قيمة المخزون\n  double get totalInventoryValue {\n    return allProducts.fold(0.0, (sum, product) {\n      final price =\n          double.tryParse(product['priceOfItem']?.toString() ?? '0') ?? 0.0;\n      return sum + price;\n    });\n  }\n\n  /// حساب إجمالي تكلفة المخزون\n  double get totalInventoryCost {\n    return allProducts.fold(0.0, (sum, product) {\n      final cost =\n          double.tryParse(product['costPrice']?.toString() ?? '0') ?? 0.0;\n      return sum + cost;\n    });\n  }\n\n  /// حساب الربح المتوقع\n  double get expectedProfit {\n    return totalInventoryValue - totalInventoryCost;\n  }\n\n  /// حساب هامش الربح\n  double get profitMargin {\n    return totalInventoryValue > 0\n        ? (expectedProfit / totalInventoryValue) * 100\n        : 0.0;\n  }\n\n  /// مشاركة منتج\n  void shareProduct(Map<String, dynamic> product) {\n    String productName = product['nameOfItem'] ?? 'منتج رائع';\n    String price = product['priceOfItem']?.toString() ?? '0';\n    String storeName = store.shopName;\n\n    String shareText =\n        '''\n🛍️ منتج رائع من $storeName\n\n📦 $productName\n💰 $price جنيه\n⭐ ${getProductRating(product['id'] ?? '').toStringAsFixed(1)} من 5\n👥 ${getReviewsCount(product['id'] ?? '')} تقييم\n\n#منتجات_عالية_الجودة #تسوق_آمن #$storeName\n    '''.trim();\n\n    Get.bottomSheet(\n      Container(\n        padding: EdgeInsets.all(20),\n        decoration: BoxDecoration(\n          color: Colors.white,\n          borderRadius: BorderRadius.vertical(top: Radius.circular(20)),\n        ),\n        child: Column(\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            Text(\n              'مشاركة المنتج',\n              style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),\n            ),\n            SizedBox(height: 15),\n            Container(\n              padding: EdgeInsets.all(15),\n              decoration: BoxDecoration(\n                color: Colors.grey[100],\n                borderRadius: BorderRadius.circular(10),\n              ),\n              child: Text(shareText, style: TextStyle(fontSize: 14)),\n            ),\n            SizedBox(height: 20),\n            Row(\n              mainAxisAlignment: MainAxisAlignment.spaceEvenly,\n              children: [\n                _buildShareButton('واتساب', Icons.message, Colors.green),\n                _buildShareButton('فيسبوك', Icons.facebook, Colors.blue),\n                _buildShareButton(\n                  'تويتر',\n                  Icons.alternate_email,\n                  Colors.lightBlue,\n                ),\n                _buildShareButton('نسخ', Icons.copy, Colors.grey),\n              ],\n            ),\n          ],\n        ),\n      ),\n      backgroundColor: Colors.transparent,\n    );\n  }\n\n  Widget _buildShareButton(String name, IconData icon, Color color) {\n    return GestureDetector(\n      onTap: () {\n        Get.back();\n        Get.snackbar(\n          'تم النسخ',\n          'تم نسخ رابط المنتج للمشاركة على $name',\n          backgroundColor: color.withOpacity(0.9),\n          colorText: Colors.white,\n        );\n      },\n      child: Column(\n        children: [\n          Container(\n            padding: EdgeInsets.all(12),\n            decoration: BoxDecoration(\n              color: color.withOpacity(0.1),\n              borderRadius: BorderRadius.circular(12),\n            ),\n            child: Icon(icon, color: color, size: 24),\n          ),\n          SizedBox(height: 5),\n          Text(name, style: TextStyle(fontSize: 12)),\n        ],\n      ),\n    );\n  }\n\n  /// الانتقال إلى صفحة السلة\n  void goToCart() {\n    Get.toNamed('/retail-cart');\n  }\n\n  /// تبديل العرض بين الشبكة والقائمة\n  void toggleView() {\n    isGridView.value = !isGridView.value;\n  }\n\n  // New methods for product view and filters\n  void changeViewType(ProductViewType type) {\n    productViewType.value = type;\n  }\n\n  void requestStockNotification(Map<String, dynamic> product) {\n    Get.snackbar(\n      'طلب إشعار توفر',\n      'سيتم إعلامك عند توفر ${product['nameOfItem']}',\n      snackPosition: SnackPosition.BOTTOM,\n      backgroundColor: Colors.blueAccent,\n      colorText: Colors.white,\n    );\n  }\n\n  void setCountry(String country) {\n    selectedCountry.value = country;\n    _filterProducts();\n  }\n\n  void setQuality(String quality) {\n    selectedQuality.value = quality;\n    _filterProducts();\n  }\n\n  void toggleOnOffer() {\n    filterOnOffer.value = !filterOnOffer.value;\n    _filterProducts();\n  }\n}\n"
        }
    ]
}