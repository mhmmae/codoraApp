{
    "sourceFile": "lib/الكود الخاص بتطبيق البائع/ui/controllers/wholesale_market_controller.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752570376680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752662835578,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -108,8 +108,11 @@\n           if (store.shopName.isNotEmpty && store.sellerType == 'wholesale') {\n             stores.add(store);\n             if (store.shopCategories.isNotEmpty) {\n               categoriesSet.addAll(store.shopCategories);\n+              debugPrint(\n+                '📦 فئات متجر \"${store.shopName}\": ${store.shopCategories}',\n+              );\n             }\n             debugPrint('✅ تم إضافة متجر: ${store.shopName}');\n           }\n         } catch (e) {\n@@ -123,8 +126,10 @@\n       allStores.value = stores;\n       filteredStores.value = stores;\n       categories.value = categoriesSet.toList()..sort();\n \n+      debugPrint('🏷️ الفئات المتاحة: ${categoriesSet.toList()}');\n+\n       // بدء الانيميشن\n       animationController.forward();\n \n       debugPrint('✅ تم تحميل ${stores.length} متجر جملة بنجاح');\n@@ -137,8 +142,14 @@\n   }\n \n   /// تطبيق الفلاتر المتقدمة\n   void applyFilters() {\n+    debugPrint('🔍 بدء تطبيق الفلاتر...');\n+    debugPrint('📊 عدد المتاجر الكلي: ${allStores.length}');\n+    debugPrint('🔤 نص البحث: \"${searchText.value}\"');\n+    debugPrint('🏷️ الفئة المختارة: \"${selectedCategory.value}\"');\n+    debugPrint('📍 الموقع المختار: \"${selectedLocation.value}\"');\n+\n     List<SellerModel> filtered = List.from(allStores);\n \n     // فلتر البحث النصي\n     if (searchText.value.isNotEmpty) {\n@@ -153,16 +164,26 @@\n                 (store.shopDescription?.toLowerCase().contains(query) ??\n                     false) ||\n                 (store.shopAddressText?.toLowerCase().contains(query) ?? false);\n           }).toList();\n+      debugPrint('📝 بعد فلتر البحث النصي: ${filtered.length} متجر');\n     }\n \n     // فلتر الفئة\n     if (selectedCategory.value.isNotEmpty) {\n       filtered =\n-          filtered\n-              .where((store) => store.shopCategories == selectedCategory.value)\n-              .toList();\n+          filtered.where((store) {\n+            bool matches = store.shopCategories.contains(\n+              selectedCategory.value,\n+            );\n+            if (matches) {\n+              debugPrint(\n+                '✅ متجر \"${store.shopName}\" يحتوي على فئة \"${selectedCategory.value}\"',\n+              );\n+            }\n+            return matches;\n+          }).toList();\n+      debugPrint('🏷️ بعد فلتر الفئة: ${filtered.length} متجر');\n     }\n \n     // فلتر الموقع\n     if (selectedLocation.value.isNotEmpty) {\n@@ -173,16 +194,17 @@\n                     store.shopAddressText?.contains(selectedLocation.value) ??\n                     false,\n               )\n               .toList();\n+      debugPrint('📍 بعد فلتر الموقع: ${filtered.length} متجر');\n     }\n \n     // ترتيب النتائج\n     _sortStores(filtered);\n \n     filteredStores.value = filtered;\n \n-    debugPrint('🔍 تطبيق الفلاتر - النتائج: ${filtered.length}');\n+    debugPrint('🔍 النتيجة النهائية: ${filtered.length} متجر');\n   }\n \n   void _sortStores(List<SellerModel> stores) {\n     switch (sortBy.value) {\n@@ -209,9 +231,15 @@\n     showFilters.value = !showFilters.value;\n   }\n \n   void selectCategory(String category) {\n+    debugPrint('🏷️ تم اختيار فئة: \"$category\"');\n+    debugPrint('🏷️ الفئة السابقة: \"${selectedCategory.value}\"');\n+\n     selectedCategory.value = category == selectedCategory.value ? '' : category;\n+\n+    debugPrint('🏷️ الفئة الجديدة: \"${selectedCategory.value}\"');\n+\n     applyFilters();\n   }\n \n   void setSortBy(String sort) {\n"
                }
            ],
            "date": 1752570376680,
            "name": "Commit-0",
            "content": "import 'package:get/get.dart';\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:flutter/material.dart';\nimport 'dart:async';\nimport '../../../Model/SellerModel.dart';\nimport 'package:url_launcher/url_launcher.dart';\n\nclass WholesaleMarketController extends GetxController\n    with GetSingleTickerProviderStateMixin {\n  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n\n  // Animation Controllers\n  late AnimationController animationController;\n  late Animation<double> fadeAnimation;\n  late Animation<Offset> slideAnimation;\n\n  // قوائم المتاجر\n  final RxList<SellerModel> allStores = <SellerModel>[].obs;\n  final RxList<SellerModel> filteredStores = <SellerModel>[].obs;\n  final RxList<String> categories = <String>[].obs;\n\n  // حالة التحميل والانيميشن\n  final RxBool isLoading = false.obs;\n  final RxBool isSearching = false.obs;\n  final RxBool showFilters = false.obs;\n\n  // نص البحث والفلاتر\n  final RxString searchText = ''.obs;\n  final RxString selectedCategory = ''.obs;\n  final RxString selectedLocation = ''.obs;\n  final RxString sortBy = 'name'.obs; // name, rating, newest\n\n  // حالة العرض\n  final RxBool isGridView = false.obs;\n  final RxInt selectedStoreIndex = (-1).obs;\n\n  // مفاتيح التحكم\n  final TextEditingController searchController = TextEditingController();\n  final FocusNode searchFocusNode = FocusNode();\n\n  @override\n  void onInit() {\n    super.onInit();\n    _initializeAnimations();\n    loadWholesaleStores();\n    _setupSearchListener();\n  }\n\n  void _initializeAnimations() {\n    animationController = AnimationController(\n      duration: const Duration(milliseconds: 800),\n      vsync: this,\n    );\n\n    fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(\n      CurvedAnimation(parent: animationController, curve: Curves.easeInOut),\n    );\n\n    slideAnimation = Tween<Offset>(\n      begin: const Offset(0, 0.3),\n      end: Offset.zero,\n    ).animate(\n      CurvedAnimation(parent: animationController, curve: Curves.easeOutBack),\n    );\n  }\n\n  void _setupSearchListener() {\n    searchController.addListener(() {\n      if (searchController.text != searchText.value) {\n        searchText.value = searchController.text;\n        _debounceSearch();\n      }\n    });\n  }\n\n  Timer? _debounceTimer;\n  void _debounceSearch() {\n    _debounceTimer?.cancel();\n    _debounceTimer = Timer(const Duration(milliseconds: 300), () {\n      applyFilters();\n    });\n  }\n\n  /// تحميل جميع متاجر الجملة من Firebase\n  Future<void> loadWholesaleStores() async {\n    try {\n      isLoading.value = true;\n\n      debugPrint('🔄 بدء تحميل متاجر الجملة...');\n\n      final QuerySnapshot querySnapshot =\n          await _firestore\n              .collection('Sellercodora')\n              .where('sellerType', isEqualTo: 'wholesale')\n              .where('isActiveBySeller', isEqualTo: true)\n              .get();\n\n      debugPrint('📊 تم العثور على ${querySnapshot.docs.length} متجر جملة');\n\n      final List<SellerModel> stores = [];\n      final Set<String> categoriesSet = <String>{};\n\n      for (var doc in querySnapshot.docs) {\n        try {\n          final data = doc.data() as Map<String, dynamic>;\n          final store = SellerModel.fromMap(data, doc.id);\n\n          if (store.shopName.isNotEmpty && store.sellerType == 'wholesale') {\n            stores.add(store);\n            if (store.shopCategories.isNotEmpty) {\n              categoriesSet.addAll(store.shopCategories);\n            }\n            debugPrint('✅ تم إضافة متجر: ${store.shopName}');\n          }\n        } catch (e) {\n          debugPrint('❌ خطأ في معالجة وثيقة ${doc.id}: $e');\n        }\n      }\n\n      // ترتيب المتاجر\n      _sortStores(stores);\n\n      allStores.value = stores;\n      filteredStores.value = stores;\n      categories.value = categoriesSet.toList()..sort();\n\n      // بدء الانيميشن\n      animationController.forward();\n\n      debugPrint('✅ تم تحميل ${stores.length} متجر جملة بنجاح');\n    } catch (e) {\n      debugPrint('❌ خطأ في تحميل متاجر الجملة: $e');\n      _showErrorSnackbar('حدث خطأ أثناء تحميل المتاجر');\n    } finally {\n      isLoading.value = false;\n    }\n  }\n\n  /// تطبيق الفلاتر المتقدمة\n  void applyFilters() {\n    List<SellerModel> filtered = List.from(allStores);\n\n    // فلتر البحث النصي\n    if (searchText.value.isNotEmpty) {\n      filtered =\n          filtered.where((store) {\n            final query = searchText.value.toLowerCase();\n            return store.shopName.toLowerCase().contains(query) ||\n                store.sellerName.toLowerCase().contains(query) ||\n                store.shopCategories.any(\n                  (category) => category.toLowerCase().contains(query),\n                ) ||\n                (store.shopDescription?.toLowerCase().contains(query) ??\n                    false) ||\n                (store.shopAddressText?.toLowerCase().contains(query) ?? false);\n          }).toList();\n    }\n\n    // فلتر الفئة\n    if (selectedCategory.value.isNotEmpty) {\n      filtered =\n          filtered\n              .where((store) => store.shopCategories == selectedCategory.value)\n              .toList();\n    }\n\n    // فلتر الموقع\n    if (selectedLocation.value.isNotEmpty) {\n      filtered =\n          filtered\n              .where(\n                (store) =>\n                    store.shopAddressText?.contains(selectedLocation.value) ??\n                    false,\n              )\n              .toList();\n    }\n\n    // ترتيب النتائج\n    _sortStores(filtered);\n\n    filteredStores.value = filtered;\n\n    debugPrint('🔍 تطبيق الفلاتر - النتائج: ${filtered.length}');\n  }\n\n  void _sortStores(List<SellerModel> stores) {\n    switch (sortBy.value) {\n      case 'name':\n        stores.sort((a, b) => a.shopName.compareTo(b.shopName));\n        break;\n      case 'category':\n        stores.sort((a, b) {\n          final categoryA =\n              a.shopCategories.isNotEmpty ? a.shopCategories.first : '';\n          final categoryB =\n              b.shopCategories.isNotEmpty ? b.shopCategories.first : '';\n          return categoryA.compareTo(categoryB);\n        });\n        break;\n      case 'newest':\n        // يمكن إضافة ترتيب حسب تاريخ الإنشاء إذا كان متوفراً\n        break;\n    }\n  }\n\n  // وظائف التحكم في الفلاتر\n  void toggleFilters() {\n    showFilters.value = !showFilters.value;\n  }\n\n  void selectCategory(String category) {\n    selectedCategory.value = category == selectedCategory.value ? '' : category;\n    applyFilters();\n  }\n\n  void setSortBy(String sort) {\n    sortBy.value = sort;\n    applyFilters();\n  }\n\n  void toggleViewMode() {\n    isGridView.value = !isGridView.value;\n  }\n\n  void clearFilters() {\n    searchController.clear();\n    searchText.value = '';\n    selectedCategory.value = '';\n    selectedLocation.value = '';\n    sortBy.value = 'name';\n    applyFilters();\n  }\n\n  // وظائف التفاعل مع المتاجر\n  void selectStore(int index) {\n    selectedStoreIndex.value = index;\n  }\n\n  Future<void> callStore(String phoneNumber) async {\n    final url = Uri.parse('tel:$phoneNumber');\n    if (await canLaunchUrl(url)) {\n      await launchUrl(url);\n    } else {\n      _showErrorSnackbar('لا يمكن فتح تطبيق الهاتف');\n    }\n  }\n\n  Future<void> openLocation(String? address) async {\n    if (address == null || address.isEmpty) {\n      _showErrorSnackbar('العنوان غير متوفر');\n      return;\n    }\n\n    final url = Uri.parse(\n      'https://maps.google.com/?q=${Uri.encodeComponent(address)}',\n    );\n    if (await canLaunchUrl(url)) {\n      await launchUrl(url, mode: LaunchMode.externalApplication);\n    } else {\n      _showErrorSnackbar('لا يمكن فتح الخرائط');\n    }\n  }\n\n  void _showErrorSnackbar(String message) {\n    Get.snackbar(\n      'خطأ',\n      message,\n      snackPosition: SnackPosition.BOTTOM,\n      backgroundColor: Colors.red.withOpacity(0.1),\n      colorText: Colors.red[800],\n      duration: const Duration(seconds: 3),\n      margin: const EdgeInsets.all(16),\n      borderRadius: 12,\n    );\n  }\n\n  // Getters\n  int get storesCount => allStores.length;\n  int get filteredStoresCount => filteredStores.length;\n  bool get hasFilters =>\n      searchText.value.isNotEmpty ||\n      selectedCategory.value.isNotEmpty ||\n      selectedLocation.value.isNotEmpty;\n\n  @override\n  Future<void> refresh() async {\n    await loadWholesaleStores();\n  }\n\n  @override\n  void onClose() {\n    animationController.dispose();\n    searchController.dispose();\n    searchFocusNode.dispose();\n    _debounceTimer?.cancel();\n    super.onClose();\n    debugPrint('🧹 تم تنظيف WholesaleMarketController');\n  }\n}\n"
        }
    ]
}