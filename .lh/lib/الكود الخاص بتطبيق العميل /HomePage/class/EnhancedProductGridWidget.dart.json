{
    "sourceFile": "lib/الكود الخاص بتطبيق العميل /HomePage/class/EnhancedProductGridWidget.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753157006796,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753157006796,
            "name": "Commit-0",
            "content": "import 'package:cached_network_image/cached_network_image.dart';\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\nimport 'package:get/get.dart';\nimport 'package:intl/intl.dart';\nimport 'package:shimmer/shimmer.dart';\n\nimport '../../../Model/model_item.dart';\nimport '../../../XXX/xxx_firebase.dart';\n\nimport '../controllers/enhanced_category_filter_controller.dart';\nimport 'BoxAddAndRemove.dart';\nimport 'DetailsOfItemScreen.dart';\nimport 'FavoriteController.dart';\n\n/// ProductGridWidget محدث ليستخدم EnhancedCategoryFilterController\nclass EnhancedProductGridWidget extends StatelessWidget {\n  final String? selectedSubtypeKey;\n  final bool showLoadingShimmer;\n  final int? maxItems;\n\n  const EnhancedProductGridWidget({\n    super.key,\n    this.selectedSubtypeKey,\n    this.showLoadingShimmer = true,\n    this.maxItems,\n  });\n\n  // مرجع ثابت لـ allItemsFilterKey\n  static const String allItemsFilterKey = 'all_items';\n\n  // التحقق من حالة الأدمن\n  bool get _isAdmin =>\n      FirebaseAuth.instance.currentUser?.email == FirebaseX.EmailOfWnerApp;\n\n  @override\n  Widget build(BuildContext context) {\n    final theme = Theme.of(context);\n\n    return StreamBuilder<QuerySnapshot<Map<String, dynamic>>>(\n      stream: _buildProductStream(),\n      builder: (context, snapshot) {\n        if (snapshot.hasError) {\n          return _buildErrorWidget(context, snapshot.error.toString());\n        }\n\n        if (snapshot.connectionState == ConnectionState.waiting &&\n            showLoadingShimmer) {\n          return _buildLoadingShimmer();\n        }\n\n        if (!snapshot.hasData || snapshot.data!.docs.isEmpty) {\n          final filterController = Get.find<EnhancedCategoryFilterController>();\n          return _buildEmptyStateWidget(context, filterController);\n        }\n\n        final items =\n            snapshot.data!.docs\n                .map((doc) => ItemModel.fromMap(doc.data(), doc.id))\n                .toList();\n\n        return _buildProductGrid(context, items, theme);\n      },\n    );\n  }\n\n  /// بناء stream المنتجات مع الفلترة\n  Stream<QuerySnapshot<Map<String, dynamic>>> _buildProductStream() {\n    final filterController = Get.find<EnhancedCategoryFilterController>();\n\n    // بناء الاستعلام الأساسي\n    Query<Map<String, dynamic>> query = FirebaseFirestore.instance\n        .collection(FirebaseX.itemsCollection)\n        .where('appName', isEqualTo: FirebaseX.appName);\n\n    // تطبيق فلتر الفئة إذا كان محددًا\n    final currentFilterKey = filterController.getFilterKey();\n    if (currentFilterKey != 'all_items') {\n      // دعم النظام القديم (typeItem) والنظام الجديد (mainCategoryId/subCategoryId)\n      if (currentFilterKey.contains('_') &&\n          currentFilterKey.split('_').length >= 2) {\n        // نظام جديد: mainCategoryId_subCategoryId أو mainCategoryId_subCategoryId_productType\n        final parts = currentFilterKey.split('_');\n        final mainCategoryId = parts[0];\n        final subCategoryId = parts[1];\n        final productType = parts.length > 2 ? parts[2] : null;\n\n        debugPrint(\n          \"📱 EnhancedProductGrid: تطبيق فلتر النظام الجديد: mainCategory=$mainCategoryId, subCategory=$subCategoryId, productType=$productType\",\n        );\n        query = query.where('mainCategoryId', isEqualTo: mainCategoryId);\n        if (subCategoryId != 'all' && subCategoryId.isNotEmpty) {\n          query = query.where('subCategoryId', isEqualTo: subCategoryId);\n        }\n        if (productType != null &&\n            productType != 'all' &&\n            productType.isNotEmpty) {\n          query = query.where('itemCondition', isEqualTo: productType);\n        }\n      } else {\n        // النظام القديم: typeItem\n        debugPrint(\n          \"📱 EnhancedProductGrid: تطبيق فلتر النظام القديم: typeItem=$currentFilterKey\",\n        );\n        query = query.where('typeItem', isEqualTo: currentFilterKey);\n      }\n    }\n\n    // ترتيب بالوقت (الأحدث أولاً)\n    query = query.orderBy('timestamp', descending: true);\n\n    // تطبيق الحد إذا كان محددًا\n    if (maxItems != null) {\n      query = query.limit(maxItems!);\n    } else {\n      query = query.limit(50);\n    }\n\n    debugPrint(\"📱 [EnhancedProductGrid] الاستعلام النهائي جاهز للتنفيذ\");\n    debugPrint(\"📊 [EnhancedProductGrid] معايير الفلترة المطبقة:\");\n    debugPrint(\"   - الفلتر: $currentFilterKey\");\n    debugPrint(\"   - الحد الأقصى للعناصر: ${maxItems ?? 50}\");\n    debugPrint(\"══════════════════════════════════════════════════\");\n\n    return query.snapshots();\n  }\n\n  /// بناء شبكة المنتجات\n  Widget _buildProductGrid(\n    BuildContext context,\n    List<ItemModel> items,\n    ThemeData theme,\n  ) {\n    return Padding(\n      padding: const EdgeInsets.symmetric(horizontal: 8.0),\n      child: GridView.builder(\n        shrinkWrap: true,\n        physics: const NeverScrollableScrollPhysics(),\n        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(\n          crossAxisCount: 2,\n          childAspectRatio: 0.7,\n          crossAxisSpacing: 8.0,\n          mainAxisSpacing: 8.0,\n        ),\n        itemCount: items.length,\n        itemBuilder: (context, index) {\n          final item = items[index];\n          return _buildProductCard(context, item, theme);\n        },\n      ),\n    );\n  }\n\n  /// بناء بطاقة المنتج\n  Widget _buildProductCard(\n    BuildContext context,\n    ItemModel item,\n    ThemeData theme,\n  ) {\n    final favoriteController = Get.put(FavoriteController());\n\n    return Card(\n      elevation: 2,\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n      child: InkWell(\n        onTap: () => Get.to(() => DetailsOfItemScreen(item: item)),\n        onTapDown:\n            _isAdmin\n                ? (details) => _showAdminContextMenu(context, details, item)\n                : null,\n        borderRadius: BorderRadius.circular(12),\n        child: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            // صورة المنتج\n            Expanded(\n              flex: 3,\n              child: Container(\n                width: double.infinity,\n                decoration: const BoxDecoration(\n                  borderRadius: BorderRadius.vertical(top: Radius.circular(12)),\n                ),\n                child: ClipRRect(\n                  borderRadius: const BorderRadius.vertical(\n                    top: Radius.circular(12),\n                  ),\n                  child: CachedNetworkImage(\n                    imageUrl: item.imageUrl ?? '',\n                    fit: BoxFit.cover,\n                    placeholder:\n                        (context, url) => Shimmer.fromColors(\n                          baseColor: Colors.grey[300]!,\n                          highlightColor: Colors.grey[100]!,\n                          child: Container(color: Colors.white),\n                        ),\n                    errorWidget:\n                        (context, url, error) => Container(\n                          color: Colors.grey[200],\n                          child: const Icon(Icons.error, color: Colors.grey),\n                        ),\n                  ),\n                ),\n              ),\n            ),\n\n            // معلومات المنتج\n            Expanded(\n              flex: 2,\n              child: Padding(\n                padding: const EdgeInsets.all(8.0),\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  children: [\n                    // اسم المنتج\n                    Text(\n                      item.name,\n                      style: const TextStyle(\n                        fontSize: 14,\n                        fontWeight: FontWeight.bold,\n                      ),\n                      maxLines: 2,\n                      overflow: TextOverflow.ellipsis,\n                    ),\n                    const SizedBox(height: 4),\n\n                    // نوع المنتج\n                    Text(\n                      item.typeItem,\n                      style: TextStyle(fontSize: 12, color: Colors.grey[600]),\n                      maxLines: 1,\n                      overflow: TextOverflow.ellipsis,\n                    ),\n\n                    const Spacer(),\n\n                    // السعر وأزرار الإضافة/المفضلة\n                    Row(\n                      children: [\n                        // السعر\n                        Text(\n                          '${item.suggestedRetailPrice ?? item.price} ${FirebaseX.currency ?? ''}',\n                          style: TextStyle(\n                            fontSize: 14,\n                            fontWeight: FontWeight.bold,\n                            color: theme.primaryColor,\n                          ),\n                        ),\n                        const Spacer(),\n\n                        // زر المفضلة\n                        StreamBuilder<bool>(\n                          stream: favoriteController.isFavoriteStream(item.id),\n                          builder: (context, snapshot) {\n                            final bool isFavorite = snapshot.data ?? false;\n                            return IconButton(\n                              icon: Icon(\n                                isFavorite\n                                    ? Icons.favorite\n                                    : Icons.favorite_border,\n                                color: Colors.red,\n                                size: 20,\n                              ),\n                              onPressed:\n                                  () => favoriteController.toggleFavorite(\n                                    item.id,\n                                    isFavorite,\n                                  ),\n                              padding: EdgeInsets.zero,\n                              constraints: const BoxConstraints(\n                                minWidth: 30,\n                                minHeight: 30,\n                              ),\n                            );\n                          },\n                        ),\n\n                        // زر الإضافة للسلة\n                        BoxAddAndRemove(\n                          uidItem: item.id,\n                          uidAdd: item.uidAdd,\n                          price: item.suggestedRetailPrice ?? item.price,\n                          name: item.name,\n                          isOffer: item.isOffer,\n                        ),\n                      ],\n                    ),\n                  ],\n                ),\n              ),\n            ),\n          ],\n        ),\n      ),\n    );\n  }\n\n  /// عرض قائمة السياق للأدمن\n  Future<void> _showAdminContextMenu(\n    BuildContext context,\n    TapDownDetails details,\n    ItemModel item,\n  ) async {\n    if (!_isAdmin) return;\n\n    final RenderBox overlay =\n        Overlay.of(context).context.findRenderObject() as RenderBox;\n    final RelativeRect position = RelativeRect.fromRect(\n      details.globalPosition & const Size(40, 40),\n      Offset.zero & overlay.size,\n    );\n\n    final String? selectedValue = await showMenu<String>(\n      context: context,\n      position: position,\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10.0)),\n      elevation: 8.0,\n      items: <PopupMenuEntry<String>>[\n        PopupMenuItem<String>(\n          value: 'edit_name',\n          child: const ListTile(\n            leading: Icon(Icons.edit_outlined, size: 20),\n            title: Text('تعديل الاسم'),\n            dense: true,\n            contentPadding: EdgeInsets.zero,\n          ),\n        ),\n        PopupMenuItem<String>(\n          value: 'edit_price',\n          child: const ListTile(\n            leading: Icon(Icons.price_change_outlined, size: 20),\n            title: Text('تعديل السعر'),\n            dense: true,\n            contentPadding: EdgeInsets.zero,\n          ),\n        ),\n        PopupMenuItem<String>(\n          value: 'add_as_offer',\n          child: ListTile(\n            leading: Icon(Icons.local_offer_outlined, color: Colors.blue[700]),\n            title: Text(\n              'إضافة كعرض',\n              style: TextStyle(color: Colors.blue[700]),\n            ),\n            dense: true,\n            contentPadding: EdgeInsets.zero,\n          ),\n        ),\n        const PopupMenuDivider(),\n        PopupMenuItem<String>(\n          value: 'delete',\n          child: ListTile(\n            leading: Icon(\n              Icons.delete_outline,\n              color: Colors.red[700],\n              size: 20,\n            ),\n            title: Text('حذف المنتج', style: TextStyle(color: Colors.red[700])),\n            dense: true,\n            contentPadding: EdgeInsets.zero,\n          ),\n        ),\n      ],\n    );\n\n    // معالجة اختيار الأدمن\n    switch (selectedValue) {\n      case 'edit_name':\n        _showEditDialog(context, item, isEditingName: true);\n        break;\n      case 'edit_price':\n        _showEditDialog(context, item, isEditingName: false);\n        break;\n      case 'add_as_offer':\n        _showAddOfferDialog(context, item);\n        break;\n      case 'delete':\n        _showDeleteConfirmationDialog(context, item.id);\n        break;\n    }\n  }\n\n  /// حوار تعديل المنتج\n  void _showEditDialog(\n    BuildContext context,\n    ItemModel item, {\n    required bool isEditingName,\n  }) {\n    final TextEditingController controller = TextEditingController(\n      text:\n          isEditingName\n              ? item.name\n              : (item.suggestedRetailPrice ?? item.price).toString(),\n    );\n\n    Get.defaultDialog(\n      title: isEditingName ? 'تعديل اسم المنتج' : 'تعديل سعر المنتج',\n      content: TextField(\n        controller: controller,\n        keyboardType: isEditingName ? TextInputType.text : TextInputType.number,\n        inputFormatters:\n            isEditingName ? null : [FilteringTextInputFormatter.digitsOnly],\n        decoration: InputDecoration(\n          labelText: isEditingName ? 'اسم المنتج' : 'السعر',\n          border: const OutlineInputBorder(),\n        ),\n      ),\n      textConfirm: 'حفظ',\n      textCancel: 'إلغاء',\n      onConfirm: () async {\n        final newValue = controller.text.trim();\n        if (newValue.isNotEmpty) {\n          try {\n            final updateData =\n                isEditingName\n                    ? {'nameOfItem': newValue}\n                    : {'priceOfItem': double.parse(newValue)};\n\n            await FirebaseFirestore.instance\n                .collection(FirebaseX.itemsCollection)\n                .doc(item.id)\n                .update(updateData);\n\n            Get.back();\n            Get.snackbar(\n              'تم بنجاح',\n              'تم تحديث ${isEditingName ? 'اسم' : 'سعر'} المنتج',\n              backgroundColor: Colors.green,\n              colorText: Colors.white,\n            );\n          } catch (e) {\n            Get.snackbar(\n              'خطأ',\n              'فشل في التحديث: $e',\n              backgroundColor: Colors.red,\n              colorText: Colors.white,\n            );\n          }\n        }\n      },\n    );\n  }\n\n  /// حوار إضافة عرض\n  void _showAddOfferDialog(BuildContext context, ItemModel item) {\n    final TextEditingController offerPriceController = TextEditingController();\n    final TextEditingController rateController = TextEditingController();\n    final Rxn<DateTime> expiryDate = Rxn<DateTime>(null);\n\n    void calculateRate() {\n      final double? newPrice = double.tryParse(\n        offerPriceController.text.trim(),\n      );\n      final double itemPrice = item.suggestedRetailPrice ?? item.price;\n      if (newPrice != null && itemPrice > 0 && newPrice < itemPrice) {\n        final double discount = ((itemPrice - newPrice) / itemPrice) * 100;\n        rateController.text = discount.toStringAsFixed(0);\n      } else {\n        rateController.text = '';\n      }\n    }\n\n    offerPriceController.addListener(calculateRate);\n\n    Get.defaultDialog(\n      title: \"إضافة المنتج كعرض\",\n      content: SingleChildScrollView(\n        child: Column(\n          children: [\n            Text(\"منتج: ${item.name}\"),\n            Text(\n              \"السعر الأصلي: ${item.suggestedRetailPrice ?? item.price} ${FirebaseX.currency}\",\n            ),\n            const SizedBox(height: 16),\n            TextField(\n              controller: offerPriceController,\n              decoration: const InputDecoration(\n                labelText: \"سعر العرض\",\n                border: OutlineInputBorder(),\n              ),\n              keyboardType: TextInputType.number,\n            ),\n            const SizedBox(height: 16),\n            TextField(\n              controller: rateController,\n              decoration: const InputDecoration(\n                labelText: \"نسبة الخصم (%)\",\n                border: OutlineInputBorder(),\n              ),\n              enabled: false,\n            ),\n            const SizedBox(height: 16),\n            Obx(\n              () => ListTile(\n                leading: const Icon(Icons.calendar_today_outlined),\n                title: Text(\n                  expiryDate.value == null\n                      ? \"تحديد تاريخ انتهاء العرض (اختياري)\"\n                      : \"ينتهي في: ${DateFormat('yyyy/MM/dd').format(expiryDate.value!)}\",\n                ),\n                onTap: () async {\n                  final DateTime? picked = await showDatePicker(\n                    context: context,\n                    initialDate: DateTime.now().add(const Duration(days: 7)),\n                    firstDate: DateTime.now(),\n                    lastDate: DateTime.now().add(const Duration(days: 365)),\n                  );\n                  if (picked != null) {\n                    expiryDate.value = picked;\n                  }\n                },\n              ),\n            ),\n          ],\n        ),\n      ),\n      textConfirm: 'إضافة العرض',\n      textCancel: 'إلغاء',\n      onConfirm: () async {\n        final double? offerPrice = double.tryParse(\n          offerPriceController.text.trim(),\n        );\n        final double itemPrice = item.suggestedRetailPrice ?? item.price;\n        if (offerPrice != null && offerPrice > 0 && offerPrice < itemPrice) {\n          try {\n            // إضافة منتج جديد كعرض\n            final offerData = {\n              'nameOfItem': item.name,\n              'priceOfItem': offerPrice,\n              'originalPrice': item.suggestedRetailPrice ?? item.price,\n              'url': item.imageUrl,\n              'manyImages': item.manyImages,\n              'videoURL': item.videoUrl ?? 'noVideo',\n              'typeItem': item.typeItem,\n              'itemCondition': item.itemCondition,\n              'qualityGrade': item.qualityGrade,\n              'countryOfOrigin': item.countryOfOrigin,\n              'uidAdd': item.uidAdd,\n              'appName': item.appName,\n              'isOfer': true,\n              'discountRate': double.parse(rateController.text.trim()),\n              'expiryDate': expiryDate.value,\n              'timestamp': FieldValue.serverTimestamp(),\n            };\n\n            await FirebaseFirestore.instance\n                .collection(FirebaseX.itemsCollection)\n                .add(offerData);\n\n            Get.back();\n            Get.snackbar(\n              'تم بنجاح',\n              'تم إضافة المنتج كعرض',\n              backgroundColor: Colors.green,\n              colorText: Colors.white,\n            );\n          } catch (e) {\n            Get.snackbar(\n              'خطأ',\n              'فشل في إضافة العرض: $e',\n              backgroundColor: Colors.red,\n              colorText: Colors.white,\n            );\n          }\n        } else {\n          Get.snackbar(\n            'خطأ',\n            'يرجى إدخال سعر عرض صحيح',\n            backgroundColor: Colors.orange,\n            colorText: Colors.white,\n          );\n        }\n      },\n    );\n  }\n\n  /// حوار تأكيد الحذف\n  void _showDeleteConfirmationDialog(BuildContext context, String itemId) {\n    Get.defaultDialog(\n      title: 'تأكيد الحذف',\n      middleText:\n          'هل أنت متأكد من حذف هذا المنتج؟ لا يمكن التراجع عن هذا الإجراء.',\n      textConfirm: 'حذف',\n      textCancel: 'إلغاء',\n      confirmTextColor: Colors.white,\n      buttonColor: Colors.red,\n      onConfirm: () async {\n        try {\n          await FirebaseFirestore.instance\n              .collection(FirebaseX.itemsCollection)\n              .doc(itemId)\n              .delete();\n\n          Get.back();\n          Get.snackbar(\n            'تم بنجاح',\n            'تم حذف المنتج',\n            backgroundColor: Colors.green,\n            colorText: Colors.white,\n          );\n        } catch (e) {\n          Get.snackbar(\n            'خطأ',\n            'فشل في حذف المنتج: $e',\n            backgroundColor: Colors.red,\n            colorText: Colors.white,\n          );\n        }\n      },\n    );\n  }\n\n  /// widget حالة الخطأ\n  Widget _buildErrorWidget(BuildContext context, String error) {\n    return Center(\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: [\n          Icon(Icons.error_outline, size: 64, color: Colors.red[400]),\n          const SizedBox(height: 16),\n          Text(\n            'حدث خطأ في تحميل المنتجات',\n            style: Theme.of(context).textTheme.titleMedium,\n            textAlign: TextAlign.center,\n          ),\n          const SizedBox(height: 8),\n          Text(\n            error,\n            style: Theme.of(context).textTheme.bodySmall,\n            textAlign: TextAlign.center,\n          ),\n          const SizedBox(height: 16),\n          ElevatedButton(\n            onPressed: () {\n              // إعادة تحميل\n            },\n            child: const Text('إعادة المحاولة'),\n          ),\n        ],\n      ),\n    );\n  }\n\n  /// widget حالة فارغة\n  Widget _buildEmptyStateWidget(\n    BuildContext context,\n    EnhancedCategoryFilterController filterController,\n  ) {\n    return Center(\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: [\n          Icon(Icons.shopping_bag_outlined, size: 64, color: Colors.grey[400]),\n          const SizedBox(height: 16),\n          Text(\n            filterController.hasActiveFilter.value\n                ? 'لا توجد منتجات في هذا القسم'\n                : 'لا توجد منتجات متاحة',\n            style: Theme.of(context).textTheme.titleMedium,\n            textAlign: TextAlign.center,\n          ),\n          const SizedBox(height: 8),\n          if (filterController.hasActiveFilter.value) ...[\n            Text(\n              'جرب تصفية أخرى أو اعرض جميع المنتجات',\n              style: Theme.of(context).textTheme.bodySmall,\n              textAlign: TextAlign.center,\n            ),\n            const SizedBox(height: 16),\n            ElevatedButton(\n              onPressed: () => filterController.resetFilters(),\n              child: const Text('عرض جميع المنتجات'),\n            ),\n          ],\n        ],\n      ),\n    );\n  }\n\n  /// شكل تحميل مع Shimmer\n  Widget _buildLoadingShimmer() {\n    return Padding(\n      padding: const EdgeInsets.symmetric(horizontal: 8.0),\n      child: GridView.builder(\n        shrinkWrap: true,\n        physics: const NeverScrollableScrollPhysics(),\n        gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(\n          crossAxisCount: 2,\n          childAspectRatio: 0.7,\n          crossAxisSpacing: 8.0,\n          mainAxisSpacing: 8.0,\n        ),\n        itemCount: 6,\n        itemBuilder: (context, index) {\n          return Card(\n            elevation: 2,\n            shape: RoundedRectangleBorder(\n              borderRadius: BorderRadius.circular(12),\n            ),\n            child: Shimmer.fromColors(\n              baseColor: Colors.grey[300]!,\n              highlightColor: Colors.grey[100]!,\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                children: [\n                  Expanded(\n                    flex: 3,\n                    child: Container(\n                      width: double.infinity,\n                      decoration: const BoxDecoration(\n                        borderRadius: BorderRadius.vertical(\n                          top: Radius.circular(12),\n                        ),\n                        color: Colors.white,\n                      ),\n                    ),\n                  ),\n                  Expanded(\n                    flex: 2,\n                    child: Padding(\n                      padding: const EdgeInsets.all(8.0),\n                      child: Column(\n                        crossAxisAlignment: CrossAxisAlignment.start,\n                        children: [\n                          Container(\n                            height: 14,\n                            width: double.infinity,\n                            color: Colors.white,\n                          ),\n                          const SizedBox(height: 4),\n                          Container(\n                            height: 12,\n                            width: 100,\n                            color: Colors.white,\n                          ),\n                          const Spacer(),\n                          Container(height: 14, width: 80, color: Colors.white),\n                        ],\n                      ),\n                    ),\n                  ),\n                ],\n              ),\n            ),\n          );\n        },\n      ),\n    );\n  }\n}\n"
        }
    ]
}