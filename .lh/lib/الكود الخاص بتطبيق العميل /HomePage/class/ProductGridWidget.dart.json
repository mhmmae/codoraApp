{
    "sourceFile": "lib/الكود الخاص بتطبيق العميل /HomePage/class/ProductGridWidget.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1753065306912,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753093449449,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,30 +145,25 @@\n         debugPrint(\"🎯 تطبيق فلتر جميع المنتجات الأصلية\");\n         query = query.where('itemCondition', isEqualTo: 'original');\n       } else if (currentFilterKey.startsWith('main_') ||\n           currentFilterKey.startsWith('sub_')) {\n-        // نظام الأقسام المحسن الجديد\n+        // نظام الأقسام المحسن الجديد - معالجة مباشرة للمفاتيح\n         try {\n-          final filterController = Get.find<EnhancedCategoryFilterController>();\n-\n-          // الحصول على معرفات الأقسام مباشرة من الكونترولر\n-          final mainCategoryId = filterController.selectedMainCategoryId.value;\n-          final subCategoryId = filterController.selectedSubCategoryId.value;\n-\n           debugPrint(\"🎯 تطبيق فلتر النظام المحسن:\");\n-          debugPrint(\"   - القسم الرئيسي: '$mainCategoryId'\");\n-          debugPrint(\"   - القسم الفرعي: '$subCategoryId'\");\n           debugPrint(\"   - مفتاح الفلتر: '$currentFilterKey'\");\n \n-          // تطبيق فلتر القسم الفرعي أولاً إذا كان موجوداً وغير فارغ\n-          if (subCategoryId.isNotEmpty && subCategoryId != 'all') {\n+          if (currentFilterKey.startsWith('sub_')) {\n+            // فلتر القسم الفرعي\n+            final subCategoryId = currentFilterKey.replaceFirst('sub_', '');\n+            debugPrint(\"   - القسم الفرعي: '$subCategoryId'\");\n             query = query.where('subCategoryId', isEqualTo: subCategoryId);\n             debugPrint(\"✅ تم تطبيق فلتر القسم الفرعي: '$subCategoryId'\");\n-          } else if (mainCategoryId.isNotEmpty && mainCategoryId != 'all') {\n+          } else if (currentFilterKey.startsWith('main_')) {\n+            // فلتر القسم الرئيسي\n+            final mainCategoryId = currentFilterKey.replaceFirst('main_', '');\n+            debugPrint(\"   - القسم الرئيسي: '$mainCategoryId'\");\n             query = query.where('mainCategoryId', isEqualTo: mainCategoryId);\n             debugPrint(\"✅ تم تطبيق فلتر القسم الرئيسي: '$mainCategoryId'\");\n-          } else {\n-            debugPrint(\"⚠️ لا توجد معرفات أقسام صالحة للفلترة\");\n           }\n         } catch (e) {\n           debugPrint(\"❌ خطأ في تطبيق فلتر الأقسام المحسن: $e\");\n         }\n@@ -557,10 +552,11 @@\n   }\n \n   // دالة مساعدة لتحديد اللون بناءً على درجة الجودة\n   Color _getQualityColor(int? grade) {\n-    if (grade == null)\n+    if (grade == null) {\n       return Colors.grey.shade400; // لون افتراضي إذا لم تتوفر الدرجة\n+    }\n     if (grade >= 1 && grade <= 4) {\n       return Colors.green.shade600; // أخضر للدرجات 1-4\n     } else if (grade >= 5 && grade <= 7) {\n       return Colors.amber.shade700; // أصفر/برتقالي للدرجات 5-7\n@@ -1029,10 +1025,11 @@\n           Get.to(() => DetailsOfItemScreen(item: item));\n         },\n         // استدعاء قائمة السياق عند الضغط (لأسفل أو مطولاً) إذا كان المستخدم أدمن\n         onTapDown: (details) {\n-          if (_isAdmin)\n+          if (_isAdmin) {\n             _showAdminContextMenu(context, details, item, controller);\n+          }\n         },\n         onLongPress: () {\n           if (_isAdmin) {\n             final center = Offset(wi / 2, hi / 2);\n@@ -1361,9 +1358,9 @@\n     String formattedInteger = '';\n     for (int i = integerPart.length - 1; i >= 0; i--) {\n       formattedInteger = integerPart[i] + formattedInteger;\n       if ((integerPart.length - i) % 3 == 0 && i != 0) {\n-        formattedInteger = ',' + formattedInteger;\n+        formattedInteger = ',$formattedInteger';\n       }\n     }\n \n     return formattedInteger + decimalPart;\n"
                },
                {
                    "date": 1753149650100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -350,9 +350,9 @@\n           mainAxisSize: MainAxisSize.min, // لتجنب أخذ ارتفاع الشاشة كاملة\n           children: [\n             Text(\"منتج: ${item.name}\", style: const TextStyle(fontSize: 16)),\n             const SizedBox(height: 5),\n-            Text(\"السعر الأصلي: $oldPrice ${FirebaseX.currency}\"),\n+            Text(\"السعر الأصلي: $oldPrice د.ع.\"),\n             const Divider(height: 20),\n \n             // --- حقل السعر الجديد للعرض (إجباري) ---\n             TextFormField(\n"
                },
                {
                    "date": 1753157006813,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -318,9 +318,9 @@\n   void _showAddOfferDialog(BuildContext context, ItemModel item) {\n     // متحكمات محلية للحقول الجديدة\n     final TextEditingController offerPriceController = TextEditingController();\n     // السعر القديم يمكن أخذه مباشرة من المنتج\n-    final double oldPrice = item.price;\n+    final double oldPrice = item.suggestedRetailPrice ?? item.price;\n     final TextEditingController rateController =\n         TextEditingController(); // اختياري\n     final Rxn<DateTime> expiryDate = Rxn<DateTime>(\n       null,\n@@ -1231,9 +1231,11 @@\n                     // السعر وأزرار +/-\n                     // التأكد من تمرير البيانات الصحيحة (price يجب أن يكون int)\n                     BoxAddAndRemove(\n                       uidItem: item.id,\n-                      price: item.price, // <-- تمرير السعر (int)\n+                      price:\n+                          item.suggestedRetailPrice ??\n+                          item.price, // <-- استخدام السعر المقترح أولاً ثم السعر العادي\n                       name: item.name, // <-- تمرير الاسم\n                       isOffer: false,\n                       uidAdd: item.uidAdd, // ليس عرضًا هنا\n                     ),\n@@ -1255,9 +1257,12 @@\n     required bool isEditingName,\n   }) {\n     // تهيئة المتحكم النصي بالقيمة الحالية\n     final editController = TextEditingController(\n-      text: isEditingName ? item.name : item.price.toString(),\n+      text:\n+          isEditingName\n+              ? item.name\n+              : (item.suggestedRetailPrice ?? item.price).toString(),\n     );\n     final String title =\n         isEditingName ? \"تعديل اسم المنتج\" : \"تعديل سعر المنتج\";\n     final String label = isEditingName ? \"الاسم الجديد\" : \"السعر الجديد\";\n"
                }
            ],
            "date": 1753065306912,
            "name": "Commit-0",
            "content": "import 'package:cached_network_image/cached_network_image.dart';\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\nimport 'package:get/get.dart';\nimport 'package:intl/intl.dart';\nimport 'package:shimmer/shimmer.dart';\nimport 'package:uuid/uuid.dart';\n\nimport '../../../Model/model_item.dart';\nimport '../../../Model/model_offer_item.dart';\nimport '../../../XXX/xxx_firebase.dart';\nimport '../Get-Controllar/GetSerchController.dart';\nimport '../Get-Controllar/GetStreamBuildBoxOfItem.dart';\nimport '../controllers/barcode_filter_controller.dart';\nimport '../controllers/brand_filter_controller.dart';\nimport '../controllers/enhanced_category_filter_controller.dart';\nimport 'BoxAddAndRemove.dart';\nimport 'DetailsOfItemScreen.dart';\nimport 'FavoriteController.dart';\n\nclass ProductGridWidgetOption extends StatefulWidget {\n  final String? selectedSubtypeKey;\n  final SortOption? sortOption; // <-- إضافة معامل الترتيب (اختياري)\n\n  // تعديل الـ Constructor لاستقبال الترتيب\n  const ProductGridWidgetOption({\n    super.key,\n    this.selectedSubtypeKey,\n    this.sortOption, // اجعله اختياريًا أو اقرأه من المتحكم داخليًا\n  });\n\n  @override\n  State<ProductGridWidgetOption> createState() =>\n      _ProductGridWidgetOptionState();\n}\n\nclass _ProductGridWidgetOptionState extends State<ProductGridWidgetOption> {\n  final String allItemsFilterKey = 'all_items';\n  final bool _isAdmin =\n      FirebaseAuth.instance.currentUser?.email == FirebaseX.EmailOfWnerApp;\n\n  // --- بناء الـ Stream مع الفلتر والترتيب ---\n  Stream<QuerySnapshot<Map<String, dynamic>>> _buildProductStream() {\n    return _buildProductStreamWithRetry();\n  }\n\n  // دالة مساعدة لبناء الاستعلام مع إعادة المحاولة في حالة خطأ الفهرس\n  Stream<QuerySnapshot<Map<String, dynamic>>> _buildProductStreamWithRetry({\n    bool skipSort = false,\n  }) {\n    // ---!!! 1. قراءة خيار الترتيب والفلتر الحاليين !!!---\n    // الوصول إلى المتحكمات باستخدام Get.find\n    final searchController = Get.find<GetSearchController>();\n    final brandController = Get.put(BrandFilterController());\n\n    // تجربة الوصول للنظام الجديد أولاً، وفي حالة عدم وجوده، استخدم النظام القديم\n    String currentFilterKey = allItemsFilterKey;\n\n    try {\n      final filterController = Get.find<EnhancedCategoryFilterController>();\n      currentFilterKey = filterController.getFilterKey();\n      debugPrint(\"🔍 استخدام النظام الجديد للفلاتر: $currentFilterKey\");\n    } catch (e) {\n      debugPrint(\"🔍 النظام الجديد غير متاح، استخدام النظام المبسط\");\n      try {\n        final categoryFilterController =\n            Get.find<EnhancedCategoryFilterController>();\n        currentFilterKey = categoryFilterController.getFilterKey();\n        debugPrint(\"🔍 استخدام فلتر النظام المبسط: $currentFilterKey\");\n      } catch (e2) {\n        debugPrint(\"🔍 النظام المبسط أيضاً غير متاح، استخدام الفلتر الافتراضي\");\n      }\n    }\n\n    final currentSortOption = searchController.currentSortOption.value;\n\n    // التحقق من نوع الفلتر المطلوب (باركود أم براند أم فئات عادية)\n    final barcodeController = Get.put(BarcodeFilterController());\n\n    if (barcodeController.hasActiveFilter) {\n      currentFilterKey = barcodeController.getFilterKey();\n    } else if (brandController.isBrandModeActive.value) {\n      currentFilterKey = brandController.getFilterKey();\n    } else {\n      currentFilterKey = widget.selectedSubtypeKey ?? currentFilterKey;\n    }\n\n    debugPrint(\n      \"🔍 [ProductGridWidget _buildProductStream] Applying Sort: ${currentSortOption.label}, Filter: $currentFilterKey\",\n    );\n    debugPrint(\"🔍 فلتر النوع: $currentFilterKey\");\n    debugPrint(\n      \"🔍 نوع النظام: ${currentFilterKey.contains('_') && currentFilterKey != 'all_items' ? 'نظام جديد (ID-based)' : 'نظام قديم (typeItem)'}\",\n    );\n    debugPrint(\"🔍 appName: ${FirebaseX.appName}\");\n    debugPrint(\"🔍 itemsCollection: ${FirebaseX.itemsCollection}\");\n    if (currentFilterKey.contains('_') && currentFilterKey != 'all_items') {\n      final parts = currentFilterKey.split('_');\n      debugPrint(\"🔍 أجزاء الفلتر: ${parts.join(' | ')}\");\n    }\n\n    // ---!!! 2. بناء الاستعلام الأساسي مع الفلترة !!!---\n    Query<Map<String, dynamic>> query = FirebaseFirestore.instance\n        .collection(FirebaseX.itemsCollection)\n        .where('appName', isEqualTo: FirebaseX.appName);\n\n    // تطبيق فلتر النوع إذا كان محددًا\n    // دعم النظام القديم (typeItem) والنظام الجديد (mainCategoryId/subCategoryId) ونظام البراند ونظام الباركود\n    debugPrint(\n      \"🔍 مقارنة الفلاتر: currentFilterKey='$currentFilterKey' vs allItemsFilterKey='$allItemsFilterKey'\",\n    );\n    if (currentFilterKey != allItemsFilterKey) {\n      // التحقق من نوع الفلتر\n      if (currentFilterKey.startsWith('barcode_')) {\n        // فلترة حسب الباركود\n        final barcodeValue = currentFilterKey.replaceFirst('barcode_', '');\n        debugPrint(\"🎯 تطبيق فلتر الباركود: productBarcode=$barcodeValue\");\n        query = query.where('productBarcode', isEqualTo: barcodeValue);\n      } else if (currentFilterKey.startsWith('original_product_')) {\n        // فلترة حسب منتج أصلي محدد\n        final productId = currentFilterKey.replaceFirst(\n          'original_product_',\n          '',\n        );\n        debugPrint(\"🎯 تطبيق فلتر المنتج الأصلي: originalProductId=$productId\");\n        query = query\n            .where('itemCondition', isEqualTo: 'original')\n            .where('originalProductId', isEqualTo: productId);\n      } else if (currentFilterKey.startsWith('original_company_')) {\n        // فلترة حسب شركة أصلية محددة\n        final companyId = currentFilterKey.replaceFirst(\n          'original_company_',\n          '',\n        );\n        debugPrint(\n          \"🎯 تطبيق فلتر الشركة الأصلية: originalCompanyId=$companyId\",\n        );\n        query = query\n            .where('itemCondition', isEqualTo: 'original')\n            .where('originalCompanyId', isEqualTo: companyId);\n      } else if (currentFilterKey == 'original_brands') {\n        // عرض جميع المنتجات الأصلية\n        debugPrint(\"🎯 تطبيق فلتر جميع المنتجات الأصلية\");\n        query = query.where('itemCondition', isEqualTo: 'original');\n      } else if (currentFilterKey.startsWith('main_') ||\n          currentFilterKey.startsWith('sub_')) {\n        // نظام الأقسام المحسن الجديد\n        try {\n          final filterController = Get.find<EnhancedCategoryFilterController>();\n\n          // الحصول على معرفات الأقسام مباشرة من الكونترولر\n          final mainCategoryId = filterController.selectedMainCategoryId.value;\n          final subCategoryId = filterController.selectedSubCategoryId.value;\n\n          debugPrint(\"🎯 تطبيق فلتر النظام المحسن:\");\n          debugPrint(\"   - القسم الرئيسي: '$mainCategoryId'\");\n          debugPrint(\"   - القسم الفرعي: '$subCategoryId'\");\n          debugPrint(\"   - مفتاح الفلتر: '$currentFilterKey'\");\n\n          // تطبيق فلتر القسم الفرعي أولاً إذا كان موجوداً وغير فارغ\n          if (subCategoryId.isNotEmpty && subCategoryId != 'all') {\n            query = query.where('subCategoryId', isEqualTo: subCategoryId);\n            debugPrint(\"✅ تم تطبيق فلتر القسم الفرعي: '$subCategoryId'\");\n          } else if (mainCategoryId.isNotEmpty && mainCategoryId != 'all') {\n            query = query.where('mainCategoryId', isEqualTo: mainCategoryId);\n            debugPrint(\"✅ تم تطبيق فلتر القسم الرئيسي: '$mainCategoryId'\");\n          } else {\n            debugPrint(\"⚠️ لا توجد معرفات أقسام صالحة للفلترة\");\n          }\n        } catch (e) {\n          debugPrint(\"❌ خطأ في تطبيق فلتر الأقسام المحسن: $e\");\n        }\n      } else {\n        // النظام القديم: typeItem\n        debugPrint(\"🎯 تطبيق فلتر النظام القديم: typeItem=$currentFilterKey\");\n        query = query.where('typeItem', isEqualTo: currentFilterKey);\n      }\n    } else {\n      debugPrint(\"🎯 لا توجد فلاتر محددة - سيتم عرض جميع المنتجات\");\n    }\n\n    // ---!!! 3. تطبيق الترتيب المطلوب !!!---\n    if (!skipSort) {\n      // تجنب الترتيب المعقد عندما نطبق فلاتر أقسام لتجنب مشاكل الفهارس\n      bool hasSpecificCategoryFilter =\n          currentFilterKey.startsWith('main_') ||\n          currentFilterKey.startsWith('sub_') ||\n          currentFilterKey.startsWith('barcode_') ||\n          currentFilterKey.startsWith('original_');\n\n      if (!hasSpecificCategoryFilter && currentFilterKey == allItemsFilterKey) {\n        // تطبيق الترتيب فقط للاستعلامات العامة\n        debugPrint(\n          \"--> تطبيق الترتيب: ${currentSortOption.field}, descending: ${currentSortOption.descending}\",\n        );\n        try {\n          query = query.orderBy(\n            currentSortOption.field,\n            descending: currentSortOption.descending,\n          );\n          debugPrint(\"✅ تم تطبيق الترتيب بنجاح\");\n        } catch (e) {\n          debugPrint(\"❌ خطأ في تطبيق الترتيب: $e\");\n        }\n      } else {\n        debugPrint(\"--> تخطي الترتيب للفلاتر المحددة لتجنب مشاكل الفهارس\");\n      }\n    } else {\n      debugPrint(\"--> تخطي الترتيب تماماً (إعادة محاولة)\");\n    }\n\n    // تطبيق limit وإرجاع الـ Stream\n    final finalQuery = query.limit(50);\n    debugPrint(\"🔍 الاستعلام النهائي جاهز للتنفيذ مع حد أقصى 50 منتج\");\n    debugPrint(\"📊 معايير الفلترة المطبقة:\");\n    debugPrint(\n      \"   - الترتيب: ${currentSortOption.field} (${currentSortOption.descending ? 'تنازلي' : 'تصاعدي'})\",\n    );\n    debugPrint(\"   - الفلتر: $currentFilterKey\");\n    debugPrint(\"═══════════════════════════════════════════════════\");\n\n    return finalQuery.snapshots();\n  }\n\n  // دالة لعرض قائمة السياق للأدمن (مثال مبسط)\n  // --- 1. عرض قائمة السياق للأدمن ---\n  Future<void> _showAdminContextMenu(\n    BuildContext context,\n    TapDownDetails details,\n    ItemModel item,\n    GetStreamBuildBoxOfItemController controller,\n  ) async {\n    if (!_isAdmin) return;\n\n    final RenderBox overlay =\n        Overlay.of(context).context.findRenderObject() as RenderBox;\n    final RelativeRect position = RelativeRect.fromRect(\n      details.globalPosition & const Size(40, 40), // منطقة صغيرة حول نقطة النقر\n      Offset.zero & overlay.size,\n    );\n\n    final String? selectedValue = await showMenu<String>(\n      context: context,\n      position: position,\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10.0)),\n      elevation: 8.0,\n      items: <PopupMenuEntry<String>>[\n        PopupMenuItem<String>(\n          value: 'edit_name',\n          child: const ListTile(\n            leading: Icon(Icons.edit_outlined, size: 20),\n            title: Text('تعديل الاسم'),\n            dense: true,\n            contentPadding: EdgeInsets.zero, // إزالة الحشو الداخلي\n          ),\n        ),\n        PopupMenuItem<String>(\n          value: 'edit_price',\n          child: const ListTile(\n            leading: Icon(Icons.price_change_outlined, size: 20),\n            title: Text('تعديل السعر'),\n            dense: true,\n            contentPadding: EdgeInsets.zero,\n          ),\n        ),\n        PopupMenuItem<String>(\n          value: 'add_as_offer',\n          child: ListTile(\n            leading: Icon(Icons.local_offer_outlined, color: Colors.blue[700]),\n            title: Text(\n              'إضافة كعرض',\n              style: TextStyle(color: Colors.blue[700]),\n            ), // <<-- تعريب\n            dense: true,\n            contentPadding: EdgeInsets.zero,\n          ),\n        ),\n        const PopupMenuDivider(),\n        PopupMenuItem<String>(\n          value: 'delete',\n          child: ListTile(\n            leading: Icon(\n              Icons.delete_outline,\n              color: Colors.red[700],\n              size: 20,\n            ),\n            title: Text('حذف المنتج', style: TextStyle(color: Colors.red[700])),\n            dense: true,\n            contentPadding: EdgeInsets.zero,\n          ),\n        ),\n      ],\n    );\n\n    // ---!!! هنا يتم استدعاء الدوال بناءً على اختيار الأدمن !!!---\n    switch (selectedValue) {\n      case 'edit_name':\n        // استدعاء دالة عرض مربع حوار تعديل الاسم\n        _showEditDialog(context, controller, item, isEditingName: true);\n        break;\n      case 'edit_price':\n        // استدعاء دالة عرض مربع حوار تعديل السعر\n        _showEditDialog(context, controller, item, isEditingName: false);\n        break;\n      case 'add_as_offer':\n        // استدعاء دالة عرض مربع حوار إضافة العرض\n        _showAddOfferDialog(context, item);\n        break;\n      case 'delete':\n        // استدعاء دالة عرض مربع حوار تأكيد الحذف\n        _showDeleteConfirmationDialog(context, item.id);\n        break;\n      default:\n        debugPrint(\"Admin context menu dismissed.\");\n        break;\n    }\n    // ---------------------------------------------------------\n  }\n\n  // ---!!! (جديد) دالة عرض مربع حوار إضافة العرض !!!---\n  void _showAddOfferDialog(BuildContext context, ItemModel item) {\n    // متحكمات محلية للحقول الجديدة\n    final TextEditingController offerPriceController = TextEditingController();\n    // السعر القديم يمكن أخذه مباشرة من المنتج\n    final double oldPrice = item.price;\n    final TextEditingController rateController =\n        TextEditingController(); // اختياري\n    final Rxn<DateTime> expiryDate = Rxn<DateTime>(\n      null,\n    ); // لتاريخ الانتهاء (تفاعلي)\n\n    // لحساب نسبة الخصم تلقائياً\n    void calculateRate() {\n      final int? newPrice = int.tryParse(offerPriceController.text.trim());\n      if (newPrice != null && oldPrice > 0 && newPrice < oldPrice) {\n        final double discount = ((oldPrice - newPrice) / oldPrice) * 100;\n        rateController.text = discount.toStringAsFixed(0); // نسبة صحيحة\n      } else {\n        rateController.text = ''; // مسح النسبة إذا كان السعر غير صالح\n      }\n    }\n\n    // إضافة مستمع لتحديث النسبة عند تغيير السعر\n    offerPriceController.addListener(calculateRate);\n\n    Get.defaultDialog(\n      title: \"إضافة المنتج كعرض\",\n      titleStyle: const TextStyle(fontWeight: FontWeight.bold),\n      contentPadding: const EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n      // جعل مربع الحوار قابل للتمرير\n      content: SingleChildScrollView(\n        child: Column(\n          mainAxisSize: MainAxisSize.min, // لتجنب أخذ ارتفاع الشاشة كاملة\n          children: [\n            Text(\"منتج: ${item.name}\", style: const TextStyle(fontSize: 16)),\n            const SizedBox(height: 5),\n            Text(\"السعر الأصلي: $oldPrice ${FirebaseX.currency}\"),\n            const Divider(height: 20),\n\n            // --- حقل السعر الجديد للعرض (إجباري) ---\n            TextFormField(\n              controller: offerPriceController,\n              decoration: InputDecoration(\n                labelText: \"سعر العرض *\",\n                hintText: \"أدخل السعر بعد الخصم\",\n                prefixIcon: Icon(Icons.local_offer_outlined, size: 18),\n                border: OutlineInputBorder(\n                  borderRadius: BorderRadius.circular(10),\n                ),\n              ),\n              keyboardType: TextInputType.number,\n              inputFormatters: [\n                FilteringTextInputFormatter.digitsOnly,\n              ], // السماح بالأرقام فقط\n              validator: (value) {\n                if (value == null || value.trim().isEmpty) {\n                  return 'سعر العرض مطلوب';\n                }\n                final int? price = int.tryParse(value.trim());\n                if (price == null || price <= 0) {\n                  return 'أدخل سعراً صحيحاً أكبر من صفر';\n                }\n                if (price >= oldPrice) {\n                  return 'سعر العرض يجب أن يكون أقل من السعر الأصلي';\n                } // تحقق إضافي\n                return null;\n              },\n            ),\n            const SizedBox(height: 10),\n\n            // --- حقل نسبة الخصم (اختياري ويتم حسابه) ---\n            TextFormField(\n              controller: rateController,\n              decoration: InputDecoration(\n                labelText: \"نسبة الخصم (%)\",\n                prefixIcon: Icon(Icons.percent, size: 18),\n                border: OutlineInputBorder(\n                  borderRadius: BorderRadius.circular(10),\n                ),\n                enabled: false, // اجعله غير قابل للتعديل، فقط للقراءة\n              ),\n              keyboardType: TextInputType.number,\n            ),\n            const SizedBox(height: 15),\n\n            // --- (اختياري) حقل اختيار تاريخ الانتهاء ---\n            Obx(\n              () => ListTile(\n                // استخدام Obx لتحديث النص عند اختيار تاريخ\n                leading: const Icon(Icons.calendar_today_outlined),\n                title: Text(\n                  expiryDate.value == null\n                      ? \"تحديد تاريخ انتهاء العرض (اختياري)\"\n                      : \"ينتهي في: ${DateFormat('yyyy/MM/dd').format(expiryDate.value!)}\",\n                ),\n                trailing:\n                    expiryDate.value != null\n                        ? IconButton(\n                          icon: Icon(Icons.clear, size: 20),\n                          onPressed:\n                              () => expiryDate.value = null, // مسح التاريخ\n                        )\n                        : null,\n                onTap: () async {\n                  DateTime? pickedDate = await showDatePicker(\n                    context: context,\n                    initialDate:\n                        expiryDate.value ??\n                        DateTime.now().add(\n                          const Duration(days: 7),\n                        ), // الافتراضي بعد أسبوع\n                    firstDate: DateTime.now(), // لا يمكن اختيار تاريخ في الماضي\n                    lastDate: DateTime.now().add(\n                      const Duration(days: 365 * 2),\n                    ), // سنتين كحد أقصى مثلاً\n                  );\n                  if (pickedDate != null) {\n                    expiryDate.value = pickedDate;\n                  }\n                },\n              ),\n            ),\n            // ---------------------------------------\n          ],\n        ),\n      ),\n      confirm: ElevatedButton(\n        style: ElevatedButton.styleFrom(backgroundColor: Colors.blue[700]),\n        onPressed: () {\n          // التحقق من صحة سعر العرض\n          final int? newPrice = int.tryParse(offerPriceController.text.trim());\n          if (newPrice == null || newPrice <= 0 || newPrice >= oldPrice) {\n            // يمكنك عرض Snackbar أو التعامل مع الخطأ هنا\n            Get.snackbar(\n              \"خطأ\",\n              \"الرجاء إدخال سعر عرض صحيح أقل من السعر الأصلي.\",\n              snackPosition: SnackPosition.BOTTOM,\n              backgroundColor: Colors.orange,\n            );\n            return;\n          }\n          // جمع البيانات النهائية\n          final offerData = {\n            'newPrice': newPrice,\n            'oldPrice': oldPrice,\n            'rate':\n                int.tryParse(rateController.text.trim()) ??\n                0, // استخدم 0 إذا كان فارغاً\n            'expiryDate': expiryDate.value,\n          };\n\n          Get.back(); // أغلق مربع الحوار\n          _saveAsOffer(item, offerData); // استدعاء دالة الحفظ\n        },\n        child: const Text(\"إنشاء العرض\"), // <<-- تعريب\n      ),\n      cancel: TextButton(\n        onPressed: () => Get.back(),\n        child: const Text(\"إلغاء\"), // <<-- تعريب\n      ),\n      radius: 15,\n    );\n\n    // التخلص من المستمع عند إغلاق مربع الحوار\n    // (يمكن وضعه في onClose الخاص بالحوار إذا كان Get.dialog يدعم ذلك)\n    // أو استخدام GetxController للحوار لإدارة المتحكمات بشكل أفضل\n  }\n\n  // ---!!! (جديد) دالة لحفظ المنتج كعرض في Firestore !!!---\n  Future<void> _saveAsOffer(\n    ItemModel originalItem,\n    Map<String, dynamic> offerDetails,\n  ) async {\n    final String newOfferId = const Uuid().v4(); // ID جديد للعرض\n    final String? currentUserId = FirebaseAuth.instance.currentUser?.uid;\n    if (currentUserId == null) {\n      _showSnackbar('خطأ', 'لم يتم تسجيل الدخول.', Colors.red);\n      return;\n    }\n\n    try {\n      // بناء نموذج العرض الجديد\n      final OfferModel newOffer = OfferModel(\n        id: newOfferId, // ID جديد\n        name: originalItem.name, // نسخ البيانات من المنتج الأصلي\n        description: originalItem.description,\n        imageUrl: originalItem.imageUrl,\n        manyImages: originalItem.manyImages,\n        videoUrl: originalItem.videoUrl,\n        appName: originalItem.appName,\n        uidAdd: currentUserId, // معرف من قام بالإضافة\n        // إضافة بيانات العرض\n        price: offerDetails['newPrice'], // السعر الجديد\n        oldPrice: offerDetails['oldPrice'],\n        rate: offerDetails['rate'],\n        // يمكنك إضافة حقل لتاريخ الانتهاء إذا اخترت استخدامه\n        // expiryTimestamp: offerDetails['expiryDate'] != null ? Timestamp.fromDate(offerDetails['expiryDate']) : null,\n        // ربط بالعنصر الأصلي (اختياري)\n        originalItemId: originalItem.id,\n      );\n\n      // حفظ العرض في مجموعة العروض\n      await FirebaseFirestore.instance\n          .collection(\n            FirebaseX.offersCollection,\n          ) // تأكد من أن هذا هو اسم مجموعة العروض الصحيح\n          .doc(newOfferId)\n          .set(newOffer.toMap());\n\n      _showSnackbar(\n        'نجاح',\n        'تمت إضافة المنتج \"${originalItem.name}\" كعرض بنجاح.',\n        Colors.green,\n      );\n    } catch (e) {\n      debugPrint(\"Error saving offer: $e\");\n      _showSnackbar('خطأ', 'حدث خطأ أثناء حفظ العرض.', Colors.red);\n    }\n  }\n\n  // دالة Snackbar (ضعها هنا أو يفضل في المتحكم)\n  void _showSnackbar(String title, String message, Color backgroundColor) {\n    if (Get.isSnackbarOpen) {\n      Get.back();\n    }\n    Get.snackbar(\n      title,\n      message,\n      snackPosition: SnackPosition.BOTTOM,\n      backgroundColor: backgroundColor,\n      colorText: Colors.white,\n      margin: const EdgeInsets.all(10),\n      borderRadius: 8,\n    );\n  }\n\n  // دالة مساعدة لتحديد اللون بناءً على درجة الجودة\n  Color _getQualityColor(int? grade) {\n    if (grade == null)\n      return Colors.grey.shade400; // لون افتراضي إذا لم تتوفر الدرجة\n    if (grade >= 1 && grade <= 4) {\n      return Colors.green.shade600; // أخضر للدرجات 1-4\n    } else if (grade >= 5 && grade <= 7) {\n      return Colors.amber.shade700; // أصفر/برتقالي للدرجات 5-7\n    } else {\n      return Colors.red.shade600; // أحمر للدرجات 8-10\n    }\n  }\n\n  // دالة عرض حقل تعديل النص (كما في الكود السابق، لكن تحتاج لوضعها داخل مربع حوار غالباً)\n  Widget _buildEditTextField(\n    TextEditingController controller,\n    String label,\n    TextInputType inputType,\n  ) {\n    return Padding(\n      padding: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 16.0),\n      child: SizedBox(\n        width: 250, // عرض مناسب لمربع الحوار\n        child: TextField(\n          controller: controller,\n          decoration: InputDecoration(\n            labelText: label,\n            border: OutlineInputBorder(borderRadius: BorderRadius.circular(8)),\n            isDense: true,\n            contentPadding: const EdgeInsets.symmetric(\n              horizontal: 10,\n              vertical: 12,\n            ),\n          ),\n          keyboardType: inputType,\n          autofocus: true, // تركيز تلقائي عند الظهور\n        ),\n      ),\n    );\n  }\n\n  // مربع حوار لتأكيد الحذف\n  void _showDeleteConfirmationDialog(BuildContext context, String itemId) {\n    final logic =\n        Get.find<GetStreamBuildBoxOfItemController>(); // احصل على المتحكم\n\n    Get.defaultDialog(\n      title: \"تأكيد الحذف\", // <<-- تعريب\n      titleStyle: TextStyle(\n        fontWeight: FontWeight.bold,\n        color: Colors.red[700],\n      ),\n      middleText:\n          \"هل أنت متأكد من رغبتك في حذف هذا المنتج نهائيًا؟ لا يمكن التراجع عن هذا الإجراء.\", // <<-- تعريب\n      middleTextStyle: const TextStyle(fontSize: 15),\n      confirm: ElevatedButton.icon(\n        icon: const Icon(Icons.delete_forever),\n        label: const Text(\"حذف\"), // <<-- تعريب\n        style: ElevatedButton.styleFrom(backgroundColor: Colors.red[600]),\n        onPressed: () async {\n          Get.back(); // إغلاق مربع الحوار أولاً\n          try {\n            await FirebaseFirestore.instance\n                .collection(FirebaseX.itemsCollection)\n                .doc(itemId)\n                .delete();\n            logic.showSnackbar(\n              'نجاح',\n              'تم حذف المنتج بنجاح.',\n              Colors.green,\n            ); // <<-- تعريب\n          } catch (e) {\n            logic.showSnackbar(\n              'خطأ',\n              'فشل حذف المنتج.',\n              Colors.red,\n            ); // <<-- تعريب\n            debugPrint(\"Delete Error: $e\");\n          }\n        },\n      ),\n      cancel: TextButton(\n        onPressed: () => Get.back(),\n        child: const Text(\"إلغاء\"), // <<-- تعريب\n      ),\n      radius: 10.0,\n    );\n  }\n\n  // ... (باقي الكود الخاص بـ ProductGridWidget كما هو) ...\n  // ... _showAdminContextMenu, _buildEditTextField, _showDeleteConfirmationDialog ...\n  // ... build method ...\n  @override\n  Widget build(BuildContext context) {\n    return GetBuilder<EnhancedCategoryFilterController>(\n      init: EnhancedCategoryFilterController(),\n      builder: (controller) {\n        final hi = MediaQuery.of(context).size.height;\n        final wi = MediaQuery.of(context).size.width;\n        final GetStreamBuildBoxOfItemController logic = Get.put(\n          GetStreamBuildBoxOfItemController(),\n        );\n        Get.put(FavoriteController());\n\n        debugPrint(\n          \"🔄 إعادة بناء ProductGridWidget - الفلتر المطبق: ${controller.getFilterKey()}\",\n        );\n\n        return StreamBuilder<QuerySnapshot<Map<String, dynamic>>>(\n          stream:\n              _buildProductStream(), // <-- الدالة تستخدم الترتيب من Get.find الآن\n          builder: (context, snapshot) {\n            // ... (الكود كما هو لمعالجة loading, error, empty, grid building) ...\n            if (snapshot.hasError) {\n              debugPrint(\"❌ Product Grid Error: ${snapshot.error}\");\n              debugPrint(\"❌ Stack trace: ${snapshot.stackTrace}\");\n\n              // تحليل نوع الخطأ وإعطاء رسالة مناسبة\n              String errorMessage = 'خطأ غير معروف';\n              if (snapshot.error.toString().contains('requires an index')) {\n                errorMessage = 'خطأ في قاعدة البيانات - يتم إصلاحه...';\n                debugPrint(\n                  \"🔧 خطأ الفهرس المكتشف - جاري إعادة المحاولة بدون ترتيب\",\n                );\n              } else if (snapshot.error.toString().contains('permission')) {\n                errorMessage = 'خطأ في الصلاحيات';\n              } else if (snapshot.error.toString().contains('network')) {\n                errorMessage = 'خطأ في الاتصال بالشبكة';\n              }\n\n              return Center(\n                child: Padding(\n                  padding: const EdgeInsets.all(20.0),\n                  child: Column(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      Icon(\n                        Icons.error_outline,\n                        color: Colors.red.shade300,\n                        size: 60,\n                      ),\n                      const SizedBox(height: 15),\n                      Text(\n                        errorMessage,\n                        style: TextStyle(\n                          fontSize: 18,\n                          fontWeight: FontWeight.bold,\n                          color: Colors.red.shade700,\n                        ),\n                        textAlign: TextAlign.center,\n                      ),\n                      const SizedBox(height: 8),\n                      Text(\n                        'جاري المحاولة مرة أخرى...',\n                        style: TextStyle(fontSize: 15, color: Colors.grey[600]),\n                        textAlign: TextAlign.center,\n                      ),\n                    ],\n                  ),\n                ),\n              );\n            }\n            if (snapshot.connectionState == ConnectionState.waiting) {\n              // return _buildLoadingGrid(context); // استبدال هذا\n              return _buildShimmerLoadingGrid(\n                context,\n              ); // <-- استخدام دالة Shimmer\n            }\n            final docs = snapshot.data?.docs ?? [];\n            debugPrint(\"🔍 عدد المنتجات المستلمة: ${docs.length}\");\n            if (docs.isNotEmpty) {\n              debugPrint(\"🔍 أول منتج: ${docs.first.data()}\");\n            }\n            if (docs.isEmpty) {\n              debugPrint(\"❌ لا توجد منتجات تطابق الاستعلام الحالي\");\n\n              // إضافة تحقق من وجود البيانات في Firebase بصفة عامة\n              FirebaseFirestore.instance\n                  .collection(FirebaseX.itemsCollection)\n                  .where('appName', isEqualTo: FirebaseX.appName)\n                  .limit(5)\n                  .get()\n                  .then((querySnapshot) {\n                    debugPrint(\n                      \"🔍 عدد المنتجات الإجمالي في التطبيق: ${querySnapshot.docs.length}\",\n                    );\n                    if (querySnapshot.docs.isNotEmpty) {\n                      final sampleItem = querySnapshot.docs.first.data();\n                      debugPrint(\"🔍 مثال على منتج في قاعدة البيانات:\");\n                      debugPrint(\n                        \"   - mainCategoryId: ${sampleItem['mainCategoryId']}\",\n                      );\n                      debugPrint(\n                        \"   - subCategoryId: ${sampleItem['subCategoryId']}\",\n                      );\n                      debugPrint(\"   - typeItem: ${sampleItem['typeItem']}\");\n                      debugPrint(\n                        \"   - itemCondition: ${sampleItem['itemCondition']}\",\n                      );\n                    }\n                  });\n\n              return _buildEmptyStateWidget(\n                context,\n              ); // <-- استخدام دالة الحالة الفارغة المحسنة\n            }\n            // بناء الشبكة\n            return Padding(\n              padding: const EdgeInsets.symmetric(horizontal: 7),\n              child: GridView.builder(\n                // NeverScrollableScrollPhysics لأن الشبكة داخل ListView غالباً\n                physics: const NeverScrollableScrollPhysics(),\n                shrinkWrap:\n                    true, // لتناسب حجم المحتوى داخل الـ ListView الرئيسي\n                gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n                  crossAxisCount: 2, // عدد الأعمدة\n                  // تحديث childAspectRatio بعد تقليل حجم الصورة بنسبة 8%\n                  childAspectRatio:\n                      (wi * 0.5) /\n                      (hi * 0.31), // تقليل من 0.338 لتتناسب مع الحجم الجديد\n                  crossAxisSpacing: 10, // المسافة بين الأعمدة\n                  mainAxisSpacing: 10, // المسافة بين الصفوف\n                ),\n                itemCount: docs.length,\n                itemBuilder: (context, index) {\n                  try {\n                    // تأكد من معالجة الخطأ إذا فشل fromMap\n                    final item = ItemModel.fromMap(\n                      docs[index].data(),\n                      docs[index].id,\n                    );\n                    return _buildItemCard(context, item, wi, hi, logic);\n                  } catch (e, s) {\n                    debugPrint(\"Error parsing item at index $index: $e\\n$s\");\n                    // عرض بطاقة خطأ واضحة للمستخدم\n                    return Card(\n                      color: Colors.red[50],\n                      child: Center(\n                        child: Padding(\n                          padding: const EdgeInsets.all(8.0),\n                          child: Column(\n                            mainAxisSize: MainAxisSize.min,\n                            children: [\n                              Icon(\n                                Icons.warning_amber_rounded,\n                                color: Colors.red[400],\n                                size: 30,\n                              ),\n                              SizedBox(height: 5),\n                              Text(\n                                'خطأ في عرض المنتج',\n                                textAlign: TextAlign.center,\n                                style: TextStyle(color: Colors.red[700]),\n                              ), // <<-- تعريب\n                            ],\n                          ),\n                        ),\n                      ),\n                    );\n                  }\n                },\n              ),\n            );\n          },\n        );\n      },\n    );\n  }\n\n  // ---!!! (جديد) بناء هيكل تحميل واحد بـ Shimmer !!!---\n  Widget _buildProductSkeletonCard(BuildContext context) {\n    final wi = MediaQuery.of(context).size.width;\n    final cardWidth = wi * 0.5 - 12; // عرض تقريبي مع الأخذ بالتباعد\n\n    return Card(\n      elevation: 2.0,\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n      clipBehavior: Clip.antiAlias,\n      child: Column(\n        crossAxisAlignment: CrossAxisAlignment.stretch,\n        children: [\n          // منطقة الصورة - حجم ثابت مقلل بنسبة 8%\n          SizedBox(\n            height: MediaQuery.of(context).size.height * 0.1656,\n            child: Container(color: Colors.white),\n          ),\n          // منطقة النص والأزرار\n          Expanded(\n            child: Padding(\n              padding: const EdgeInsets.fromLTRB(8, 8, 8, 4),\n              child: Column(\n                crossAxisAlignment: CrossAxisAlignment.start,\n                mainAxisAlignment: MainAxisAlignment.spaceBetween,\n                children: [\n                  Container(\n                    width: cardWidth * 0.8,\n                    height: 12,\n                    color: Colors.white,\n                  ), // شريط لاسم المنتج\n                  SizedBox(height: 5),\n                  Container(\n                    width: cardWidth * 0.5,\n                    height: 10,\n                    color: Colors.white,\n                  ), // شريط للسعر/أزرار\n                ],\n              ),\n            ),\n          ),\n        ],\n      ),\n    );\n  }\n\n  // ---!!! (جديد) بناء شبكة هياكل التحميل بـ Shimmer !!!---\n  Widget _buildShimmerLoadingGrid(BuildContext context) {\n    final wi = MediaQuery.of(context).size.width;\n    final hi = MediaQuery.of(context).size.height;\n\n    return Padding(\n      padding: const EdgeInsets.symmetric(horizontal: 7),\n      child: Shimmer.fromColors(\n        // <-- تغليف الشبكة بالشيمر\n        baseColor: Colors.grey[300]!,\n        highlightColor: Colors.grey[100]!,\n        child: GridView.builder(\n          physics: const NeverScrollableScrollPhysics(),\n          shrinkWrap: true,\n          gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(\n            crossAxisCount: 2,\n            childAspectRatio:\n                (wi * 0.5) /\n                (hi * 0.31), // نفس النسبة المحدثة بعد تقليل الصورة 8%\n            crossAxisSpacing: 10,\n            mainAxisSpacing: 10,\n          ),\n          itemCount: 6, // عرض 6 هياكل تحميل\n          itemBuilder:\n              (context, index) =>\n                  _buildProductSkeletonCard(context), // بناء الهيكل\n        ),\n      ),\n    );\n  }\n\n  // ---!!! (جديد) بناء واجهة \"لا توجد نتائج\" المحسنة !!!---\n  Widget _buildEmptyStateWidget(BuildContext context) {\n    // معرفة هل تم تطبيق فلتر أم لا\n    bool isFiltered = false;\n    try {\n      final filterController = Get.find<EnhancedCategoryFilterController>();\n      isFiltered = filterController.hasActiveFilter.value;\n    } catch (e) {\n      isFiltered =\n          (widget.selectedSubtypeKey != null &&\n              widget.selectedSubtypeKey != allItemsFilterKey);\n    }\n\n    return Center(\n      child: Padding(\n        padding: const EdgeInsets.symmetric(vertical: 50.0, horizontal: 20.0),\n        child: Column(\n          mainAxisSize: MainAxisSize.min,\n          children: [\n            Icon(\n              isFiltered\n                  ? Icons.filter_alt_off_outlined\n                  : Icons.shelves, // أيقونة مختلفة للفلتر\n              size: 70,\n              color: Colors.grey[400],\n            ),\n            const SizedBox(height: 20),\n            Text(\n              isFiltered\n                  ? 'لا توجد منتجات تطابق هذا الفلتر'\n                  : 'لا توجد منتجات بعد!', // <<-- تعريب\n              style: TextStyle(\n                fontSize: 18,\n                fontWeight: FontWeight.w500,\n                color: Colors.grey[700],\n              ),\n              textAlign: TextAlign.center,\n            ),\n            const SizedBox(height: 10),\n            Text(\n              isFiltered\n                  ? 'جرب اختيار نوع آخر أو قم بإزالة الفلتر.'\n                  : 'كن أول من يرى جديدنا!', // <<-- تعريب\n              style: TextStyle(fontSize: 15, color: Colors.grey[600]),\n              textAlign: TextAlign.center,\n            ),\n            // إضافة زر مسح الفلاتر فقط إذا كان هناك فلتر مطبق\n            if (isFiltered) ...[\n              const SizedBox(height: 25),\n              OutlinedButton.icon(\n                icon: const Icon(Icons.clear_all, size: 18),\n                label: const Text(\"عرض كل المنتجات\"), // <<-- تعريب\n                style: OutlinedButton.styleFrom(\n                  side: BorderSide(\n                    color: Theme.of(context).colorScheme.primary,\n                  ),\n                  foregroundColor: Theme.of(context).colorScheme.primary,\n                  padding: EdgeInsets.symmetric(horizontal: 20, vertical: 10),\n                ),\n                onPressed: () {\n                  // استدعاء دالة إعادة التعيين في متحكم الفلتر\n                  try {\n                    final filterController =\n                        Get.find<EnhancedCategoryFilterController>();\n                    filterController.resetFilters();\n                  } catch (e) {\n                    debugPrint(\"خطأ في إعادة تعيين الفلاتر: $e\");\n                  }\n                },\n              ),\n            ],\n          ],\n        ),\n      ),\n    );\n  }\n\n  // بناء بطاقة المنتج الفردي\n\n  // بناء بطاقة المنتج الفردي (مع إضافة شريط الحالة والجودة)\n  // --- بناء بطاقة المنتج الفردي ---\n  Widget _buildItemCard(\n    BuildContext context,\n    ItemModel item,\n    double wi,\n    double hi,\n    GetStreamBuildBoxOfItemController controller,\n  ) {\n    final theme = Theme.of(context); // الحصول على الثيم لاستخدامه\n    final FavoriteController favoriteCtrl =\n        Get.find<FavoriteController>(); // <-- مهم هنا\n\n    // --- 1. تحضير نص الحالة والجودة واللون ---\n    String conditionText = '';\n    if (item.itemCondition == 'original') {\n      conditionText = 'براند'; // تغيير من \"أصلي\" إلى \"براند\"\n    } else if (item.itemCondition == 'commercial') {\n      conditionText = 'تجاري';\n    }\n    // تحضير نص درجة الجودة \"د.X\"\n    String qualityText =\n        item.qualityGrade != null ? 'د.${item.qualityGrade}' : '';\n    // دمج النصين بمسافة (بدون فاصل '|') فقط إذا كان كلاهما موجودًا\n    String combinedStatusText = conditionText;\n    if (conditionText.isNotEmpty && qualityText.isNotEmpty) {\n      combinedStatusText += ' $qualityText'; // إضافة مسافة بينهما\n    } else {\n      // إذا كان الأول فارغًا، أضف الثاني مباشرةً (أو العكس)\n      combinedStatusText += qualityText;\n    }\n    // الحصول على لون الخلفية المناسب للدرجة\n    Color qualityColor = _getQualityColor(\n      item.qualityGrade,\n    ); // استدعاء الدالة المساعدة\n    // -------------------------------------\n\n    // --- 2. بناء البطاقة الرئيسية ---\n    return Card(\n      elevation: 2.5, // زيادة طفيفة للظل\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),\n      clipBehavior: Clip.antiAlias, // ضروري لـ Stack والحواف الدائرية\n      child: InkWell(\n        onTap: () {\n          debugPrint(\"Navigating to details for ${item.name} (ID: ${item.id})\");\n          // انتقل إلى شاشة التفاصيل\n          Get.to(() => DetailsOfItemScreen(item: item));\n        },\n        // استدعاء قائمة السياق عند الضغط (لأسفل أو مطولاً) إذا كان المستخدم أدمن\n        onTapDown: (details) {\n          if (_isAdmin)\n            _showAdminContextMenu(context, details, item, controller);\n        },\n        onLongPress: () {\n          if (_isAdmin) {\n            final center = Offset(wi / 2, hi / 2);\n            _showAdminContextMenu(\n              context,\n              TapDownDetails(globalPosition: center),\n              item,\n              controller,\n            );\n          }\n        },\n        child: Column(\n          crossAxisAlignment:\n              CrossAxisAlignment.stretch, // لجعل العناصر الفرعية تملأ العرض\n          children: [\n            // --- 3. الجزء العلوي: الصورة مع الشريط ---\n            SizedBox(\n              height:\n                  hi *\n                  0.1656, // تحديد حجم ثابت للصورة (تقليل 8% من الحجم السابق)\n              child: Stack(\n                fit: StackFit.expand, // لجعل الصورة تملأ المساحة المتاحة\n                children: [\n                  // --- الصورة باستخدام Hero و CachedNetworkImage ---\n                  // الصورة ستملأ المساحة المتاحة لها بفضل Positioned.fill ضمنياً\n                  _buildItemImage(item, wi, hi), // بناء الصورة\n                  // --- أيقونة الفيديو (إذا كان موجوداً) ---\n                  if (item.videoUrl != null && item.videoUrl != 'noVideo')\n                    Positioned(\n                      top: 8,\n                      left: 8,\n                      child: Container(\n                        padding: const EdgeInsets.all(4),\n                        decoration: BoxDecoration(\n                          color: Colors.black.withOpacity(0.6),\n                          shape: BoxShape.circle,\n                        ),\n                        child: const Icon(\n                          Icons.play_circle_fill,\n                          size: 20,\n                          color: Colors.white,\n                        ),\n                      ),\n                    ),\n\n                  // --- شريط الحالة والجودة (يظهر فقط إذا كان هناك نص) ---\n                  if (combinedStatusText\n                      .trim()\n                      .isNotEmpty) // تحقق أن النص غير فارغ بعد إزالة المسافات\n                    Positioned(\n                      top: 6, // المسافة من الحافة العلوية\n                      right: 6, // المسافة من الحافة اليمنى\n                      child: IgnorePointer(\n                        // لمنع هذا الشريط من اعتراض نقرات المستخدم على البطاقة\n                        child: Container(\n                          padding: const EdgeInsets.symmetric(\n                            horizontal: 7,\n                            vertical: 3,\n                          ), // تباعد داخلي حول النص\n                          decoration: BoxDecoration(\n                            color: qualityColor.withOpacity(\n                              0.9,\n                            ), // اللون المحسوب مع شفافية طفيفة\n                            borderRadius: BorderRadius.circular(\n                              6,\n                            ), // حواف دائرية\n                            // إضافة حدود خفيفة إذا أردت (اختياري)\n                            // border: Border.all(color: Colors.white.withOpacity(0.5), width: 0.5),\n                            boxShadow: [\n                              // ظل خفيف لتحسين الوضوح (اختياري)\n                              BoxShadow(\n                                color: Colors.black.withOpacity(0.25),\n                                blurRadius: 4,\n                                offset: Offset(0, 1),\n                              ),\n                            ],\n                          ),\n                          child: Text(\n                            combinedStatusText, // النص النهائي (\"أصلي د.1\", \"تجاري\", \"د.8\", إلخ.)\n                            style: TextStyle(\n                              color: Colors.white, // لون نص أبيض\n                              fontSize: wi * 0.027, // حجم خط صغير ومناسب\n                              fontWeight: FontWeight.bold,\n                            ),\n                            maxLines: 1,\n                            overflow:\n                                TextOverflow\n                                    .ellipsis, // للتعامل مع النص الطويل جدًا (غير محتمل هنا)\n                          ),\n                        ),\n                      ),\n                    ),\n                  // ------------------------------------\n                  Positioned(\n                    top:\n                        combinedStatusText.trim().isNotEmpty\n                            ? 35\n                            : 6, // <--- ضبط الموقع بناءً على وجود الشريط\n                    right: 6,\n                    // استخدام StreamBuilder لمراقبة حالة المفضلة الحالية\n                    child: StreamBuilder<bool>(\n                      stream: favoriteCtrl.isFavoriteStream(\n                        item.id,\n                      ), // الاستماع للمنتج الحالي\n                      builder: (context, favSnapshot) {\n                        // التعامل مع حالات StreamBuilder (اختياري)\n                        // if (favSnapshot.connectionState == ConnectionState.waiting) {\n                        //   return SizedBox(width: 30, height: 30, child: Padding(padding: EdgeInsets.all(8), child: CircularProgressIndicator(strokeWidth: 1.5)));\n                        // }\n                        // إذا كان هناك خطأ في الستريم (نادراً ما يحدث هنا)\n                        // if (favSnapshot.hasError) {\n                        //    return Icon(Icons.error_outline, color: Colors.red[200]);\n                        // }\n                        // الحالة الافتراضية أو عند عدم وجود بيانات أولية\n                        final bool isFavorite =\n                            favSnapshot.data ?? false; // افتراض أنه ليس مفضل\n\n                        return Material(\n                          // استخدام Material لـ InkWell/splash effect\n                          color: Colors.black.withOpacity(\n                            0.3,\n                          ), // خلفية شبه شفافة\n                          borderRadius: BorderRadius.circular(20),\n                          child: InkWell(\n                            borderRadius: BorderRadius.circular(20),\n                            onTap: () {\n                              // استدعاء دالة تبديل المفضلة في المتحكم\n                              favoriteCtrl.toggleFavorite(item.id, isFavorite);\n                            },\n                            child: Padding(\n                              padding: const EdgeInsets.all(6.0), // تباعد داخلي\n                              child: Icon(\n                                // عرض أيقونة مملوءة أو فارغة بناءً على الحالة\n                                isFavorite\n                                    ? Icons.favorite_rounded\n                                    : Icons.favorite_border_rounded,\n                                color:\n                                    isFavorite\n                                        ? Colors.redAccent\n                                        : Colors.white, // ألوان مميزة\n                                size: wi * 0.055, // حجم الأيقونة\n                              ),\n                            ),\n                          ),\n                        );\n                      },\n                    ),\n                  ),\n                ],\n              ),\n            ), // نهاية Stack الصورة\n            // --- 4. الجزء السفلي: الاسم والسعر والأزرار ---\n            Expanded(\n              child: Padding(\n                padding: const EdgeInsets.only(\n                  left: 8,\n                  right: 8,\n                  top: 8,\n                  bottom: 4,\n                ), // زيادة top padding من 6 إلى 8\n                child: Column(\n                  crossAxisAlignment:\n                      CrossAxisAlignment.center, // توسيط المحتوى\n                  mainAxisAlignment:\n                      MainAxisAlignment.spaceBetween, // لتوزيع المساحة\n                  children: [\n                    // اسم المنتج - سطر واحد فقط مع تحسين الوضوح والتميز\n                    Container(\n                      padding: EdgeInsets.symmetric(vertical: 4, horizontal: 6),\n                      decoration: BoxDecoration(\n                        color: Colors.white.withOpacity(0.9),\n                        borderRadius: BorderRadius.circular(8),\n                        boxShadow: [\n                          BoxShadow(\n                            color: Colors.black.withOpacity(0.05),\n                            blurRadius: 4,\n                            offset: Offset(0, 1),\n                          ),\n                        ],\n                      ),\n                      child: Text(\n                        item.name,\n                        style: theme.textTheme.titleSmall?.copyWith(\n                          fontWeight: FontWeight.w700, // زيادة من w600 إلى w700\n                          fontSize:\n                              wi *\n                              0.027, // تقليل من 0.040 إلى 0.036 (تقليل 10%)\n                          height: 1, // زيادة قليلة في تباعد الأسطر\n                          color: theme.textTheme.titleMedium?.color\n                              ?.withOpacity(0.9),\n                          letterSpacing: 0.3, // إضافة تباعد بين الحروف للوضوح\n                        ),\n                        maxLines: 1, // سطر واحد فقط كما طلب المستخدم\n                        overflow:\n                            TextOverflow.ellipsis, // إخفاء النص الزائد بـ ...\n                        textAlign: TextAlign.center, // توسيط النص\n                      ),\n                    ),\n                    // السعر وأزرار +/-\n                    // التأكد من تمرير البيانات الصحيحة (price يجب أن يكون int)\n                    BoxAddAndRemove(\n                      uidItem: item.id,\n                      price: item.price, // <-- تمرير السعر (int)\n                      name: item.name, // <-- تمرير الاسم\n                      isOffer: false,\n                      uidAdd: item.uidAdd, // ليس عرضًا هنا\n                    ),\n                  ],\n                ),\n              ),\n            ), // نهاية الجزء السفلي\n          ],\n        ),\n      ),\n    );\n  }\n\n  // --- (جديد) دالة لعرض مربع حوار التعديل (اسم أو سعر) ---\n  void _showEditDialog(\n    BuildContext context,\n    GetStreamBuildBoxOfItemController controller,\n    ItemModel item, {\n    required bool isEditingName,\n  }) {\n    // تهيئة المتحكم النصي بالقيمة الحالية\n    final editController = TextEditingController(\n      text: isEditingName ? item.name : item.price.toString(),\n    );\n    final String title =\n        isEditingName ? \"تعديل اسم المنتج\" : \"تعديل سعر المنتج\";\n    final String label = isEditingName ? \"الاسم الجديد\" : \"السعر الجديد\";\n    final TextInputType keyboardType =\n        isEditingName\n            ? TextInputType.text\n            : TextInputType.numberWithOptions(\n              decimal: false,\n            ); // استخدام لوحة أرقام للسعر\n\n    Get.defaultDialog(\n      title: title,\n      titlePadding: const EdgeInsets.only(top: 20, bottom: 10),\n      titleStyle: TextStyle(fontWeight: FontWeight.bold, fontSize: 18),\n      contentPadding: const EdgeInsets.symmetric(horizontal: 20),\n      // استخدام Form للتحقق المحتمل\n      content: Form(\n        // يمكنك إضافة GlobalKey<FormState> هنا إذا احتجت للتحقق المعقد\n        child: _buildEditTextField(\n          editController,\n          label,\n          keyboardType,\n        ), // استخدام الدالة لبناء حقل النص\n      ),\n      confirm: ElevatedButton(\n        onPressed: () async {\n          // تمرير القيمة الجديدة للمتحكم الذي يتولى التحديث في Firestore\n          final controllerToUpdate =\n              Get.find<\n                GetStreamBuildBoxOfItemController\n              >(); // العثور على المتحكم مجدداً للتأكد\n          // قم بتحديث القيمة المحلية في المتحكم النصي المؤقت إذا أردت (ليس ضروريًا هنا)\n          if (isEditingName) {\n            controllerToUpdate.nameEditController.text =\n                editController.text; // تحديث متحكم الاسم الرئيسي\n            controllerToUpdate.isEditingName.value =\n                true; // تحديد أننا نعدل الاسم\n            controllerToUpdate.isEditingPrice.value = false;\n          } else {\n            controllerToUpdate.priceEditController.text =\n                editController.text; // تحديث متحكم السعر الرئيسي\n            controllerToUpdate.isEditingPrice.value =\n                true; // تحديد أننا نعدل السعر\n            controllerToUpdate.isEditingName.value = false;\n          }\n          Get.back(); // أغلق مربع الحوار الحالي\n          await controllerToUpdate.confirmEdit(\n            item.id,\n          ); // استدعاء دالة التأكيد في المتحكم الرئيسي\n        },\n        child: const Text(\"حفظ\"), // <<-- تعريب\n      ),\n      cancel: TextButton(\n        onPressed: () {\n          // مسح حالة التعديل إذا تم الإلغاء (اختياري)\n          controller.cancelEditing();\n          Get.back();\n        },\n        child: const Text(\"إلغاء\"), // <<-- تعريب\n      ),\n      radius: 15.0,\n    );\n  }\n\n  Widget _buildItemImage(ItemModel item, double wi, double hi) {\n    // استخدام Hero لتأثير الانتقال السلس عند فتح التفاصيل\n    return Hero(\n      // Tag يجب أن يكون فريدًا لكل عنصر ويرتبط بنفس الـ Tag في شاشة التفاصيل\n      tag: 'item_image_${item.id}',\n      child: CachedNetworkImage(\n        imageUrl: item.imageUrl ?? '', // استخدام رابط فارغ آمن\n        placeholder: (context, url) => Container(color: Colors.grey[200]),\n        errorWidget:\n            (context, url, error) => Container(\n              color: Colors.grey[100],\n              child: const Icon(Icons.broken_image_outlined),\n            ),\n        fit: BoxFit.cover, // تغطية المساحة\n      ),\n    );\n  }\n\n  // دالة لتنسيق السعر مع فاصلة للآلاف وإزالة الأصفار غير الضرورية\n  String formatPrice(double price) {\n    String priceString;\n    if (price == price.toInt()) {\n      priceString = price.toInt().toString();\n    } else {\n      priceString = price.toStringAsFixed(2).replaceAll(RegExp(r'\\.?0+$'), '');\n    }\n\n    // إضافة فاصلة للآلاف\n    final parts = priceString.split('.');\n    String integerPart = parts[0];\n    String decimalPart = parts.length > 1 ? '.${parts[1]}' : '';\n\n    // إضافة فاصلة كل ثلاث خانات من اليمين\n    String formattedInteger = '';\n    for (int i = integerPart.length - 1; i >= 0; i--) {\n      formattedInteger = integerPart[i] + formattedInteger;\n      if ((integerPart.length - i) % 3 == 0 && i != 0) {\n        formattedInteger = ',' + formattedInteger;\n      }\n    }\n\n    return formattedInteger + decimalPart;\n  }\n}\n"
        }
    ]
}