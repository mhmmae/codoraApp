{
    "sourceFile": "lib/الكود الخاص بتطبيق العميل /HomePage/class/SearchResultsListWidget.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753157006719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753157006719,
            "name": "Commit-0",
            "content": "import 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:flutter/material.dart';\nimport 'package:get/get.dart';\nimport 'package:cached_network_image/cached_network_image.dart';\n\n// استيراد Widget الأزرار\nimport '../../../Model/model_item.dart';\nimport '../../../XXX/xxx_firebase.dart';\nimport '../Get-Controllar/addAndRemoveSearch.dart'; // أو AddAndRemoveSearchWidget الجديد\n// استيراد شاشة التفاصيل\nimport 'DetailsOfItemScreen.dart';\n\nclass SearchResultsListWidget extends StatelessWidget {\n  final String searchQuery;\n  // حد أدنى لعدد الأحرف لبدء البحث\n  static const int minChars = 1; // زيادة إلى 2 أو 3 قد يحسن الأداء\n\n  const SearchResultsListWidget({super.key, required this.searchQuery});\n\n  // Stream لبناء نتائج البحث\n  Stream<QuerySnapshot<Map<String, dynamic>>> _buildSearchStream() {\n    // إرجاع Stream فارغ إذا كان الاستعلام قصيرًا جدًا\n    if (searchQuery.trim().length < minChars) {\n      // ---!!! الإصلاح هنا !!!---\n      return Stream<QuerySnapshot<Map<String, dynamic>>>.empty();\n    }\n\n    // تهيئة البحث (يفضل تحويل النص المخزن في Firestore للحالة الصغيرة أيضًا عند الحفظ)\n    final String term = searchQuery.trim().toLowerCase();\n\n    // بناء الاستعلام\n    // ملاحظة: يعتمد هذا الاستعلام على وجود فهرس مناسب في Firestore على حقل name\n    // وتحتاج إلى تحويل الحقل name في Firestore إلى حالة الأحرف الصغيرة عند حفظ البيانات لضمان مطابقة case-insensitive.\n    // الطريقة الحالية ستطابق فقط الكلمات التي تبدأ بـ term بنفس الحالة (أو أكبر منها).\n    return FirebaseFirestore.instance\n        .collection(FirebaseX.itemsCollection) // 'Items' مثلاً\n        .where('appName', isEqualTo: FirebaseX.appName)\n        // --- بديل لتحسين البحث (يتطلب تعديل Firestore أو استخدام خدمة بحث خارجية) ---\n        .where(\n          'nameOfItem',\n          isGreaterThanOrEqualTo: term,\n        ) // --- يتطلب أن يكون حقل name بحالة صغيرة في Firestore ---\n        .where(\n          'nameOfItem',\n          isLessThan: '$term\\uf8ff',\n        ) // للحصول على كل ما يبدأ بـ term\n        .orderBy('nameOfItem') // ترتيب النتائج أبجدياً\n        .limit(20) // تحديد عدد النتائج\n        .snapshots();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    final hi = MediaQuery.of(context).size.height;\n    final wi = MediaQuery.of(context).size.width;\n    final theme = Theme.of(context);\n\n    // عرض رسالة مطالبة بالكتابة إذا كان الاستعلام قصيرًا جدًا\n    if (searchQuery.trim().length < minChars) {\n      return Padding(\n        padding: const EdgeInsets.only(top: 50.0),\n        child: Center(\n          child: Text(\n            'اكتب حرفًا واحدًا على الأقل للبحث...', // <<-- تعريب\n            style: TextStyle(color: Colors.grey[600], fontSize: 16),\n          ),\n        ),\n      );\n    }\n\n    // بناء الواجهة بناءً على حالة الـ Stream\n    return StreamBuilder<QuerySnapshot<Map<String, dynamic>>>(\n      stream: _buildSearchStream(),\n      builder: (context, snapshot) {\n        if (snapshot.hasError) {\n          debugPrint(\"Search Error: ${snapshot.error}\");\n          return const Center(\n            child: Text('حدث خطأ أثناء البحث. حاول مرة أخرى.'),\n          ); // <<-- تعريب\n        }\n        if (snapshot.connectionState == ConnectionState.waiting) {\n          // عرض مؤشر تحميل أثناء البحث\n          return const Padding(\n            padding: EdgeInsets.symmetric(vertical: 40),\n            child: Center(child: CircularProgressIndicator(strokeWidth: 3)),\n          );\n        }\n\n        // الحصول على قائمة المستندات (تكون قائمة فارغة إذا لم تكن هناك بيانات)\n        final docs = snapshot.data?.docs ?? [];\n\n        if (docs.isEmpty) {\n          // عرض رسالة إذا لم يتم العثور على نتائج\n          return Padding(\n            padding: const EdgeInsets.only(top: 50.0, left: 20, right: 20),\n            child: Center(\n              child: Text(\n                'لا توجد نتائج تطابق \"$searchQuery\".', // <<-- تعريب\n                style: TextStyle(color: Colors.grey[700], fontSize: 16),\n                textAlign: TextAlign.center,\n              ),\n            ),\n          );\n        }\n\n        // بناء قائمة النتائج\n        return ListView.builder(\n          // NeverScrollableScrollPhysics لأنها غالبًا داخل SingleChildScrollView أو Column\n          physics: const NeverScrollableScrollPhysics(),\n          shrinkWrap: true, // لتأخذ حجم المحتوى فقط\n          itemCount: docs.length,\n          itemBuilder: (context, index) {\n            try {\n              // تأكد من معالجة الخطأ إذا فشل fromMap\n              final item = ItemModel.fromMap(\n                docs[index].data(),\n                docs[index].id,\n              );\n              return _buildResultItem(context, item, wi, hi, theme);\n            } catch (e, s) {\n              debugPrint(\"Error parsing search result at index $index: $e\\n$s\");\n              // عرض عنصر خطأ واضح في القائمة\n              return ListTile(\n                leading: Icon(Icons.error_outline, color: Colors.red[300]),\n                title: Text(\"خطأ في عرض هذه النتيجة\"), // <<-- تعريب\n                tileColor: Colors.red[50],\n              );\n            }\n          },\n        );\n      },\n    );\n  }\n\n  // بناء عنصر نتيجة بحث فردي\n  Widget _buildResultItem(\n    BuildContext context,\n    ItemModel item,\n    double wi,\n    double hi,\n    ThemeData theme,\n  ) {\n    return Card(\n      margin: const EdgeInsets.symmetric(\n        horizontal: 10,\n        vertical: 5,\n      ), // مسافات حول البطاقة\n      elevation: 1.5, // ظل خفيف جداً\n      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(10)),\n      child: InkWell(\n        // جعل العنصر قابلاً للنقر\n        borderRadius: BorderRadius.circular(10), // لمطابقة شكل البطاقة\n        onTap: () {\n          // الانتقال إلى شاشة التفاصيل\n          Get.to(() => DetailsOfItemScreen(item: item));\n        },\n        child: Padding(\n          padding: const EdgeInsets.symmetric(\n            horizontal: 12.0,\n            vertical: 10.0,\n          ), // مسافات داخلية\n          child: Row(\n            children: [\n              // الصورة المصغرة مع Hero Animation\n              Hero(\n                tag: 'item_image_${item.id}', // نفس الـ tag في الشبكة والتفاصيل\n                child: ClipRRect(\n                  borderRadius: BorderRadius.circular(8),\n                  child: CachedNetworkImage(\n                    imageUrl: item.imageUrl ?? '',\n                    height: hi * 0.08, // ارتفاع مناسب للقائمة\n                    width: wi * 0.18, // عرض مناسب للقائمة\n                    fit: BoxFit.cover,\n                    placeholder:\n                        (c, u) => Container(\n                          color: Colors.grey[200],\n                          height: hi * 0.08,\n                          width: wi * 0.18,\n                        ),\n                    errorWidget:\n                        (c, u, e) => Container(\n                          color: Colors.grey[100],\n                          height: hi * 0.08,\n                          width: wi * 0.18,\n                          child: Icon(\n                            Icons.image_not_supported_outlined,\n                            color: Colors.grey,\n                          ),\n                        ),\n                  ),\n                ),\n              ),\n\n              const SizedBox(width: 12), // مسافة بين الصورة والنص\n              // الاسم والسعر\n              Expanded(\n                child: Column(\n                  crossAxisAlignment: CrossAxisAlignment.start,\n                  mainAxisAlignment: MainAxisAlignment.center,\n                  children: [\n                    Text(\n                      item.name,\n                      style: theme.textTheme.bodyMedium?.copyWith(\n                        fontWeight: FontWeight.w600,\n                        fontSize: wi * 0.038,\n                      ), // خط أعرض قليلاً\n                      maxLines: 2,\n                      overflow: TextOverflow.ellipsis,\n                    ),\n                    SizedBox(height: hi * 0.006), // مسافة صغيرة\n                    Text(\n                      '${item.suggestedRetailPrice ?? item.price} ${FirebaseX.currency}',\n                      style: TextStyle(\n                        fontSize: wi / 32,\n                        color: theme.primaryColor,\n                        fontWeight: FontWeight.bold,\n                      ),\n                    ),\n                  ],\n                ),\n              ),\n\n              const SizedBox(width: 10), // مسافة قبل أزرار +/-\n              // أزرار الإضافة والإزالة (استخدام الويدجت المصححة)\n              // مرر isOffer بشكل صحيح\n              AddAndRemoveSearchWidget(\n                uidItem: item.id,\n                isOffer: false, // المنتج من البحث ليس عرضًا\n                uidAdd: item.uidAdd,\n                // تخصيص أحجام الأزرار والأيقونات لتناسب القائمة\n                buttonHeight: hi * 0.045,\n                buttonWidth: wi * 0.08,\n                iconSize: wi * 0.05,\n                numberFontSize: wi * 0.04,\n                spacing: wi * 0.01,\n              ),\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n"
        }
    ]
}