{
    "sourceFile": "lib/الكود الخاص بتطبيق العميل /HomePage/controllers/barcode_filter_controller.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752919676713,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752922212107,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,35 +8,34 @@\n import '../../../Model/model_item.dart';\n import '../../../XXX/xxx_firebase.dart';\n \n /// كنترولر البحث بالباركود للفلترة\n-class BarcodeFilterController extends GetxController with GetSingleTickerProviderStateMixin {\n+class BarcodeFilterController extends GetxController\n+    with GetSingleTickerProviderStateMixin {\n   // تخزين محلي\n   final GetStorage _storage = GetStorage();\n-  \n+\n   // متحكم المسح\n   late MobileScannerController scannerController;\n-  \n+\n   // حالة النظام\n   final RxBool isBarcodeSearchActive = false.obs;\n   final RxBool isScanning = false.obs;\n   final RxBool hasPermission = false.obs;\n   final RxString scannedBarcode = ''.obs;\n   final RxString currentSearchBarcode = ''.obs;\n-  \n \n-  \n   // نتائج البحث\n   final RxList<ItemModel> searchResults = <ItemModel>[].obs;\n   final Rxn<ItemModel> foundProduct = Rxn<ItemModel>();\n   final RxBool showProductNotFound = false.obs;\n-  \n+\n   // Animation Controller\n   late AnimationController animationController;\n   late Animation<double> slideAnimation;\n   late Animation<double> fadeAnimation;\n   late Animation<double> scaleAnimation;\n-  \n+\n   @override\n   void onInit() {\n     super.onInit();\n     _initAnimations();\n@@ -56,32 +55,29 @@\n     animationController = AnimationController(\n       duration: const Duration(milliseconds: 1200),\n       vsync: this,\n     );\n-    \n-    slideAnimation = Tween<double>(\n-      begin: 0.0,\n-      end: 1.0,\n-    ).animate(CurvedAnimation(\n-      parent: animationController,\n-      curve: const Interval(0.0, 0.8, curve: Curves.easeInOutQuint),\n-    ));\n-    \n-    fadeAnimation = Tween<double>(\n-      begin: 0.0,\n-      end: 1.0,\n-    ).animate(CurvedAnimation(\n-      parent: animationController,\n-      curve: const Interval(0.2, 0.9, curve: Curves.easeOutExpo),\n-    ));\n-    \n-    scaleAnimation = Tween<double>(\n-      begin: 0.7,\n-      end: 1.0,\n-    ).animate(CurvedAnimation(\n-      parent: animationController,\n-      curve: const Interval(0.4, 1.0, curve: Curves.elasticOut),\n-    ));\n+\n+    slideAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(\n+      CurvedAnimation(\n+        parent: animationController,\n+        curve: const Interval(0.0, 0.8, curve: Curves.easeInOutQuint),\n+      ),\n+    );\n+\n+    fadeAnimation = Tween<double>(begin: 0.0, end: 1.0).animate(\n+      CurvedAnimation(\n+        parent: animationController,\n+        curve: const Interval(0.2, 0.9, curve: Curves.easeOutExpo),\n+      ),\n+    );\n+\n+    scaleAnimation = Tween<double>(begin: 0.7, end: 1.0).animate(\n+      CurvedAnimation(\n+        parent: animationController,\n+        curve: const Interval(0.4, 1.0, curve: Curves.elasticOut),\n+      ),\n+    );\n   }\n \n   /// تهيئة المسح\n   void _initializeScanner() {\n@@ -95,9 +91,9 @@\n   /// طلب إذن الكاميرا\n   Future<void> _requestCameraPermission() async {\n     final status = await Permission.camera.request();\n     hasPermission.value = status == PermissionStatus.granted;\n-    \n+\n     if (!hasPermission.value) {\n       Get.snackbar(\n         '❌ إذن مطلوب',\n         'يجب السماح للتطبيق بالوصول للكاميرا لمسح الباركود',\n@@ -111,26 +107,26 @@\n   /// تفعيل البحث بالباركود\n   void activateBarcodeSearch() {\n     // عرض رسالة توضيحية\n     _showUsageMessage();\n-    \n+\n     // انيميشن تفعيل احترافي\n     isBarcodeSearchActive.value = true;\n-    \n+\n     // تشغيل انيميشن متدرج واحترافي\n     animationController.reset();\n     animationController.forward();\n-    \n+\n     // تأثيرات بصرية للتفعيل\n     _addActivationEffects();\n-    \n+\n     // بدء المسح\n     if (hasPermission.value) {\n       Future.delayed(Duration(milliseconds: 400), () {\n         scannerController.start();\n       });\n     }\n-    \n+\n     debugPrint('تم تفعيل البحث بالباركود');\n   }\n \n   /// إضافة تأثيرات بصرية للتفعيل\n@@ -141,46 +137,46 @@\n   /// إلغاء البحث بالباركود\n   void deactivateBarcodeSearch() {\n     // مسح جميع الإشعارات الحالية أولاً\n     clearAllNotifications();\n-    \n+\n     // إيقاف المسح أولاً\n     scannerController.stop();\n-    \n+\n     // انيميشن إغلاق احترافي مع تأخير متدرج\n-    animationController.animateTo(\n-      0.0,\n-      duration: const Duration(milliseconds: 900),\n-      curve: Curves.easeInOutQuart,\n-    ).then((_) {\n-      isBarcodeSearchActive.value = false;\n-      currentSearchBarcode.value = '';\n-      scannedBarcode.value = '';\n-      isScanning.value = false;\n-      _resetScanner();\n-    });\n-    \n+    animationController\n+        .animateTo(\n+          0.0,\n+          duration: const Duration(milliseconds: 900),\n+          curve: Curves.easeInOutQuart,\n+        )\n+        .then((_) {\n+          isBarcodeSearchActive.value = false;\n+          currentSearchBarcode.value = '';\n+          scannedBarcode.value = '';\n+          isScanning.value = false;\n+          _resetScanner();\n+        });\n+\n     // تم حذف إشعار \"تم الإغلاق\" حسب طلب المستخدم\n-    \n+\n     debugPrint('تم إلغاء البحث بالباركود');\n   }\n \n-\n-\n   /// عند مسح الباركود بنجاح\n   void onBarcodeDetected(BarcodeCapture capture) {\n     if (!isScanning.value) return; // منع المسح إذا لم تكن الكاميرا نشطة\n-    \n+\n     final List<Barcode> barcodes = capture.barcodes;\n-    \n+\n     if (barcodes.isNotEmpty) {\n       final barcode = barcodes.first;\n       scannedBarcode.value = barcode.rawValue ?? '';\n-      \n+\n       if (scannedBarcode.value.isNotEmpty) {\n         // إيقاف الكاميرا مؤقتاً\n         scannerController.stop();\n-        \n+\n         // فحص وجود المنتجات بهذا الباركود\n         _checkProductsExistenceInWidget(scannedBarcode.value);\n       }\n     }\n@@ -189,24 +185,28 @@\n   /// فحص وجود المنتجات بالباركود في الويدجت\n   Future<void> _checkProductsExistenceInWidget(String barcode) async {\n     try {\n       // البحث في قاعدة البيانات عن منتجات بهذا الباركود\n-      final QuerySnapshot result = await FirebaseFirestore.instance\n-          .collection(FirebaseX.itemsCollection)\n-          .where('appName', isEqualTo: FirebaseX.appName)\n-          .where('productBarcode', isEqualTo: barcode)\n-          .limit(1)\n-          .get();\n+      final QuerySnapshot result =\n+          await FirebaseFirestore.instance\n+              .collection(FirebaseX.itemsCollection)\n+              .where('appName', isEqualTo: FirebaseX.appName)\n+              .where('productBarcode', isEqualTo: barcode)\n+              .limit(1)\n+              .get();\n \n       if (result.docs.isNotEmpty) {\n         // تم العثور على منتج\n         final doc = result.docs.first;\n-        final product = ItemModel.fromMap(doc.data() as Map<String, dynamic>, doc.id);\n-        \n+        final product = ItemModel.fromMap(\n+          doc.data() as Map<String, dynamic>,\n+          doc.id,\n+        );\n+\n         foundProduct.value = product;\n         currentSearchBarcode.value = barcode;\n         isScanning.value = false; // إيقاف المسح\n-        \n+\n         Get.snackbar(\n           '✅ تم العثور على المنتج',\n           'تم العثور على منتج بالباركود',\n           backgroundColor: Colors.green.withValues(alpha: 0.1),\n@@ -228,9 +228,9 @@\n         colorText: Colors.red[800],\n         duration: Duration(seconds: 3),\n         icon: Icon(Icons.error, color: Colors.red),\n       );\n-      \n+\n       // إعادة بدء المسح\n       restartScanning();\n     }\n   }\n@@ -239,9 +239,9 @@\n   void restartScanning() {\n     foundProduct.value = null;\n     showProductNotFound.value = false;\n     scannedBarcode.value = '';\n-    \n+\n     if (hasPermission.value) {\n       isScanning.value = true;\n       scannerController.start();\n     }\n@@ -254,11 +254,14 @@\n   }\n \n   /// مسح الباركود المحفوظ\n   void clearCurrentBarcode() {\n+    // مسح جميع الإشعارات الحالية أولاً\n+    clearAllNotifications();\n+    \n     currentSearchBarcode.value = '';\n     scannedBarcode.value = '';\n-    \n+\n     Get.snackbar(\n       '🗑️ تم المسح',\n       'تم مسح الباركود من البحث',\n       backgroundColor: Colors.orange.withOpacity(0.1),\n@@ -291,10 +294,11 @@\n \n   /// عرض رسالة توضيحية لاستخدام الميزة (مرة واحدة فقط)\n   void _showUsageMessage() {\n     // التحقق من عرض الرسالة مسبقاً\n-    bool hasShownMessage = _storage.read('barcode_usage_message_shown') ?? false;\n-    \n+    bool hasShownMessage =\n+        _storage.read('barcode_usage_message_shown') ?? false;\n+\n     if (!hasShownMessage) {\n       Get.snackbar(\n         '📱 البحث بالباركود',\n         'اسحب كاميرا الهاتف على الباركود الموجود على المنتج للبحث عنه في التطبيق',\n@@ -306,25 +310,19 @@\n           crossAxisAlignment: CrossAxisAlignment.start,\n           children: [\n             Text(\n               'اسحب كاميرا الهاتف على الباركود الموجود على المنتج للبحث عنه في التطبيق',\n-              style: TextStyle(\n-                color: Colors.blue[800],\n-                fontSize: 14,\n-              ),\n+              style: TextStyle(color: Colors.blue[800], fontSize: 14),\n             ),\n             SizedBox(height: 8),\n             Text(\n               '💡 اجعل الباركود واضحاً أمام الكاميرا',\n-              style: TextStyle(\n-                color: Colors.blue[600],\n-                fontSize: 12,\n-              ),\n+              style: TextStyle(color: Colors.blue[600], fontSize: 12),\n             ),\n           ],\n         ),\n       );\n-      \n+\n       // حفظ أنه تم عرض الرسالة\n       _storage.write('barcode_usage_message_shown', true);\n     }\n   }\n@@ -347,16 +345,16 @@\n     // مسح الحالة السابقة\n     foundProduct.value = null;\n     showProductNotFound.value = false;\n     scannedBarcode.value = '';\n-    \n+\n     // بدء المسح\n     isScanning.value = true;\n-    \n+\n     // تأكد من بدء الكاميرا\n     try {\n       await scannerController.start();\n-      \n+\n       // تم حذف إشعار \"الكاميرا جاهزة\" حسب طلب المستخدم\n     } catch (e) {\n       debugPrint('خطأ في بدء الكاميرا: $e');\n       Get.snackbar(\n@@ -372,17 +370,17 @@\n   /// إيقاف مسح الكاميرا\n   void stopCameraScanning() {\n     // مسح الإشعارات أولاً\n     clearAllNotifications();\n-    \n+\n     isScanning.value = false;\n     scannerController.stop();\n-    \n+\n     // مسح الحالة\n     foundProduct.value = null;\n     showProductNotFound.value = false;\n     scannedBarcode.value = '';\n-    \n+\n     // تم حذف إشعار \"تم الإغلاق\" حسب طلب المستخدم\n   }\n \n   /// مسح رسالة المنتج غير موجود\n@@ -405,22 +403,26 @@\n \n     try {\n       // تحديث الباركود الحالي\n       currentSearchBarcode.value = barcode;\n-      \n+\n       // البحث في قاعدة البيانات\n-      final QuerySnapshot result = await FirebaseFirestore.instance\n-          .collection(FirebaseX.itemsCollection)\n-          .where('appName', isEqualTo: FirebaseX.appName)\n-          .where('productBarcode', isEqualTo: barcode)\n-          .get();\n+      final QuerySnapshot result =\n+          await FirebaseFirestore.instance\n+              .collection(FirebaseX.itemsCollection)\n+              .where('appName', isEqualTo: FirebaseX.appName)\n+              .where('productBarcode', isEqualTo: barcode)\n+              .get();\n \n       if (result.docs.isNotEmpty) {\n         // تحويل النتائج إلى قائمة منتجات\n         searchResults.clear();\n         for (var doc in result.docs) {\n           try {\n-            final item = ItemModel.fromMap(doc.data() as Map<String, dynamic>, doc.id);\n+            final item = ItemModel.fromMap(\n+              doc.data() as Map<String, dynamic>,\n+              doc.id,\n+            );\n             searchResults.add(item);\n           } catch (e) {\n             debugPrint('خطأ في تحويل المنتج: $e');\n           }\n@@ -457,5 +459,5 @@\n   /// مسح جميع الإشعارات الحالية\n   void clearAllNotifications() {\n     Get.closeAllSnackbars();\n   }\n-} \n\\ No newline at end of file\n+}\n"
                }
            ],
            "date": 1752919676712,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\nimport 'package:get/get.dart';\nimport 'package:mobile_scanner/mobile_scanner.dart';\nimport 'package:permission_handler/permission_handler.dart';\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:get_storage/get_storage.dart';\n\nimport '../../../Model/model_item.dart';\nimport '../../../XXX/xxx_firebase.dart';\n\n/// كنترولر البحث بالباركود للفلترة\nclass BarcodeFilterController extends GetxController with GetSingleTickerProviderStateMixin {\n  // تخزين محلي\n  final GetStorage _storage = GetStorage();\n  \n  // متحكم المسح\n  late MobileScannerController scannerController;\n  \n  // حالة النظام\n  final RxBool isBarcodeSearchActive = false.obs;\n  final RxBool isScanning = false.obs;\n  final RxBool hasPermission = false.obs;\n  final RxString scannedBarcode = ''.obs;\n  final RxString currentSearchBarcode = ''.obs;\n  \n\n  \n  // نتائج البحث\n  final RxList<ItemModel> searchResults = <ItemModel>[].obs;\n  final Rxn<ItemModel> foundProduct = Rxn<ItemModel>();\n  final RxBool showProductNotFound = false.obs;\n  \n  // Animation Controller\n  late AnimationController animationController;\n  late Animation<double> slideAnimation;\n  late Animation<double> fadeAnimation;\n  late Animation<double> scaleAnimation;\n  \n  @override\n  void onInit() {\n    super.onInit();\n    _initAnimations();\n    _initializeScanner();\n    _requestCameraPermission();\n  }\n\n  @override\n  void onClose() {\n    animationController.dispose();\n    scannerController.dispose();\n    super.onClose();\n  }\n\n  /// تهيئة الانيميشن\n  void _initAnimations() {\n    animationController = AnimationController(\n      duration: const Duration(milliseconds: 1200),\n      vsync: this,\n    );\n    \n    slideAnimation = Tween<double>(\n      begin: 0.0,\n      end: 1.0,\n    ).animate(CurvedAnimation(\n      parent: animationController,\n      curve: const Interval(0.0, 0.8, curve: Curves.easeInOutQuint),\n    ));\n    \n    fadeAnimation = Tween<double>(\n      begin: 0.0,\n      end: 1.0,\n    ).animate(CurvedAnimation(\n      parent: animationController,\n      curve: const Interval(0.2, 0.9, curve: Curves.easeOutExpo),\n    ));\n    \n    scaleAnimation = Tween<double>(\n      begin: 0.7,\n      end: 1.0,\n    ).animate(CurvedAnimation(\n      parent: animationController,\n      curve: const Interval(0.4, 1.0, curve: Curves.elasticOut),\n    ));\n  }\n\n  /// تهيئة المسح\n  void _initializeScanner() {\n    scannerController = MobileScannerController(\n      detectionSpeed: DetectionSpeed.noDuplicates,\n      facing: CameraFacing.back,\n      torchEnabled: false,\n    );\n  }\n\n  /// طلب إذن الكاميرا\n  Future<void> _requestCameraPermission() async {\n    final status = await Permission.camera.request();\n    hasPermission.value = status == PermissionStatus.granted;\n    \n    if (!hasPermission.value) {\n      Get.snackbar(\n        '❌ إذن مطلوب',\n        'يجب السماح للتطبيق بالوصول للكاميرا لمسح الباركود',\n        backgroundColor: Colors.red.withOpacity(0.1),\n        colorText: Colors.red,\n        duration: Duration(seconds: 5),\n      );\n    }\n  }\n\n  /// تفعيل البحث بالباركود\n  void activateBarcodeSearch() {\n    // عرض رسالة توضيحية\n    _showUsageMessage();\n    \n    // انيميشن تفعيل احترافي\n    isBarcodeSearchActive.value = true;\n    \n    // تشغيل انيميشن متدرج واحترافي\n    animationController.reset();\n    animationController.forward();\n    \n    // تأثيرات بصرية للتفعيل\n    _addActivationEffects();\n    \n    // بدء المسح\n    if (hasPermission.value) {\n      Future.delayed(Duration(milliseconds: 400), () {\n        scannerController.start();\n      });\n    }\n    \n    debugPrint('تم تفعيل البحث بالباركود');\n  }\n\n  /// إضافة تأثيرات بصرية للتفعيل\n  void _addActivationEffects() {\n    // تم حذف إشعار \"الكاميرا جاهزة\" حسب طلب المستخدم\n  }\n\n  /// إلغاء البحث بالباركود\n  void deactivateBarcodeSearch() {\n    // مسح جميع الإشعارات الحالية أولاً\n    clearAllNotifications();\n    \n    // إيقاف المسح أولاً\n    scannerController.stop();\n    \n    // انيميشن إغلاق احترافي مع تأخير متدرج\n    animationController.animateTo(\n      0.0,\n      duration: const Duration(milliseconds: 900),\n      curve: Curves.easeInOutQuart,\n    ).then((_) {\n      isBarcodeSearchActive.value = false;\n      currentSearchBarcode.value = '';\n      scannedBarcode.value = '';\n      isScanning.value = false;\n      _resetScanner();\n    });\n    \n    // تم حذف إشعار \"تم الإغلاق\" حسب طلب المستخدم\n    \n    debugPrint('تم إلغاء البحث بالباركود');\n  }\n\n\n\n  /// عند مسح الباركود بنجاح\n  void onBarcodeDetected(BarcodeCapture capture) {\n    if (!isScanning.value) return; // منع المسح إذا لم تكن الكاميرا نشطة\n    \n    final List<Barcode> barcodes = capture.barcodes;\n    \n    if (barcodes.isNotEmpty) {\n      final barcode = barcodes.first;\n      scannedBarcode.value = barcode.rawValue ?? '';\n      \n      if (scannedBarcode.value.isNotEmpty) {\n        // إيقاف الكاميرا مؤقتاً\n        scannerController.stop();\n        \n        // فحص وجود المنتجات بهذا الباركود\n        _checkProductsExistenceInWidget(scannedBarcode.value);\n      }\n    }\n  }\n\n  /// فحص وجود المنتجات بالباركود في الويدجت\n  Future<void> _checkProductsExistenceInWidget(String barcode) async {\n    try {\n      // البحث في قاعدة البيانات عن منتجات بهذا الباركود\n      final QuerySnapshot result = await FirebaseFirestore.instance\n          .collection(FirebaseX.itemsCollection)\n          .where('appName', isEqualTo: FirebaseX.appName)\n          .where('productBarcode', isEqualTo: barcode)\n          .limit(1)\n          .get();\n\n      if (result.docs.isNotEmpty) {\n        // تم العثور على منتج\n        final doc = result.docs.first;\n        final product = ItemModel.fromMap(doc.data() as Map<String, dynamic>, doc.id);\n        \n        foundProduct.value = product;\n        currentSearchBarcode.value = barcode;\n        isScanning.value = false; // إيقاف المسح\n        \n        Get.snackbar(\n          '✅ تم العثور على المنتج',\n          'تم العثور على منتج بالباركود',\n          backgroundColor: Colors.green.withValues(alpha: 0.1),\n          colorText: Colors.green[800],\n          duration: Duration(seconds: 2),\n          icon: Icon(Icons.check_circle, color: Colors.green),\n        );\n      } else {\n        // لم يتم العثور على منتجات\n        showProductNotFound.value = true;\n        isScanning.value = false; // إيقاف المسح\n      }\n    } catch (e) {\n      // خطأ في البحث\n      Get.snackbar(\n        '❌ خطأ في البحث',\n        'حدث خطأ أثناء البحث عن المنتج',\n        backgroundColor: Colors.red.withValues(alpha: 0.1),\n        colorText: Colors.red[800],\n        duration: Duration(seconds: 3),\n        icon: Icon(Icons.error, color: Colors.red),\n      );\n      \n      // إعادة بدء المسح\n      restartScanning();\n    }\n  }\n\n  /// إعادة بدء المسح\n  void restartScanning() {\n    foundProduct.value = null;\n    showProductNotFound.value = false;\n    scannedBarcode.value = '';\n    \n    if (hasPermission.value) {\n      isScanning.value = true;\n      scannerController.start();\n    }\n  }\n\n  /// إعادة تعيين المسح\n  void _resetScanner() {\n    isScanning.value = false;\n    scannedBarcode.value = '';\n  }\n\n  /// مسح الباركود المحفوظ\n  void clearCurrentBarcode() {\n    currentSearchBarcode.value = '';\n    scannedBarcode.value = '';\n    \n    Get.snackbar(\n      '🗑️ تم المسح',\n      'تم مسح الباركود من البحث',\n      backgroundColor: Colors.orange.withOpacity(0.1),\n      colorText: Colors.orange[800],\n      duration: Duration(seconds: 2),\n    );\n  }\n\n  /// الحصول على مفتاح الفلتر الحالي\n  String getFilterKey() {\n    if (currentSearchBarcode.value.isNotEmpty) {\n      return 'barcode_${currentSearchBarcode.value}';\n    }\n    return 'all';\n  }\n\n  /// وصف الفلتر الحالي\n  String getFilterDescription() {\n    if (currentSearchBarcode.value.isNotEmpty) {\n      return 'البحث بالباركود: ${currentSearchBarcode.value}';\n    }\n    return 'جميع المنتجات';\n  }\n\n  /// التحقق من وجود فلتر نشط\n  bool get hasActiveFilter => currentSearchBarcode.value.isNotEmpty;\n\n  /// التحقق من حالة الكاميرا\n  bool get isCameraReady => hasPermission.value && !isScanning.value;\n\n  /// عرض رسالة توضيحية لاستخدام الميزة (مرة واحدة فقط)\n  void _showUsageMessage() {\n    // التحقق من عرض الرسالة مسبقاً\n    bool hasShownMessage = _storage.read('barcode_usage_message_shown') ?? false;\n    \n    if (!hasShownMessage) {\n      Get.snackbar(\n        '📱 البحث بالباركود',\n        'اسحب كاميرا الهاتف على الباركود الموجود على المنتج للبحث عنه في التطبيق',\n        backgroundColor: Colors.blue.withOpacity(0.1),\n        colorText: Colors.blue[800],\n        duration: Duration(seconds: 4),\n        icon: Icon(Icons.qr_code_scanner, color: Colors.blue),\n        messageText: Column(\n          crossAxisAlignment: CrossAxisAlignment.start,\n          children: [\n            Text(\n              'اسحب كاميرا الهاتف على الباركود الموجود على المنتج للبحث عنه في التطبيق',\n              style: TextStyle(\n                color: Colors.blue[800],\n                fontSize: 14,\n              ),\n            ),\n            SizedBox(height: 8),\n            Text(\n              '💡 اجعل الباركود واضحاً أمام الكاميرا',\n              style: TextStyle(\n                color: Colors.blue[600],\n                fontSize: 12,\n              ),\n            ),\n          ],\n        ),\n      );\n      \n      // حفظ أنه تم عرض الرسالة\n      _storage.write('barcode_usage_message_shown', true);\n    }\n  }\n\n  /// بدء مسح الكاميرا في نفس الويدجت\n  void startCameraScanning() async {\n    if (!hasPermission.value) {\n      await _requestCameraPermission();\n      if (!hasPermission.value) {\n        Get.snackbar(\n          '❌ خطأ',\n          'يجب السماح للتطبيق بالوصول للكاميرا',\n          backgroundColor: Colors.red.withValues(alpha: 0.1),\n          colorText: Colors.red,\n        );\n        return;\n      }\n    }\n\n    // مسح الحالة السابقة\n    foundProduct.value = null;\n    showProductNotFound.value = false;\n    scannedBarcode.value = '';\n    \n    // بدء المسح\n    isScanning.value = true;\n    \n    // تأكد من بدء الكاميرا\n    try {\n      await scannerController.start();\n      \n      // تم حذف إشعار \"الكاميرا جاهزة\" حسب طلب المستخدم\n    } catch (e) {\n      debugPrint('خطأ في بدء الكاميرا: $e');\n      Get.snackbar(\n        '❌ خطأ في الكاميرا',\n        'لا يمكن تشغيل الكاميرا',\n        backgroundColor: Colors.red.withValues(alpha: 0.1),\n        colorText: Colors.red,\n      );\n      isScanning.value = false;\n    }\n  }\n\n  /// إيقاف مسح الكاميرا\n  void stopCameraScanning() {\n    // مسح الإشعارات أولاً\n    clearAllNotifications();\n    \n    isScanning.value = false;\n    scannerController.stop();\n    \n    // مسح الحالة\n    foundProduct.value = null;\n    showProductNotFound.value = false;\n    scannedBarcode.value = '';\n    \n    // تم حذف إشعار \"تم الإغلاق\" حسب طلب المستخدم\n  }\n\n  /// مسح رسالة المنتج غير موجود\n  void clearNotFoundMessage() {\n    showProductNotFound.value = false;\n    scannedBarcode.value = '';\n  }\n\n  /// البحث بالباركود\n  Future<void> searchByBarcode(String barcode) async {\n    if (barcode.isEmpty) {\n      Get.snackbar(\n        '⚠️ تنبيه',\n        'يرجى إدخال رقم الباركود',\n        backgroundColor: Colors.orange.withOpacity(0.1),\n        colorText: Colors.orange[800],\n      );\n      return;\n    }\n\n    try {\n      // تحديث الباركود الحالي\n      currentSearchBarcode.value = barcode;\n      \n      // البحث في قاعدة البيانات\n      final QuerySnapshot result = await FirebaseFirestore.instance\n          .collection(FirebaseX.itemsCollection)\n          .where('appName', isEqualTo: FirebaseX.appName)\n          .where('productBarcode', isEqualTo: barcode)\n          .get();\n\n      if (result.docs.isNotEmpty) {\n        // تحويل النتائج إلى قائمة منتجات\n        searchResults.clear();\n        for (var doc in result.docs) {\n          try {\n            final item = ItemModel.fromMap(doc.data() as Map<String, dynamic>, doc.id);\n            searchResults.add(item);\n          } catch (e) {\n            debugPrint('خطأ في تحويل المنتج: $e');\n          }\n        }\n\n        Get.snackbar(\n          '✅ نجح البحث',\n          'تم العثور على ${searchResults.length} منتج',\n          backgroundColor: Colors.green.withOpacity(0.1),\n          colorText: Colors.green[800],\n          icon: Icon(Icons.check_circle, color: Colors.green),\n        );\n      } else {\n        searchResults.clear();\n        Get.snackbar(\n          '❌ لا توجد نتائج',\n          'لم يتم العثور على منتجات بهذا الباركود',\n          backgroundColor: Colors.red.withOpacity(0.1),\n          colorText: Colors.red[800],\n          icon: Icon(Icons.search_off, color: Colors.red),\n        );\n      }\n    } catch (e) {\n      Get.snackbar(\n        '❌ خطأ',\n        'حدث خطأ أثناء البحث: $e',\n        backgroundColor: Colors.red.withOpacity(0.1),\n        colorText: Colors.red[800],\n        icon: Icon(Icons.error, color: Colors.red),\n      );\n    }\n  }\n\n  /// مسح جميع الإشعارات الحالية\n  void clearAllNotifications() {\n    Get.closeAllSnackbars();\n  }\n} "
        }
    ]
}