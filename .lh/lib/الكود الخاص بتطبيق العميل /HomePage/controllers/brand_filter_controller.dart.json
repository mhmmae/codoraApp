{
    "sourceFile": "lib/الكود الخاص بتطبيق العميل /HomePage/controllers/brand_filter_controller.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752915343582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752915343582,
            "name": "Commit-0",
            "content": "import 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:flutter/material.dart';\nimport 'package:get/get.dart';\n\nimport '../../../Model/company_model.dart';\n\n/// كنترولر البحث من خلال البراند والشركات المصنعة\nclass BrandFilterController extends GetxController with GetSingleTickerProviderStateMixin {\n  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n  \n  // حالة النظام\n  final RxBool isBrandModeActive = false.obs;\n  final RxBool isLoading = false.obs;\n  \n  // بيانات الشركات والمنتجات\n  final RxList<CompanyModel> companies = <CompanyModel>[].obs;\n  final RxList<CompanyProductModel> selectedCompanyProducts = <CompanyProductModel>[].obs;\n  \n  // الاختيارات الحالية\n  final Rxn<CompanyModel> selectedCompany = Rxn<CompanyModel>();\n  final Rxn<CompanyProductModel> selectedCompanyProduct = Rxn<CompanyProductModel>();\n  \n  // متغيرات لحفظ الاختيارات السابقة\n  CompanyModel? _lastSelectedCompany;\n  CompanyProductModel? _lastSelectedCompanyProduct;\n  \n  // كنترولرات الانيميشن\n  late AnimationController animationController;\n  late Animation<double> slideAnimation;\n  late Animation<double> fadeAnimation;\n  late Animation<double> scaleAnimation;\n  \n  @override\n  void onInit() {\n    super.onInit();\n    _initAnimations();\n    loadCompanies();\n  }\n  \n  @override\n  void onClose() {\n    debugPrint('🔄 إغلاق BrandFilterController...');\n    \n    // مسح جميع المعلومات من الذاكرة عند إتلاف الكنترولر\n    clearAllMemoryData();\n    \n    // التخلص من الانيميشن\n    animationController.dispose();\n    \n    debugPrint('✅ تم إغلاق BrandFilterController وتنظيف الذاكرة');\n    super.onClose();\n  }\n  \n  /// تهيئة الانيميشن\n  void _initAnimations() {\n    animationController = AnimationController(\n      duration: const Duration(milliseconds: 800),\n      vsync: this,\n    );\n    \n    slideAnimation = Tween<double>(\n      begin: 0.0,\n      end: 1.0,\n    ).animate(CurvedAnimation(\n      parent: animationController,\n      curve: Curves.easeInOutCubic,\n    ));\n    \n    fadeAnimation = Tween<double>(\n      begin: 0.0,\n      end: 1.0,\n    ).animate(CurvedAnimation(\n      parent: animationController,\n      curve: const Interval(0.3, 1.0, curve: Curves.easeOut),\n    ));\n    \n    scaleAnimation = Tween<double>(\n      begin: 0.8,\n      end: 1.0,\n    ).animate(CurvedAnimation(\n      parent: animationController,\n      curve: const Interval(0.5, 1.0, curve: Curves.elasticOut),\n    ));\n  }\n  \n  /// تحميل قائمة الشركات من Firebase\n  Future<void> loadCompanies() async {\n    try {\n      isLoading.value = true;\n      \n      final QuerySnapshot snapshot = await _firestore\n          .collection('brand_companies')\n          .where('isActive', isEqualTo: true)\n          .orderBy('nameAr')\n          .get();\n      \n      final List<CompanyModel> loadedCompanies = [];\n      \n      for (final doc in snapshot.docs) {\n        final company = CompanyModel.fromFirestore(doc);\n        \n        // تحميل منتجات كل شركة\n        final companyProducts = await _loadProductsForCompany(company.id);\n        \n        // إنشاء شركة مع منتجاتها\n        final companyWithProducts = CompanyModel(\n          id: company.id,\n          nameAr: company.nameAr,\n          nameEn: company.nameEn,\n          logoUrl: company.logoUrl,\n          description: company.description,\n          country: company.country,\n          isActive: company.isActive,\n          createdBy: company.createdBy,\n          createdAt: company.createdAt,\n          updatedAt: company.updatedAt,\n          products: companyProducts,\n        );\n        \n        loadedCompanies.add(companyWithProducts);\n      }\n      \n      companies.value = loadedCompanies;\n      debugPrint('تم تحميل ${companies.length} شركة للبراند فلتر');\n    } catch (e) {\n      debugPrint('خطأ في تحميل الشركات: $e');\n      Get.snackbar(\n        'خطأ',\n        'فشل في تحميل الشركات: ${e.toString()}',\n        backgroundColor: Colors.red.withOpacity(0.1),\n        colorText: Colors.red,\n      );\n    } finally {\n      isLoading.value = false;\n    }\n  }\n  \n  /// تحميل منتجات شركة معينة\n  Future<List<CompanyProductModel>> _loadProductsForCompany(String companyId) async {\n    try {\n      final QuerySnapshot snapshot = await _firestore\n          .collection('company_products')\n          .where('companyId', isEqualTo: companyId)\n          .where('isActive', isEqualTo: true)\n          .orderBy('nameAr')\n          .get();\n      \n      return snapshot.docs\n          .map((doc) => CompanyProductModel.fromFirestore(doc))\n          .toList();\n    } catch (e) {\n      debugPrint('خطأ في تحميل منتجات الشركة $companyId: $e');\n      return [];\n    }\n  }\n  \n  /// تفعيل نمط البراند مع الانيميشن\n  Future<void> activateBrandMode() async {\n    if (isBrandModeActive.value) return;\n    \n    debugPrint('🔄 تفعيل نمط البراند...');\n    debugPrint('📊 عدد الشركات المحملة: ${companies.length}');\n    debugPrint('🏢 الشركة المختارة حالياً: ${selectedCompany.value?.nameAr ?? 'لا شيء'}');\n    debugPrint('💾 آخر شركة محفوظة: ${_lastSelectedCompany?.nameAr ?? 'لا شيء'}');\n    \n    isBrandModeActive.value = true;\n    \n    // تحميل البيانات إذا كانت فارغة أو استعادة الاختيارات السابقة\n    if (companies.isEmpty) {\n      debugPrint('🔄 إعادة تحميل البيانات بعد مسح الذاكرة...');\n      await loadCompanies();\n    } else if (_lastSelectedCompany != null) {\n      debugPrint('🔄 استعادة الاختيار السابق...');\n      selectedCompany.value = _lastSelectedCompany;\n      selectedCompanyProduct.value = _lastSelectedCompanyProduct;\n      selectedCompanyProducts.value = _lastSelectedCompany!.products;\n      \n      debugPrint('✅ تم استعادة الشركة: ${_lastSelectedCompany!.nameAr}');\n      debugPrint('✅ عدد المنتجات المستعادة: ${_lastSelectedCompany!.products.length}');\n    }\n    \n    await animationController.forward();\n    update(); // إضافة update لتحديث GetBuilder\n    \n    debugPrint('✅ تم تفعيل نمط البراند بنجاح');\n  }\n  \n  /// إلغاء تفعيل نمط البراند مع الانيميشن\n  Future<void> deactivateBrandMode() async {\n    if (!isBrandModeActive.value) return;\n    \n    debugPrint('🔄 إغلاق نمط البراند...');\n    \n    // حفظ الاختيارات الحالية قبل مسحها\n    _lastSelectedCompany = selectedCompany.value;\n    _lastSelectedCompanyProduct = selectedCompanyProduct.value;\n    \n    debugPrint('💾 حفظ الشركة المختارة: ${_lastSelectedCompany?.nameAr ?? 'لا شيء'}');\n    debugPrint('💾 حفظ المنتج المختار: ${_lastSelectedCompanyProduct?.nameAr ?? 'لا شيء'}');\n    \n    await animationController.reverse();\n    isBrandModeActive.value = false;\n    \n    // إعادة تعيين الاختيارات المرئية فقط (مع الحفاظ على النسخة المحفوظة)\n    selectedCompany.value = null;\n    selectedCompanyProduct.value = null;\n    selectedCompanyProducts.clear();\n    \n    update(); // إضافة update لتحديث GetBuilder\n    \n    debugPrint('✅ تم إغلاق نمط البراند مع حفظ الاختيارات');\n  }\n  \n  /// إلغاء تفعيل نمط البراند مع مسح جميع المعلومات من الذاكرة\n  Future<void> deactivateBrandModeAndClearMemory() async {\n    if (!isBrandModeActive.value) return;\n    \n    debugPrint('🔄 إغلاق نمط البراند مع مسح جميع المعلومات...');\n    \n    await animationController.reverse();\n    isBrandModeActive.value = false;\n    \n    // مسح جميع المعلومات من الذاكرة\n    clearAllMemoryData();\n    \n    update(); // إضافة update لتحديث GetBuilder\n    \n    debugPrint('✅ تم إغلاق نمط البراند مع مسح جميع المعلومات من الذاكرة');\n  }\n  \n  /// مسح جميع المعلومات من الذاكرة\n  void clearAllMemoryData() {\n    debugPrint('🗑️ مسح جميع المعلومات من الذاكرة...');\n    \n    // مسح الاختيارات الحالية\n    selectedCompany.value = null;\n    selectedCompanyProduct.value = null;\n    selectedCompanyProducts.clear();\n    \n    // مسح الاختيارات المحفوظة\n    _lastSelectedCompany = null;\n    _lastSelectedCompanyProduct = null;\n    \n    // مسح قائمة الشركات المحملة\n    companies.clear();\n    \n    // إعادة تعيين حالة التحميل\n    isLoading.value = false;\n    \n    debugPrint('✅ تم مسح جميع المعلومات من الذاكرة');\n    debugPrint('📊 عدد الشركات المتبقية: ${companies.length}');\n    debugPrint('🏢 الشركة المختارة: ${selectedCompany.value?.nameAr ?? 'لا شيء'}');\n    debugPrint('💾 الشركة المحفوظة: ${_lastSelectedCompany?.nameAr ?? 'لا شيء'}');\n    \n    update();\n  }\n  \n  /// اختيار شركة\n  void selectCompany(CompanyModel company) {\n    debugPrint('🎯 اختيار الشركة: ${company.nameAr}');\n    debugPrint('   - معرف الشركة: ${company.id}');\n    debugPrint('   - عدد المنتجات: ${company.products.length}');\n    \n    selectedCompany.value = company;\n    selectedCompanyProduct.value = null; // إعادة تعيين المنتج المختار\n    selectedCompanyProducts.value = company.products;\n    \n    debugPrint('✅ تم تحديث الاختيار - الشركة المختارة: ${selectedCompany.value?.nameAr}');\n    debugPrint('✅ عدد المنتجات في القائمة: ${selectedCompanyProducts.length}');\n    debugPrint('🔄 تحديث reactive variables - Obx سيعيد البناء تلقائياً');\n  }\n  \n  /// اختيار منتج من الشركة\n  void selectCompanyProduct(CompanyProductModel product) {\n    selectedCompanyProduct.value = product;\n    debugPrint('تم اختيار المنتج: ${product.nameAr}');\n    debugPrint('🔄 تحديث reactive variables - Obx سيعيد البناء تلقائياً');\n  }\n  \n  /// الحصول على مفتاح الفلتر الحالي\n  String getFilterKey() {\n    if (!isBrandModeActive.value) return 'all';\n    \n    if (selectedCompanyProduct.value != null) {\n      // فلترة حسب منتج الشركة المحدد\n      return 'original_product_${selectedCompanyProduct.value!.id}';\n    } else if (selectedCompany.value != null) {\n      // فلترة حسب الشركة المحددة\n      return 'original_company_${selectedCompany.value!.id}';\n    }\n    \n    return 'original_brands';\n  }\n  \n  /// وصف الفلتر الحالي\n  String getFilterDescription() {\n    if (!isBrandModeActive.value) return 'جميع المنتجات';\n    \n    if (selectedCompanyProduct.value != null) {\n      return 'منتجات ${selectedCompanyProduct.value!.nameAr}';\n    } else if (selectedCompany.value != null) {\n      return 'منتجات شركة ${selectedCompany.value!.nameAr}';\n    }\n    \n    return 'البحث بالبراند';\n  }\n  \n  /// التحقق من وجود فلتر نشط\n  bool get hasActiveFilter => isBrandModeActive.value && \n      (selectedCompany.value != null || selectedCompanyProduct.value != null);\n\n  /// مسح جميع الاختيارات (للاستخدام عند التبديل لطريقة بحث أخرى)\n  void clearAllSelections() {\n    debugPrint('🗑️ مسح جميع اختيارات البراند...');\n    \n    selectedCompany.value = null;\n    selectedCompanyProduct.value = null;\n    selectedCompanyProducts.clear();\n    \n    // مسح الاختيارات المحفوظة أيضاً\n    _lastSelectedCompany = null;\n    _lastSelectedCompanyProduct = null;\n    \n    debugPrint('✅ تم مسح جميع الاختيارات');\n    update();\n  }\n} "
        }
    ]
}