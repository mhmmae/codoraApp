{
    "sourceFile": "lib/الكود الخاص بتطبيق العميل /HomePage/controllers/filters_display_controller.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1753068346584,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753093449446,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -27,15 +27,18 @@\n     try {\n       isLoading.value = true;\n       List<FilterItemModel> filters = [];\n \n-      // 1. تحميل الأقسام الفرعية\n-      await _loadSubCategories(filters);\n+      // 1. تحميل الأقسام الرئيسية والفرعية\n+      await _loadAllCategories(filters);\n \n       // 2. تحميل الشركات والمنتجات\n       await _loadBrandFilters(filters);\n \n-      // 3. خلط الفلاتر عشوائياً\n+      // 3. حساب عدد المنتجات لكل فلتر (اختياري)\n+      await _calculateProductCounts(filters);\n+\n+      // 4. خلط الفلاتر عشوائياً\n       filters.shuffle();\n \n       allFilters.assignAll(filters);\n \n@@ -46,37 +49,51 @@\n       isLoading.value = false;\n     }\n   }\n \n-  /// تحميل الأقسام الفرعية\n-  Future<void> _loadSubCategories(List<FilterItemModel> filters) async {\n+  /// تحميل الأقسام الرئيسية والفرعية\n+  Future<void> _loadAllCategories(List<FilterItemModel> filters) async {\n     try {\n       final QuerySnapshot<Map<String, dynamic>> snapshot =\n           await _firestore\n               .collection('categories')\n               .where('isActive', isEqualTo: true)\n-              .where('parentId', isNotEqualTo: null) // الفرعية فقط\n               .get();\n \n       for (var doc in snapshot.docs) {\n         final category = CategoryModel.fromSnapshot(doc);\n \n-        filters.add(\n-          FilterItemModel(\n-            id: category.id,\n-            title: category.nameAr,\n-            subtitle: 'قسم فرعي',\n-            imageUrl: category.imageUrl,\n-            type: FilterType.subCategory,\n-            filterKey: 'sub_${category.id}',\n-            parentId: category.parentId,\n-          ),\n-        );\n+        if (category.isMainCategory) {\n+          // إضافة القسم الرئيسي\n+          filters.add(\n+            FilterItemModel(\n+              id: category.id,\n+              title: category.nameAr,\n+              subtitle: 'قسم رئيسي',\n+              imageUrl: category.imageUrl,\n+              type: FilterType.mainCategory,\n+              filterKey: 'main_${category.id}',\n+            ),\n+          );\n+        } else {\n+          // إضافة القسم الفرعي\n+          filters.add(\n+            FilterItemModel(\n+              id: category.id,\n+              title: category.nameAr,\n+              subtitle: 'قسم فرعي',\n+              imageUrl: category.imageUrl,\n+              type: FilterType.subCategory,\n+              filterKey: 'sub_${category.id}',\n+              parentId: category.parentId,\n+            ),\n+          );\n+        }\n       }\n \n-      debugPrint('✅ تم تحميل ${snapshot.docs.length} قسم فرعي');\n+      debugPrint('✅ تم تحميل ${snapshot.docs.length} قسم (رئيسي وفرعي)');\n     } catch (e) {\n-      debugPrint('❌ خطأ في تحميل الأقسام الفرعية: $e');\n+      debugPrint('❌ خطأ في تحميل الأقسام: $e');\n     }\n   }\n \n   /// تحميل فلاتر البراند (الشركات والمنتجات)\n@@ -137,8 +154,115 @@\n       debugPrint('❌ خطأ في تحميل فلاتر البراند: $e');\n     }\n   }\n \n+  /// حساب عدد المنتجات لكل فلتر\n+  Future<void> _calculateProductCounts(List<FilterItemModel> filters) async {\n+    try {\n+      for (int i = 0; i < filters.length; i++) {\n+        final filter = filters[i];\n+        int productCount = 0;\n+\n+        switch (filter.type) {\n+          case FilterType.mainCategory:\n+            productCount = await _countProductsForMainCategory(filter.id);\n+            break;\n+          case FilterType.subCategory:\n+            productCount = await _countProductsForSubCategory(filter.id);\n+            break;\n+          case FilterType.company:\n+            productCount = await _countProductsForCompany(filter.id);\n+            break;\n+          case FilterType.product:\n+            productCount = await _countProductsForProduct(filter.id);\n+            break;\n+        }\n+\n+        // تحديث الفلتر مع العدد\n+        filters[i] = FilterItemModel(\n+          id: filter.id,\n+          title: filter.title,\n+          subtitle: filter.subtitle,\n+          imageUrl: filter.imageUrl,\n+          type: filter.type,\n+          filterKey: filter.filterKey,\n+          parentId: filter.parentId,\n+          parentName: filter.parentName,\n+          productCount: productCount,\n+        );\n+      }\n+      debugPrint('✅ تم حساب عدد المنتجات لجميع الفلاتر');\n+    } catch (e) {\n+      debugPrint('❌ خطأ في حساب عدد المنتجات: $e');\n+    }\n+  }\n+\n+  /// حساب عدد المنتجات للقسم الرئيسي\n+  Future<int> _countProductsForMainCategory(String categoryId) async {\n+    try {\n+      final result =\n+          await _firestore\n+              .collection('items')\n+              .where('mainCategoryId', isEqualTo: categoryId)\n+              .count()\n+              .get();\n+      return result.count ?? 0;\n+    } catch (e) {\n+      debugPrint('خطأ في حساب منتجات القسم الرئيسي $categoryId: $e');\n+      return 0;\n+    }\n+  }\n+\n+  /// حساب عدد المنتجات للقسم الفرعي\n+  Future<int> _countProductsForSubCategory(String categoryId) async {\n+    try {\n+      final result =\n+          await _firestore\n+              .collection('items')\n+              .where('subCategoryId', isEqualTo: categoryId)\n+              .count()\n+              .get();\n+      return result.count ?? 0;\n+    } catch (e) {\n+      debugPrint('خطأ في حساب منتجات القسم الفرعي $categoryId: $e');\n+      return 0;\n+    }\n+  }\n+\n+  /// حساب عدد المنتجات للشركة\n+  Future<int> _countProductsForCompany(String companyId) async {\n+    try {\n+      final result =\n+          await _firestore\n+              .collection('items')\n+              .where('itemCondition', isEqualTo: 'original')\n+              .where('originalCompanyId', isEqualTo: companyId)\n+              .count()\n+              .get();\n+      return result.count ?? 0;\n+    } catch (e) {\n+      debugPrint('خطأ في حساب منتجات الشركة $companyId: $e');\n+      return 0;\n+    }\n+  }\n+\n+  /// حساب عدد المنتجات للمنتج الأصلي\n+  Future<int> _countProductsForProduct(String productId) async {\n+    try {\n+      final result =\n+          await _firestore\n+              .collection('items')\n+              .where('itemCondition', isEqualTo: 'original')\n+              .where('originalProductId', isEqualTo: productId)\n+              .count()\n+              .get();\n+      return result.count ?? 0;\n+    } catch (e) {\n+      debugPrint('خطأ في حساب منتجات المنتج $productId: $e');\n+      return 0;\n+    }\n+  }\n+\n   /// إظهار/إخفاء عرض الفلاتر\n   void toggleFiltersVisibility() {\n     isVisible.value = !isVisible.value;\n     debugPrint('🔄 تبديل عرض الفلاتر: ${isVisible.value ? 'مرئي' : 'مخفي'}');\n@@ -220,8 +344,9 @@\n }\n \n /// أنواع الفلاتر\n enum FilterType {\n+  mainCategory, // قسم رئيسي\n   subCategory, // قسم فرعي\n   company, // شركة مصنعة\n   product, // منتج من شركة\n }\n@@ -229,8 +354,10 @@\n /// إضافة extension للحصول على وصف نوع الفلتر\n extension FilterTypeExtension on FilterType {\n   String get displayName {\n     switch (this) {\n+      case FilterType.mainCategory:\n+        return 'قسم رئيسي';\n       case FilterType.subCategory:\n         return 'قسم فرعي';\n       case FilterType.company:\n         return 'شركة مصنعة';\n@@ -240,8 +367,10 @@\n   }\n \n   IconData get icon {\n     switch (this) {\n+      case FilterType.mainCategory:\n+        return Icons.category_rounded;\n       case FilterType.subCategory:\n         return Icons.category_outlined;\n       case FilterType.company:\n         return Icons.business_outlined;\n@@ -251,8 +380,10 @@\n   }\n \n   Color get color {\n     switch (this) {\n+      case FilterType.mainCategory:\n+        return Colors.purple;\n       case FilterType.subCategory:\n         return Colors.blue;\n       case FilterType.company:\n         return Colors.green;\n"
                },
                {
                    "date": 1753096098478,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,8 +2,9 @@\n import 'package:get/get.dart';\n import 'package:cloud_firestore/cloud_firestore.dart';\n \n import '../../../Model/company_model.dart';\n+import '../../../XXX/xxx_firebase.dart';\n import 'enhanced_category_filter_controller.dart';\n \n /// كونترولر لعرض جميع الفلاتر المتاحة بشكل مسطح\n class FiltersDisplayController extends GetxController {\n@@ -15,8 +16,15 @@\n \n   // قوائم الفلاتر المختلطة\n   final RxList<FilterItemModel> allFilters = <FilterItemModel>[].obs;\n \n+  // cache لنتائج عداد المنتجات لتحسين الأداء\n+  final Map<String, int> _productCountCache = {};\n+\n+  // وقت انتهاء صلاحية الـ cache (5 دقائق)\n+  final Duration _cacheExpiry = Duration(minutes: 5);\n+  DateTime? _lastCacheUpdate;\n+\n   @override\n   void onInit() {\n     super.onInit();\n     loadAllFilters();\n@@ -27,23 +35,30 @@\n     try {\n       isLoading.value = true;\n       List<FilterItemModel> filters = [];\n \n-      // 1. تحميل الأقسام الرئيسية والفرعية\n-      await _loadAllCategories(filters);\n+      // تحميل جميع الفلاتر بالتوازي لتحسين الأداء\n+      await Future.wait([\n+        _loadAllCategories(filters),\n+        _loadBrandFilters(filters),\n+      ]);\n \n-      // 2. تحميل الشركات والمنتجات\n-      await _loadBrandFilters(filters);\n+      // حساب عدد المنتجات بالتوازي\n+      await _calculateProductCountsConcurrently(filters);\n \n-      // 3. حساب عدد المنتجات لكل فلتر (اختياري)\n-      await _calculateProductCounts(filters);\n+      // إزالة الفلاتر التي لا تحتوي على منتجات\n+      filters.removeWhere(\n+        (filter) => filter.productCount == null || filter.productCount! <= 0,\n+      );\n \n-      // 4. خلط الفلاتر عشوائياً\n+      // خلط الفلاتر عشوائياً\n       filters.shuffle();\n \n       allFilters.assignAll(filters);\n \n-      debugPrint('✅ تم تحميل ${allFilters.length} فلتر إجمالي');\n+      debugPrint(\n+        '✅ تم تحميل ${allFilters.length} فلتر إجمالي (بدون الفلاتر الفارغة)',\n+      );\n     } catch (e) {\n       debugPrint('❌ خطأ في تحميل الفلاتر: $e');\n     } finally {\n       isLoading.value = false;\n@@ -154,115 +169,205 @@\n       debugPrint('❌ خطأ في تحميل فلاتر البراند: $e');\n     }\n   }\n \n-  /// حساب عدد المنتجات لكل فلتر\n-  Future<void> _calculateProductCounts(List<FilterItemModel> filters) async {\n+  /// حساب عدد المنتجات لكل فلتر بشكل متوازي (محسن للأداء)\n+  Future<void> _calculateProductCountsConcurrently(\n+    List<FilterItemModel> filters,\n+  ) async {\n     try {\n-      for (int i = 0; i < filters.length; i++) {\n-        final filter = filters[i];\n-        int productCount = 0;\n+      // تقسيم المهام إلى مجموعات للمعالجة المتوازية\n+      const batchSize = 10; // معالجة 10 فلاتر في المرة الواحدة\n \n-        switch (filter.type) {\n-          case FilterType.mainCategory:\n-            productCount = await _countProductsForMainCategory(filter.id);\n-            break;\n-          case FilterType.subCategory:\n-            productCount = await _countProductsForSubCategory(filter.id);\n-            break;\n-          case FilterType.company:\n-            productCount = await _countProductsForCompany(filter.id);\n-            break;\n-          case FilterType.product:\n-            productCount = await _countProductsForProduct(filter.id);\n-            break;\n+      for (int i = 0; i < filters.length; i += batchSize) {\n+        final endIndex =\n+            (i + batchSize < filters.length) ? i + batchSize : filters.length;\n+        final batch = filters.sublist(i, endIndex);\n+\n+        // معالجة المجموعة الحالية بالتوازي\n+        final futures = batch.asMap().entries.map((entry) async {\n+          final filter = entry.value;\n+\n+          int productCount = 0;\n+          switch (filter.type) {\n+            case FilterType.mainCategory:\n+              productCount = await _countProductsForMainCategory(filter.id);\n+              break;\n+            case FilterType.subCategory:\n+              productCount = await _countProductsForSubCategory(filter.id);\n+              break;\n+            case FilterType.company:\n+              productCount = await _countProductsForCompany(filter.id);\n+              break;\n+            case FilterType.product:\n+              productCount = await _countProductsForProduct(filter.id);\n+              break;\n+          }\n+\n+          // تحديث الفلتر مع العدد\n+          return FilterItemModel(\n+            id: filter.id,\n+            title: filter.title,\n+            subtitle: filter.subtitle,\n+            imageUrl: filter.imageUrl,\n+            type: filter.type,\n+            filterKey: filter.filterKey,\n+            parentId: filter.parentId,\n+            parentName: filter.parentName,\n+            productCount: productCount,\n+          );\n+        });\n+\n+        // انتظار انتهاء المجموعة الحالية وتحديث القائمة\n+        final updatedBatch = await Future.wait(futures);\n+        for (int j = 0; j < updatedBatch.length; j++) {\n+          filters[i + j] = updatedBatch[j];\n         }\n \n-        // تحديث الفلتر مع العدد\n-        filters[i] = FilterItemModel(\n-          id: filter.id,\n-          title: filter.title,\n-          subtitle: filter.subtitle,\n-          imageUrl: filter.imageUrl,\n-          type: filter.type,\n-          filterKey: filter.filterKey,\n-          parentId: filter.parentId,\n-          parentName: filter.parentName,\n-          productCount: productCount,\n-        );\n+        // إضافة تأخير قصير لتجنب الضغط على قاعدة البيانات\n+        if (i + batchSize < filters.length) {\n+          await Future.delayed(Duration(milliseconds: 50));\n+        }\n       }\n-      debugPrint('✅ تم حساب عدد المنتجات لجميع الفلاتر');\n+\n+      debugPrint('✅ تم حساب عدد المنتجات لجميع الفلاتر بشكل متوازي');\n     } catch (e) {\n-      debugPrint('❌ خطأ في حساب عدد المنتجات: $e');\n+      debugPrint('❌ خطأ في حساب عدد المنتجات المتوازي: $e');\n     }\n   }\n \n   /// حساب عدد المنتجات للقسم الرئيسي\n   Future<int> _countProductsForMainCategory(String categoryId) async {\n+    final cacheKey = 'main_$categoryId';\n+\n+    // التحقق من وجود النتيجة في الـ cache\n+    if (_isCacheValid() && _productCountCache.containsKey(cacheKey)) {\n+      return _productCountCache[cacheKey]!;\n+    }\n+\n     try {\n       final result =\n           await _firestore\n-              .collection('items')\n+              .collection(FirebaseX.itemsCollection)\n+              .where('appName', isEqualTo: FirebaseX.appName)\n               .where('mainCategoryId', isEqualTo: categoryId)\n               .count()\n               .get();\n-      return result.count ?? 0;\n+\n+      final count = result.count ?? 0;\n+      _productCountCache[cacheKey] = count; // حفظ في الـ cache\n+      _updateCacheTimestamp();\n+\n+      return count;\n     } catch (e) {\n       debugPrint('خطأ في حساب منتجات القسم الرئيسي $categoryId: $e');\n       return 0;\n     }\n   }\n \n   /// حساب عدد المنتجات للقسم الفرعي\n   Future<int> _countProductsForSubCategory(String categoryId) async {\n+    final cacheKey = 'sub_$categoryId';\n+\n+    if (_isCacheValid() && _productCountCache.containsKey(cacheKey)) {\n+      return _productCountCache[cacheKey]!;\n+    }\n+\n     try {\n       final result =\n           await _firestore\n-              .collection('items')\n+              .collection(FirebaseX.itemsCollection)\n+              .where('appName', isEqualTo: FirebaseX.appName)\n               .where('subCategoryId', isEqualTo: categoryId)\n               .count()\n               .get();\n-      return result.count ?? 0;\n+\n+      final count = result.count ?? 0;\n+      _productCountCache[cacheKey] = count;\n+      _updateCacheTimestamp();\n+\n+      return count;\n     } catch (e) {\n       debugPrint('خطأ في حساب منتجات القسم الفرعي $categoryId: $e');\n       return 0;\n     }\n   }\n \n   /// حساب عدد المنتجات للشركة\n   Future<int> _countProductsForCompany(String companyId) async {\n+    final cacheKey = 'company_$companyId';\n+\n+    if (_isCacheValid() && _productCountCache.containsKey(cacheKey)) {\n+      return _productCountCache[cacheKey]!;\n+    }\n+\n     try {\n       final result =\n           await _firestore\n-              .collection('items')\n+              .collection(FirebaseX.itemsCollection)\n+              .where('appName', isEqualTo: FirebaseX.appName)\n               .where('itemCondition', isEqualTo: 'original')\n               .where('originalCompanyId', isEqualTo: companyId)\n               .count()\n               .get();\n-      return result.count ?? 0;\n+\n+      final count = result.count ?? 0;\n+      _productCountCache[cacheKey] = count;\n+      _updateCacheTimestamp();\n+\n+      return count;\n     } catch (e) {\n       debugPrint('خطأ في حساب منتجات الشركة $companyId: $e');\n       return 0;\n     }\n   }\n \n   /// حساب عدد المنتجات للمنتج الأصلي\n   Future<int> _countProductsForProduct(String productId) async {\n+    final cacheKey = 'product_$productId';\n+\n+    if (_isCacheValid() && _productCountCache.containsKey(cacheKey)) {\n+      return _productCountCache[cacheKey]!;\n+    }\n+\n     try {\n       final result =\n           await _firestore\n-              .collection('items')\n+              .collection(FirebaseX.itemsCollection)\n+              .where('appName', isEqualTo: FirebaseX.appName)\n               .where('itemCondition', isEqualTo: 'original')\n               .where('originalProductId', isEqualTo: productId)\n               .count()\n               .get();\n-      return result.count ?? 0;\n+\n+      final count = result.count ?? 0;\n+      _productCountCache[cacheKey] = count;\n+      _updateCacheTimestamp();\n+\n+      return count;\n     } catch (e) {\n       debugPrint('خطأ في حساب منتجات المنتج $productId: $e');\n       return 0;\n     }\n   }\n \n+  /// التحقق من صلاحية الـ cache\n+  bool _isCacheValid() {\n+    if (_lastCacheUpdate == null) return false;\n+    return DateTime.now().difference(_lastCacheUpdate!) < _cacheExpiry;\n+  }\n+\n+  /// تحديث وقت آخر تحديث للـ cache\n+  void _updateCacheTimestamp() {\n+    _lastCacheUpdate = DateTime.now();\n+  }\n+\n+  /// مسح الـ cache\n+  void _clearCache() {\n+    _productCountCache.clear();\n+    _lastCacheUpdate = null;\n+  }\n+\n   /// إظهار/إخفاء عرض الفلاتر\n   void toggleFiltersVisibility() {\n     isVisible.value = !isVisible.value;\n     debugPrint('🔄 تبديل عرض الفلاتر: ${isVisible.value ? 'مرئي' : 'مخفي'}');\n@@ -279,8 +384,9 @@\n   }\n \n   /// إعادة تحميل الفلاتر\n   Future<void> refreshFilters() async {\n+    _clearCache(); // مسح الـ cache قبل إعادة التحميل\n     await loadAllFilters();\n   }\n \n   /// البحث في الفلاتر\n"
                },
                {
                    "date": 1753149650098,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -515,9 +515,9 @@\n \n       // طباعة أسماء المنتجات للتأكد\n       for (int i = 0; i < randomProducts.length && i < 3; i++) {\n         debugPrint(\n-          '� منتج ${i + 1}: ${randomProducts[i]['name']} - السعر: ${randomProducts[i]['price']}',\n+          '\udce6 منتج ${i + 1}: ${randomProducts[i]['name']} - السعر: ${randomProducts[i]['price']}',\n         );\n       }\n \n       debugPrint('🎯 انتهاء _loadRandomProducts بنجاح');\n"
                },
                {
                    "date": 1753150374087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -515,9 +515,9 @@\n \n       // طباعة أسماء المنتجات للتأكد\n       for (int i = 0; i < randomProducts.length && i < 3; i++) {\n         debugPrint(\n-          '� منتج ${i + 1}: ${randomProducts[i]['name']} - السعر: ${randomProducts[i]['price']}',\n+          '\udce6 منتج ${i + 1}: ${randomProducts[i]['name']} - السعر: ${randomProducts[i]['price']}',\n         );\n       }\n \n       debugPrint('🎯 انتهاء _loadRandomProducts بنجاح');\n"
                }
            ],
            "date": 1753068346584,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\nimport 'package:get/get.dart';\nimport 'package:cloud_firestore/cloud_firestore.dart';\n\nimport '../../../Model/company_model.dart';\nimport 'enhanced_category_filter_controller.dart';\n\n/// كونترولر لعرض جميع الفلاتر المتاحة بشكل مسطح\nclass FiltersDisplayController extends GetxController {\n  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n\n  // حالة التحميل\n  final RxBool isLoading = false.obs;\n  final RxBool isVisible = false.obs;\n\n  // قوائم الفلاتر المختلطة\n  final RxList<FilterItemModel> allFilters = <FilterItemModel>[].obs;\n\n  @override\n  void onInit() {\n    super.onInit();\n    loadAllFilters();\n  }\n\n  /// تحميل جميع الفلاتر وخلطها عشوائياً\n  Future<void> loadAllFilters() async {\n    try {\n      isLoading.value = true;\n      List<FilterItemModel> filters = [];\n\n      // 1. تحميل الأقسام الفرعية\n      await _loadSubCategories(filters);\n\n      // 2. تحميل الشركات والمنتجات\n      await _loadBrandFilters(filters);\n\n      // 3. خلط الفلاتر عشوائياً\n      filters.shuffle();\n\n      allFilters.assignAll(filters);\n\n      debugPrint('✅ تم تحميل ${allFilters.length} فلتر إجمالي');\n    } catch (e) {\n      debugPrint('❌ خطأ في تحميل الفلاتر: $e');\n    } finally {\n      isLoading.value = false;\n    }\n  }\n\n  /// تحميل الأقسام الفرعية\n  Future<void> _loadSubCategories(List<FilterItemModel> filters) async {\n    try {\n      final QuerySnapshot<Map<String, dynamic>> snapshot =\n          await _firestore\n              .collection('categories')\n              .where('isActive', isEqualTo: true)\n              .where('parentId', isNotEqualTo: null) // الفرعية فقط\n              .get();\n\n      for (var doc in snapshot.docs) {\n        final category = CategoryModel.fromSnapshot(doc);\n\n        filters.add(\n          FilterItemModel(\n            id: category.id,\n            title: category.nameAr,\n            subtitle: 'قسم فرعي',\n            imageUrl: category.imageUrl,\n            type: FilterType.subCategory,\n            filterKey: 'sub_${category.id}',\n            parentId: category.parentId,\n          ),\n        );\n      }\n\n      debugPrint('✅ تم تحميل ${snapshot.docs.length} قسم فرعي');\n    } catch (e) {\n      debugPrint('❌ خطأ في تحميل الأقسام الفرعية: $e');\n    }\n  }\n\n  /// تحميل فلاتر البراند (الشركات والمنتجات)\n  Future<void> _loadBrandFilters(List<FilterItemModel> filters) async {\n    try {\n      // تحميل الشركات\n      final QuerySnapshot companiesSnapshot =\n          await _firestore\n              .collection('brand_companies')\n              .where('isActive', isEqualTo: true)\n              .get();\n\n      for (var companyDoc in companiesSnapshot.docs) {\n        final company = CompanyModel.fromFirestore(companyDoc);\n\n        // إضافة الشركة كفلتر\n        filters.add(\n          FilterItemModel(\n            id: company.id,\n            title: company.nameAr,\n            subtitle: 'شركة مصنعة',\n            imageUrl: company.logoUrl,\n            type: FilterType.company,\n            filterKey: 'original_company_${company.id}',\n          ),\n        );\n\n        // تحميل منتجات الشركة\n        final QuerySnapshot productsSnapshot =\n            await _firestore\n                .collection('company_products')\n                .where('companyId', isEqualTo: company.id)\n                .where('isActive', isEqualTo: true)\n                .get();\n\n        for (var productDoc in productsSnapshot.docs) {\n          final product = CompanyProductModel.fromFirestore(productDoc);\n\n          filters.add(\n            FilterItemModel(\n              id: product.id,\n              title: product.nameAr,\n              subtitle: 'منتج ${company.nameAr}',\n              imageUrl: product.imageUrl,\n              type: FilterType.product,\n              filterKey: 'original_product_${product.id}',\n              parentId: company.id,\n              parentName: company.nameAr,\n            ),\n          );\n        }\n      }\n\n      debugPrint(\n        '✅ تم تحميل ${companiesSnapshot.docs.length} شركة مع منتجاتها',\n      );\n    } catch (e) {\n      debugPrint('❌ خطأ في تحميل فلاتر البراند: $e');\n    }\n  }\n\n  /// إظهار/إخفاء عرض الفلاتر\n  void toggleFiltersVisibility() {\n    isVisible.value = !isVisible.value;\n    debugPrint('🔄 تبديل عرض الفلاتر: ${isVisible.value ? 'مرئي' : 'مخفي'}');\n\n    if (isVisible.value && allFilters.isEmpty) {\n      loadAllFilters();\n    }\n  }\n\n  /// إخفاء عرض الفلاتر\n  void hideFilters() {\n    isVisible.value = false;\n    debugPrint('🔄 إخفاء عرض الفلاتر');\n  }\n\n  /// إعادة تحميل الفلاتر\n  Future<void> refreshFilters() async {\n    await loadAllFilters();\n  }\n\n  /// البحث في الفلاتر\n  List<FilterItemModel> searchFilters(String query) {\n    if (query.isEmpty) return allFilters;\n\n    return allFilters\n        .where(\n          (filter) =>\n              filter.title.toLowerCase().contains(query.toLowerCase()) ||\n              filter.subtitle.toLowerCase().contains(query.toLowerCase()),\n        )\n        .toList();\n  }\n\n  /// التصفية حسب نوع الفلتر\n  List<FilterItemModel> getFiltersByType(FilterType type) {\n    return allFilters.where((filter) => filter.type == type).toList();\n  }\n}\n\n/// نموذج عنصر الفلتر\nclass FilterItemModel {\n  final String id;\n  final String title;\n  final String subtitle;\n  final String? imageUrl;\n  final FilterType type;\n  final String filterKey;\n  final String? parentId;\n  final String? parentName;\n  final int? productCount; // عدد المنتجات (اختياري)\n\n  FilterItemModel({\n    required this.id,\n    required this.title,\n    required this.subtitle,\n    this.imageUrl,\n    required this.type,\n    required this.filterKey,\n    this.parentId,\n    this.parentName,\n    this.productCount,\n  });\n\n  @override\n  String toString() {\n    return 'FilterItemModel(id: $id, title: $title, type: $type, filterKey: $filterKey, productCount: $productCount)';\n  }\n\n  @override\n  bool operator ==(Object other) {\n    if (identical(this, other)) return true;\n    return other is FilterItemModel && other.id == id && other.type == type;\n  }\n\n  @override\n  int get hashCode {\n    return id.hashCode ^ type.hashCode;\n  }\n}\n\n/// أنواع الفلاتر\nenum FilterType {\n  subCategory, // قسم فرعي\n  company, // شركة مصنعة\n  product, // منتج من شركة\n}\n\n/// إضافة extension للحصول على وصف نوع الفلتر\nextension FilterTypeExtension on FilterType {\n  String get displayName {\n    switch (this) {\n      case FilterType.subCategory:\n        return 'قسم فرعي';\n      case FilterType.company:\n        return 'شركة مصنعة';\n      case FilterType.product:\n        return 'منتج أصلي';\n    }\n  }\n\n  IconData get icon {\n    switch (this) {\n      case FilterType.subCategory:\n        return Icons.category_outlined;\n      case FilterType.company:\n        return Icons.business_outlined;\n      case FilterType.product:\n        return Icons.inventory_2_outlined;\n    }\n  }\n\n  Color get color {\n    switch (this) {\n      case FilterType.subCategory:\n        return Colors.blue;\n      case FilterType.company:\n        return Colors.green;\n      case FilterType.product:\n        return Colors.orange;\n    }\n  }\n}\n"
        }
    ]
}