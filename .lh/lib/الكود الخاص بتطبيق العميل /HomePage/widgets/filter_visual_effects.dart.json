{
    "sourceFile": "lib/الكود الخاص بتطبيق العميل /HomePage/widgets/filter_visual_effects.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752862376174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752862376174,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\n\n/// ويدجت تأثيرات بصرية متقدمة للفلاتر\nclass FilterVisualEffects extends StatefulWidget {\n  final Widget child;\n  final bool isActive;\n  final Color primaryColor;\n  \n  const FilterVisualEffects({\n    super.key,\n    required this.child,\n    required this.isActive,\n    required this.primaryColor,\n  });\n\n  @override\n  State<FilterVisualEffects> createState() => _FilterVisualEffectsState();\n}\n\nclass _FilterVisualEffectsState extends State<FilterVisualEffects>\n    with TickerProviderStateMixin {\n  late AnimationController _pulseController;\n  late AnimationController _glowController;\n  late Animation<double> _pulseAnimation;\n  late Animation<double> _glowAnimation;\n\n  @override\n  void initState() {\n    super.initState();\n    \n    _pulseController = AnimationController(\n      duration: const Duration(milliseconds: 2000),\n      vsync: this,\n    );\n    \n    _glowController = AnimationController(\n      duration: const Duration(milliseconds: 1500),\n      vsync: this,\n    );\n    \n    _pulseAnimation = Tween<double>(\n      begin: 1.0,\n      end: 1.05,\n    ).animate(CurvedAnimation(\n      parent: _pulseController,\n      curve: Curves.easeInOut,\n    ));\n    \n    _glowAnimation = Tween<double>(\n      begin: 0.0,\n      end: 1.0,\n    ).animate(CurvedAnimation(\n      parent: _glowController,\n      curve: Curves.easeInOut,\n    ));\n  }\n\n  @override\n  void didUpdateWidget(FilterVisualEffects oldWidget) {\n    super.didUpdateWidget(oldWidget);\n    \n    if (widget.isActive != oldWidget.isActive) {\n      if (widget.isActive) {\n        _pulseController.repeat(reverse: true);\n        _glowController.repeat(reverse: true);\n      } else {\n        _pulseController.stop();\n        _glowController.stop();\n      }\n    }\n  }\n\n  @override\n  void dispose() {\n    _pulseController.dispose();\n    _glowController.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (!widget.isActive) {\n      return widget.child;\n    }\n\n    return AnimatedBuilder(\n      animation: Listenable.merge([_pulseAnimation, _glowAnimation]),\n      builder: (context, child) {\n        return Transform.scale(\n          scale: _pulseAnimation.value,\n          child: Container(\n            decoration: BoxDecoration(\n              borderRadius: BorderRadius.circular(25),\n              boxShadow: [\n                BoxShadow(\n                  color: widget.primaryColor.withValues(\n                    alpha: 0.3 * _glowAnimation.value,\n                  ),\n                  blurRadius: 30 * _glowAnimation.value,\n                  spreadRadius: 10 * _glowAnimation.value,\n                ),\n              ],\n            ),\n            child: widget.child,\n          ),\n        );\n      },\n    );\n  }\n}\n\n/// ويدجت التدرج المتحرك للخلفية\nclass AnimatedGradientBackground extends StatefulWidget {\n  final List<Color> colors;\n  final Duration duration;\n  final Widget child;\n  \n  const AnimatedGradientBackground({\n    super.key,\n    required this.colors,\n    this.duration = const Duration(seconds: 3),\n    required this.child,\n  });\n\n  @override\n  State<AnimatedGradientBackground> createState() => _AnimatedGradientBackgroundState();\n}\n\nclass _AnimatedGradientBackgroundState extends State<AnimatedGradientBackground>\n    with SingleTickerProviderStateMixin {\n  late AnimationController _controller;\n  late Animation<double> _animation;\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = AnimationController(\n      duration: widget.duration,\n      vsync: this,\n    );\n    _animation = Tween<double>(\n      begin: 0.0,\n      end: 1.0,\n    ).animate(_controller);\n    \n    _controller.repeat();\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return AnimatedBuilder(\n      animation: _animation,\n      builder: (context, child) {\n        return Container(\n          decoration: BoxDecoration(\n            gradient: LinearGradient(\n              colors: widget.colors,\n              begin: Alignment.topLeft,\n              end: Alignment.bottomRight,\n              transform: GradientRotation(_animation.value * 2 * 3.14159),\n            ),\n          ),\n          child: widget.child,\n        );\n      },\n    );\n  }\n}\n\n/// ويدجت الجسيمات المتحركة\nclass ParticleEffect extends StatefulWidget {\n  final int particleCount;\n  final Color particleColor;\n  final double maxSize;\n  \n  const ParticleEffect({\n    super.key,\n    this.particleCount = 20,\n    this.particleColor = Colors.white,\n    this.maxSize = 4.0,\n  });\n\n  @override\n  State<ParticleEffect> createState() => _ParticleEffectState();\n}\n\nclass _ParticleEffectState extends State<ParticleEffect>\n    with SingleTickerProviderStateMixin {\n  late AnimationController _controller;\n  List<Particle> particles = [];\n\n  @override\n  void initState() {\n    super.initState();\n    _controller = AnimationController(\n      duration: const Duration(seconds: 5),\n      vsync: this,\n    );\n    \n    _initializeParticles();\n    _controller.repeat();\n  }\n\n  void _initializeParticles() {\n    particles = List.generate(widget.particleCount, (index) {\n      return Particle(\n        x: (index / widget.particleCount),\n        y: (index % 2 == 0) ? 0.2 : 0.8,\n        size: (index % 3 + 1) * (widget.maxSize / 3),\n        speed: 0.01 + (index % 5) * 0.005,\n      );\n    });\n  }\n\n  @override\n  void dispose() {\n    _controller.dispose();\n    super.dispose();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return AnimatedBuilder(\n      animation: _controller,\n      builder: (context, child) {\n        return CustomPaint(\n          painter: ParticlePainter(\n            particles: particles,\n            animation: _controller.value,\n            color: widget.particleColor,\n          ),\n          size: Size.infinite,\n        );\n      },\n    );\n  }\n}\n\nclass Particle {\n  double x;\n  double y;\n  double size;\n  double speed;\n  \n  Particle({\n    required this.x,\n    required this.y,\n    required this.size,\n    required this.speed,\n  });\n}\n\nclass ParticlePainter extends CustomPainter {\n  final List<Particle> particles;\n  final double animation;\n  final Color color;\n  \n  ParticlePainter({\n    required this.particles,\n    required this.animation,\n    required this.color,\n  });\n\n  @override\n  void paint(Canvas canvas, Size size) {\n    final paint = Paint()\n      ..color = color.withValues(alpha: 0.6)\n      ..style = PaintingStyle.fill;\n\n    for (final particle in particles) {\n      final x = (particle.x + animation * particle.speed) % 1.0;\n      final y = particle.y + (0.1 * (animation * 2 - 1));\n      \n      canvas.drawCircle(\n        Offset(x * size.width, y * size.height),\n        particle.size,\n        paint,\n      );\n    }\n  }\n\n  @override\n  bool shouldRepaint(covariant CustomPainter oldDelegate) => true;\n}\n"
        }
    ]
}