{
    "sourceFile": "lib/الكود الخاص بتطبيق العميل /googleMap/Getx/GetXareYouShorMapOrder.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752751503157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1753157006808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -378,10 +378,20 @@\n               _firestore.collection(collectionName).doc(uidItem),\n             );\n \n             if (productDetailsDoc.exists) {\n+              // استخدام suggestedRetailPrice أولاً ثم priceOfItem كبديل\n+              final dynamic suggestedPrice =\n+                  productDetailsDoc.data() is Map<String, dynamic>\n+                      ? (productDetailsDoc.data()\n+                          as Map<String, dynamic>)['suggestedRetailPrice']\n+                      : null;\n+              final dynamic regularPrice = productDetailsDoc.get('priceOfItem');\n+\n               itemPrice =\n-                  (productDetailsDoc.get('priceOfItem') as num?)?.toInt() ?? 0;\n+                  suggestedPrice != null\n+                      ? (suggestedPrice as num?)?.toInt() ?? 0\n+                      : (regularPrice as num?)?.toInt() ?? 0;\n             } else {\n               debugPrint(\n                 \"!!! تحذير: منتج ID: $uidItem (مجموعة: $collectionName) غير موجود. سيتم احتسابه بصفر.\",\n               );\n"
                }
            ],
            "date": 1752751503157,
            "name": "Commit-0",
            "content": "import 'dart:async';\nimport 'dart:math'; // For Random\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:get/get.dart';\n\nimport '../../../Model/model_order.dart';\nimport '../../../XXX/xxx_firebase.dart';\nimport '../../../Model/model_the_order_list.dart';\nimport '../../bottonBar/botonBar.dart'; // For navigation\nimport '../../controler/local-notification-onroller.dart'; // Your LocalNotification class\nimport '../../theـchosen/GetXController/GetAddAndRemove.dart'; // To get cart summary\n\nclass GetxAreYouSureMapOrder extends GetxController {\n  // --- الحالة الداخلية للمتحكم ---\n  double latitude;\n  double longitude;\n  final String tokenUser; // FCM token of the current user (buyer)\n\n  // Rx Variables for reactive UI updates\n  var isLoading = false.obs; // For overall loading state\n  final _confirmationDialogIsLoading =\n      false.obs; // Specific for loading within the confirmation dialog\n\n  // --- Firebase Instances ---\n  final FirebaseFirestore _firestore = FirebaseFirestore.instance;\n  final FirebaseAuth _auth = FirebaseAuth.instance;\n\n  // --- Cart Controller ---\n  // Make sure GetAddAndRemove is put() before this controller is initialized or used.\n  // It's better to pass it via constructor or use a binding.\n  // For this example, we'll try to find it. If not found, _sendOrder will have issues.\n  late GetAddAndRemove _cartController;\n\n  GetxAreYouSureMapOrder({\n    required this.latitude,\n    required this.longitude,\n    required this.tokenUser,\n  });\n\n  @override\n  void onInit() {\n    super.onInit();\n    try {\n      _cartController = Get.find<GetAddAndRemove>();\n    } catch (e) {\n      debugPrint(\n        \"GetxAreYouSureMapOrder: GetAddAndRemove controller not found. Cart summary will not be available.\",\n      );\n      // Initialize with a dummy if needed, or handle this case gracefully\n      // For now, if not found, methods requiring it might fail or show defaults.\n    }\n  }\n\n  /// Generates a random number string (can be improved for uniqueness guarantee)\n  String _generateOrderNumber() {\n    // Consider using Firestore's auto-generated IDs for more robust uniqueness if this\n    // needs to be globally unique across all orders. For per-seller sub-orders, this might be okay.\n    Random random = Random();\n    return List.generate(10, (_) => random.nextInt(10)).join();\n  }\n\n  /// Displays a confirmation dialog before sending the order.\n  Future<void> showConfirmationDialog(BuildContext context) async {\n    // Get current cart summary if controller is available\n    String totalItemsStr = \"-\";\n    String totalPriceStr = \"-\";\n    int itemCount = 0;\n\n    if (Get.isRegistered<GetAddAndRemove>()) {\n      if (!_cartController.initialized) {\n        await _cartController.calculateTotals(); // Ensure totals are calculated\n      }\n      itemCount =\n          _cartController\n              .getTotalItemCountInCart(); // Implement this in GetAddAndRemove\n      totalItemsStr = itemCount.toString();\n      totalPriceStr = \"${_cartController.total.value} ${FirebaseX.currency}\";\n    }\n\n    // Check if cart is empty\n    if (itemCount == 0 && Get.isRegistered<GetAddAndRemove>()) {\n      Get.snackbar(\n        \"سلة فارغة\",\n        \"الرجاء إضافة منتجات إلى السلة أولاً.\",\n        snackPosition: SnackPosition.BOTTOM,\n        backgroundColor: Colors.orange.shade700,\n        colorText: Colors.white,\n      );\n      return;\n    }\n\n    return Get.dialog(\n      Obx(\n        () => AlertDialog.adaptive(\n          // Using adaptive for better platform feel\n          shape: RoundedRectangleBorder(\n            borderRadius: BorderRadius.circular(20),\n          ),\n          backgroundColor: Colors.white,\n          titlePadding: const EdgeInsets.only(\n            top: 24,\n            bottom: 0,\n            left: 24,\n            right: 24,\n          ),\n          title:\n              _confirmationDialogIsLoading.value\n                  ? Column(\n                    mainAxisSize: MainAxisSize.min,\n                    children: [\n                      const CircularProgressIndicator(color: Colors.blueAccent),\n                      const SizedBox(height: 20),\n                      Text(\n                        'جاري إرسال الطلب...',\n                        textAlign: TextAlign.center,\n                        style: TextStyle(\n                          fontSize: Get.width / 24, // Responsive font size\n                          color: Colors.blueGrey,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                    ],\n                  )\n                  : Row(\n                    children: [\n                      Icon(\n                        Icons.shopping_cart_checkout,\n                        color: Colors.blueAccent,\n                        size: Get.width / 12,\n                      ),\n                      const SizedBox(width: 10),\n                      Expanded(\n                        child: Text(\n                          'تأكيد إرسال الطلب؟',\n                          style: TextStyle(\n                            fontSize: Get.width / 22,\n                            color: Colors.black87,\n                            fontWeight: FontWeight.bold,\n                          ),\n                          textAlign: TextAlign.center,\n                        ),\n                      ),\n                    ],\n                  ),\n          contentPadding: const EdgeInsets.symmetric(\n            horizontal: 24,\n            vertical: 20,\n          ),\n          content:\n              _confirmationDialogIsLoading.value\n                  ? const SizedBox.shrink() // Don't show content if loading title is shown\n                  : Column(\n                    mainAxisSize: MainAxisSize.min,\n                    crossAxisAlignment: CrossAxisAlignment.center,\n                    children: [\n                      Text(\n                        'سيتم تحديد موقعك الحالي لإتمام عملية التوصيل.',\n                        textAlign: TextAlign.center,\n                        style: TextStyle(\n                          fontSize: Get.width / 28,\n                          color: Colors.grey.shade700,\n                        ),\n                      ),\n                      const SizedBox(height: 15),\n                      if (Get.isRegistered<GetAddAndRemove>()) ...[\n                        Text(\n                          \"ملخص الطلب:\",\n                          style: TextStyle(\n                            fontSize: Get.width / 26,\n                            fontWeight: FontWeight.bold,\n                            color: Colors.black54,\n                          ),\n                        ),\n                        const SizedBox(height: 5),\n                        Text(\n                          \"إجمالي المنتجات: $totalItemsStr\",\n                          style: TextStyle(fontSize: Get.width / 28),\n                        ),\n                        Text(\n                          \"السعر الإجمالي: $totalPriceStr\",\n                          style: TextStyle(\n                            fontSize: Get.width / 28,\n                            color: Theme.of(context).primaryColor,\n                            fontWeight: FontWeight.bold,\n                          ),\n                        ),\n                      ],\n                      const SizedBox(height: 15),\n                      Text(\n                        'لا يمكن التراجع عن الطلب بعد التأكيد.',\n                        textAlign: TextAlign.center,\n                        style: TextStyle(\n                          fontSize: Get.width / 30,\n                          color: Colors.red.shade400,\n                        ),\n                      ),\n                    ],\n                  ),\n          actionsAlignment: MainAxisAlignment.spaceEvenly,\n          actionsPadding: const EdgeInsets.only(\n            bottom: 16,\n            left: 16,\n            right: 16,\n            top: 0,\n          ),\n          actions:\n              _confirmationDialogIsLoading.value\n                  ? [] // No actions when loading in dialog\n                  : [\n                    TextButton(\n                      style: TextButton.styleFrom(\n                        padding: const EdgeInsets.symmetric(\n                          horizontal: 20,\n                          vertical: 10,\n                        ),\n                        shape: RoundedRectangleBorder(\n                          borderRadius: BorderRadius.circular(10),\n                        ),\n                      ),\n                      onPressed: () => Get.back(), // Close dialog\n                      child: Text(\n                        'إلغاء',\n                        style: TextStyle(\n                          fontSize: Get.width / 26,\n                          color: Colors.grey.shade700,\n                        ),\n                      ),\n                    ),\n                    ElevatedButton(\n                      style: ElevatedButton.styleFrom(\n                        backgroundColor: Colors.green.shade600,\n                        padding: const EdgeInsets.symmetric(\n                          horizontal: 30,\n                          vertical: 12,\n                        ),\n                        shape: RoundedRectangleBorder(\n                          borderRadius: BorderRadius.circular(10),\n                        ),\n                      ),\n                      onPressed: () async {\n                        // Don't pop dialog here, _sendOrder will handle navigation or error.\n                        // But start dialog specific loading.\n                        _confirmationDialogIsLoading.value = true;\n                        await _sendOrder(context);\n                        _confirmationDialogIsLoading.value = false;\n                        if (Get.isDialogOpen ?? false) {\n                          // Check if dialog is still open\n                          Get.back(); // Close if processing finished and it's still up\n                        }\n                      },\n                      child: Text(\n                        'تأكيد وإرسال',\n                        style: TextStyle(\n                          fontSize: Get.width / 26,\n                          color: Colors.white,\n                          fontWeight: FontWeight.bold,\n                        ),\n                      ),\n                    ),\n                  ],\n        ),\n      ),\n      barrierDismissible:\n          !_confirmationDialogIsLoading\n              .value, // Prevent dismiss while processing\n    );\n  }\n\n  /// Main function to process and send the order.\n  Future<void> _sendOrder(BuildContext context) async {\n    isLoading.value =\n        true; // Overall loading state for the screen if needed outside dialog\n    update(); // Update UI for screen-level indicators if any\n\n    final String? currentUserId = _auth.currentUser?.uid;\n    if (currentUserId == null) {\n      _showErrorSnackbar(\"خطأ\", \"المستخدم غير مسجل الدخول.\");\n      isLoading.value = false;\n      update();\n      return;\n    }\n\n    // Fetch buyer details for notifications\n    String buyerName = 'مستخدم';\n    String? buyerImageUrl;\n    try {\n      DocumentSnapshot buyerDoc =\n          await _firestore\n              .collection(FirebaseX.collectionApp)\n              .doc(currentUserId)\n              .get();\n      if (buyerDoc.exists) {\n        buyerName = buyerDoc.get('name') ?? 'مستخدم';\n        buyerImageUrl = buyerDoc.get('url');\n      }\n    } catch (e) {\n      debugPrint(\"Error fetching buyer details: $e\");\n      // Continue, default buyerName is set.\n    }\n\n    QuerySnapshot cartSnapshot;\n    try {\n      cartSnapshot =\n          await _firestore\n              .collection('the-chosen')\n              .doc(currentUserId)\n              .collection(FirebaseX.appName)\n              .get();\n\n      if (cartSnapshot.docs.isEmpty) {\n        _showInfoSnackbar(\"سلة فارغة\", \"لا يوجد منتجات في السلة لإرسالها.\");\n        isLoading.value = false;\n        update();\n        return;\n      }\n    } catch (e) {\n      _showErrorSnackbar(\"خطأ في الشبكة\", \"فشل في جلب عناصر السلة: $e\");\n      isLoading.value = false;\n      update();\n      return;\n    }\n\n    // Group items by seller (uidAdd)\n    Map<String, List<QueryDocumentSnapshot>> itemsBySeller = {};\n    for (var doc in cartSnapshot.docs) {\n      final data = doc.data() as Map<String, dynamic>;\n      String sellerUid =\n          data['uidAdd'] as String? ??\n          'unknown_seller_uid'; // Handle if uidAdd is missing\n      itemsBySeller.putIfAbsent(sellerUid, () => []).add(doc);\n    }\n\n    List<String> successfulSellerOrderDisplayIds = [];\n    List<String> failedSellerUids = [];\n    bool anySellerProcessingSucceeded = false;\n\n    for (String sellerUid in itemsBySeller.keys) {\n      if (sellerUid == 'unknown_seller_uid') {\n        debugPrint(\"Skipping items with unknown_seller_uid\");\n        // Potentially add these to a separate \"failed\" list or notify admin\n        failedSellerUids.add(\"منتجات بدون معرّف بائع\");\n        continue;\n      }\n      List<QueryDocumentSnapshot> sellerItems = itemsBySeller[sellerUid]!;\n      String sellerOrderDisplayNumber =\n          _generateOrderNumber(); // For display/notification\n\n      try {\n        // ---- Firestore Transaction per Seller ----\n        String? createdOrderId = await _firestore.runTransaction((\n          transaction,\n        ) async {\n          DocumentReference sellerOrderDocRef =\n              _firestore\n                  .collection(FirebaseX.ordersCollection)\n                  .doc(); // Auto-ID for main order doc\n\n          double totalPriceForThisSeller = 0.0;\n          // Calculate total price for this seller's items\n          for (var itemDocInCart in sellerItems) {\n            final chosenItemData = itemDocInCart.data() as Map<String, dynamic>;\n            String uidItem = chosenItemData['uidItem'] as String;\n            int quantity = chosenItemData['number'] as int? ?? 1;\n            bool isOfferItem = chosenItemData['isOfer'] as bool? ?? false;\n\n            DocumentSnapshot productDetailsDoc;\n            int itemPrice = 0;\n\n            String collectionName =\n                isOfferItem\n                    ? FirebaseX.offersCollection\n                    : FirebaseX.itemsCollection;\n\n            // Use transaction.get() to read data within a transaction\n            productDetailsDoc = await transaction.get(\n              _firestore.collection(collectionName).doc(uidItem),\n            );\n\n            if (productDetailsDoc.exists) {\n              itemPrice =\n                  (productDetailsDoc.get('priceOfItem') as num?)?.toInt() ?? 0;\n            } else {\n              debugPrint(\n                \"!!! تحذير: منتج ID: $uidItem (مجموعة: $collectionName) غير موجود. سيتم احتسابه بصفر.\",\n              );\n              // Throw an error to fail the transaction for this seller if a product is missing\n              // This ensures order consistency for the seller.\n              throw FirebaseException(\n                plugin: 'App',\n                code: 'product-not-found',\n                message: 'منتج $uidItem مطلوب للبائع $sellerUid غير موجود.',\n              );\n            }\n            totalPriceForThisSeller += (itemPrice * quantity);\n          }\n\n          // Create OrderModel for this seller\n          OrderModel sellerOrder = OrderModel(\n            uidUser: currentUserId,\n            appName: FirebaseX.appName,\n            location: GeoPoint(latitude, longitude), // حفظ الموقع كـ GeoPoint\n            delivery: false,\n            doneDelivery: false,\n            requestAccept: false,\n            timeOrder:\n                DateTime.now(), // Server timestamp is better, but DateTime.now() is okay\n            numberOfOrder:\n                sellerOrderDocRef\n                    .id, // Using Firestore Auto-ID as the order number\n            totalPriceOfOrder: totalPriceForThisSeller.toInt(),\n            uidAdd: sellerUid,\n          );\n          transaction.set(sellerOrderDocRef, sellerOrder.toMap());\n\n          // Save OrderItems (ModelTheOrderList) as a subcollection\n          for (var itemDocInCart in sellerItems) {\n            final chosenItemData = itemDocInCart.data() as Map<String, dynamic>;\n            ModelTheOrderList orderListItem = ModelTheOrderList(\n              uidUser: currentUserId,\n              uidItem: chosenItemData['uidItem'] as String,\n              uidOfDoc: itemDocInCart.id, // Original doc ID from 'the-chosen'\n              uidAdd: sellerUid,\n              number: chosenItemData['number'] as int? ?? 1,\n              isOfer: chosenItemData['isOfer'] as bool? ?? false,\n              appName: FirebaseX.appName,\n            );\n            transaction.set(\n              sellerOrderDocRef.collection('OrderItems').doc(itemDocInCart.id),\n              orderListItem.toMap(),\n            );\n          }\n\n          // Delete items from \"the-chosen\" for this seller\n          for (var itemDocInCart in sellerItems) {\n            transaction.delete(\n              _firestore\n                  .collection('the-chosen')\n                  .doc(currentUserId)\n                  .collection(FirebaseX.appName)\n                  .doc(itemDocInCart.id),\n            );\n          }\n          return sellerOrderDocRef\n              .id; // Return the ID of the created order for this seller\n        }); // ---- End of Transaction ----\n\n        if (createdOrderId != null) {\n          anySellerProcessingSucceeded = true;\n          successfulSellerOrderDisplayIds.add(\n            sellerOrderDisplayNumber,\n          ); // Use generated for display if preferred\n          // Send notification AFTER successful transaction\n          await _sendNotificationToSeller(\n            sellerUid,\n            createdOrderId, // Or sellerOrderDisplayNumber if preferred for notification content\n            buyerName,\n            buyerImageUrl,\n          );\n        } else {\n          // Should not happen if transaction throws, but as a fallback\n          failedSellerUids.add(sellerUid);\n        }\n      } catch (e) {\n        debugPrint(\n          \"Transaction or notification for seller $sellerUid failed: $e\",\n        );\n        failedSellerUids.add(sellerUid);\n        _showErrorSnackbar(\n          \"خطأ في معالجة الطلب\",\n          \"فشل معالجة طلب البائع $sellerUid: ${e.toString().substring(0, min(e.toString().length, 50))}\",\n        );\n      }\n    } // End loop for sellerUids\n\n    isLoading.value = false;\n    update();\n\n    // Final feedback to user\n    if (failedSellerUids.isEmpty && anySellerProcessingSucceeded) {\n      _showSuccessSnackbar(\"نجاح!\", \"تم إرسال طلبك بنجاح إلى جميع البائعين.\");\n      Get.offAll(\n        () => BottomBar(initialIndex: 0),\n      ); // Navigate to home or orders\n    } else if (anySellerProcessingSucceeded && failedSellerUids.isNotEmpty) {\n      _showWarningSnackbar(\n        \"نجاح جزئي\",\n        \"تم إرسال الطلب لبعض البائعين. فشل للبائعين: ${failedSellerUids.join(', ')}. أرقام الطلبات الناجحة: ${successfulSellerOrderDisplayIds.join(', ')}\",\n      );\n      Get.offAll(\n        () => BottomBar(initialIndex: 0),\n      ); // Navigate, user might need to see their orders\n    } else if (failedSellerUids.isNotEmpty && !anySellerProcessingSucceeded) {\n      _showErrorSnackbar(\n        \"فشل\",\n        \"لم يتم إرسال طلبك لأي بائع. يرجى المحاولة مرة أخرى.\",\n      );\n      // Stay on the map screen, or offer retry in dialog (complex to implement full retry)\n    } else if (!anySellerProcessingSucceeded && cartSnapshot.docs.isNotEmpty) {\n      _showErrorSnackbar(\n        \"فشل\",\n        \"حدث خطأ غير متوقع ولم يتم إرسال الطلب. الرجاء المحاولة مرة أخرى.\",\n      );\n    }\n  }\n\n  /// Sends notification to a specific seller.\n  Future<void> _sendNotificationToSeller(\n    String sellerUid,\n    String orderIdentifier,\n    String buyerName,\n    String? buyerImageUrl,\n  ) async {\n    try {\n      DocumentSnapshot sellerDoc =\n          await _firestore\n              .collection(FirebaseX.collectionApp)\n              .doc(sellerUid)\n              .get();\n      if (sellerDoc.exists && sellerDoc.data() != null) {\n        final sellerData = sellerDoc.data() as Map<String, dynamic>;\n        String? sellerToken = sellerData['token'] as String?;\n\n        if (sellerToken != null && sellerToken.isNotEmpty) {\n          await LocalNotification.sendNotificationMessageToUser(\n            to: sellerToken,\n            title: 'طلب جديد من $buyerName!',\n            body:\n                'لديك طلب جديد برقم مرجعي: $orderIdentifier.', // Use the actual order ID or a generated one\n            uid: _auth.currentUser!.uid, // Buyer's UID\n            type: 'new_order_for_seller',\n            image: buyerImageUrl, // Buyer's image\n          );\n        } else {\n          debugPrint(\n            \"FCM token not found for seller UID: $sellerUid. Cannot send notification.\",\n          );\n          // Optionally inform admin or log this missing token.\n        }\n      } else {\n        debugPrint(\n          \"Seller document not found for UID: $sellerUid. Cannot send notification.\",\n        );\n      }\n    } catch (e) {\n      debugPrint(\"Error sending notification to seller $sellerUid: $e\");\n      // Non-critical for the order itself, but log it.\n      // Could show a subtle snackbar if really needed:\n      // _showInfoSnackbar(\"تنبيه بسيط\", \"فشل إرسال إشعار إلى أحد البائعين.\");\n    }\n  }\n\n  // --- Helper Snackbar Methods ---\n  void _showErrorSnackbar(String title, String message) {\n    Get.snackbar(\n      title,\n      message,\n      snackPosition: SnackPosition.BOTTOM,\n      backgroundColor: Colors.red.shade700,\n      colorText: Colors.white,\n      duration: const Duration(seconds: 5),\n      margin: const EdgeInsets.all(12),\n      borderRadius: 8,\n    );\n  }\n\n  void _showSuccessSnackbar(String title, String message) {\n    Get.snackbar(\n      title,\n      message,\n      snackPosition: SnackPosition.BOTTOM,\n      backgroundColor: Colors.green.shade600,\n      colorText: Colors.white,\n      duration: const Duration(seconds: 3),\n      margin: const EdgeInsets.all(12),\n      borderRadius: 8,\n    );\n  }\n\n  void _showWarningSnackbar(String title, String message) {\n    Get.snackbar(\n      title,\n      message,\n      snackPosition: SnackPosition.BOTTOM,\n      backgroundColor: Colors.orange.shade600,\n      colorText: Colors.white,\n      duration: const Duration(seconds: 7),\n      margin: const EdgeInsets.all(12),\n      borderRadius: 8,\n    );\n  }\n\n  void _showInfoSnackbar(String title, String message) {\n    Get.snackbar(\n      title,\n      message,\n      snackPosition: SnackPosition.BOTTOM,\n      backgroundColor: Colors.blue.shade600,\n      colorText: Colors.white,\n      duration: const Duration(seconds: 3),\n      margin: const EdgeInsets.all(12),\n      borderRadius: 8,\n    );\n  }\n\n  // Call this method from your UI to update controller's lat/lng\n  void updateLocation(double lat, double lng) {\n    latitude = lat;\n    longitude = lng;\n    update(); // For any GetBuilders listening directly to the controller outside of specific Obx\n  }\n}\n\n// In your GetAddAndRemove controller, you might want a helper like this:\n// In class GetAddAndRemove:\n/*\n  int getTotalItemCountInCart() {\n    int totalCount = 0;\n    if (_itemQuantities.isNotEmpty) { // Assuming _itemQuantities is your Map<String, int>\n        _itemQuantities.forEach((key, value) {\n            totalCount += value;\n        });\n    } else {\n        // Fallback: if _itemQuantities is not populated correctly after init,\n        // this might require re-fetching or ensuring calculateTotals() is complete.\n        // For now, this relies on _itemQuantities being up-to-date.\n        debugPrint(\"Warning: _itemQuantities is empty in getTotalItemCountInCart. Call calculateTotals if needed.\");\n    }\n    return totalCount;\n  }\n  // Ensure onInit calls calculateTotals and it fully populates _itemQuantities.\n  // And that any add/remove operation keeps _itemQuantities consistent.\n*/\n"
        }
    ]
}