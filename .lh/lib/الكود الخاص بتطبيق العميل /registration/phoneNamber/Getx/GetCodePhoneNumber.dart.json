{
    "sourceFile": "lib/الكود الخاص بتطبيق العميل /registration/phoneNamber/Getx/GetCodePhoneNumber.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752751503157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752751503157,
            "name": "Commit-0",
            "content": "//\n// import 'dart:async';\n// import 'dart:io';\n//\n// import 'package:cloud_firestore/cloud_firestore.dart';\n// import 'package:firebase_auth/firebase_auth.dart';\n// import 'package:firebase_messaging/firebase_messaging.dart';\n// import 'package:firebase_storage/firebase_storage.dart';\n// import 'package:flutter/material.dart';\n// import 'package:flutter/services.dart';\n// import 'package:get/get.dart';\n// import 'package:uuid/uuid.dart';\n//\n// import '../../../Model/model_user.dart';\n// import '../../../XXX/xxx_firebase.dart';\n// import '../../../bottonBar/botonBar.dart';\n//\n// class Getcodephonenumber extends GetxController{\n//\n//   TextEditingController c1 = TextEditingController();\n//   TextEditingController c2 = TextEditingController();\n//   TextEditingController c3 = TextEditingController();\n//   TextEditingController c4 = TextEditingController();\n//   TextEditingController c5 = TextEditingController();\n//   TextEditingController c6 = TextEditingController();\n//   String phneNumber;\n//   bool pssworAndEmail;\n//   Uint8List imageUser;\n//   String Name;\n//   String Email;\n//   String password;\n//\n//\n//\n//   Getcodephonenumber({required this.c1,required this.c2,required this.c3,required this.c4,\n//   required this.c5,required this.c6,required this.phneNumber,required this.pssworAndEmail,required this.imageUser,\n//   required this.Name,required this.password,required this.Email});\n//\n//   bool correct1 =true;\n//\n//   int connter =100;\n//   late Timer timer1;\n//\n//   String? verifidCodeSent;\n//\n//   bool isLoding =false;\n//\n//\n//   void startTimer(){\n//     timer1= Timer.periodic(const Duration(seconds: 1), (timer) {\n//\n//         if(connter>0){\n//           connter--;\n//         }else{\n//           timer.cancel();\n//         }\n//         update();\n//\n//     });\n//   }\n//\n//   Future<void> phoneAuthCode() async{\n//\n//     try{\n//       await FirebaseAuth.instance.verifyPhoneNumber(\n//         phoneNumber: phneNumber,\n//         timeout: const Duration(seconds: 90),\n//         verificationCompleted: (PhoneAuthCredential credential) {\n//           debugPrint('111111111111111111111111111111111');\n//           debugPrint('111111111111111111111111111111111');\n//           debugPrint('111111111111111111111111111111111');\n//\n//         },\n//         verificationFailed: (FirebaseAuthException e) {\n//\n//\n//           debugPrint('22222222222222222222222222222222222');\n//           debugPrint(e);\n//           debugPrint('22222222222222222222222222222222222');\n//           debugPrint('22222222222222222222222222222222222');\n//\n//\n//\n//         },\n//         codeSent: (String verificationId, int? resendToken) async{\n//\n//           verifidCodeSent = verificationId;\n//         },\n//         codeAutoRetrievalTimeout: (String verificationId) {\n//           verifidCodeSent = verificationId;\n//         },\n//       );\n//     }catch(e){\n//\n//         correct1 =false;\n//         update();\n//     }\n//\n//   }\n//\n//   void sentCode(BuildContext context)async{\n//     try{\n//         isLoding=true;\n//         update();\n//       String smsCode = c1.text + c2.text + c3.text + c4.text + c5.text + c6.text;\n//       debugPrint(smsCode);\n//\n//       PhoneAuthCredential credential = PhoneAuthProvider\n//           .credential(verificationId: verifidCodeSent!, smsCode: smsCode);\n//       if(smsCode == credential.smsCode || smsCode != credential.smsCode){\n//\n//         // await FirebaseAuth.instance.signInWithCredential(credential).then((value)async{\n//\n//         if(pssworAndEmail = true){\n//\n//           //\n//           // await FirebaseAuth.instance.signInWithEmailAndPassword(\n//           //      email: widget.Email, password: widget.password).then((value) async{\n//\n//           Reference stprge=   FirebaseStorage.instance.ref(FirebaseX.StorgeApp).child(const Uuid().v1());\n//           UploadTask upload =  stprge.putData(imageUser);\n//           TaskSnapshot task = await upload;\n//           String url22 = await task.ref.getDownloadURL();\n//           if(Platform.isIOS){\n//             await  FirebaseMessaging.instance.getAPNSToken().then((token)async{\n//               ModelUser modelUser =ModelUser(url: url22, uid: FirebaseAuth.instance.currentUser!.uid,\n//                   token: token.toString(), phneNumber: phneNumber, password: password, email: Email, name: Name, appName: FirebaseX.appName);\n//\n//               await FirebaseFirestore.instance.collection(FirebaseX.collectionApp).doc(FirebaseAuth.instance.currentUser!.uid).set(modelUser.toMap()\n//\n//               ).then((value)async {\n//\n//\n//                 Navigator.push(\n//                     context, MaterialPageRoute(builder: (context) => bottonBar(theIndex: 0,)));\n//\n//\n//               });\n//\n//\n//             });\n//           }else{\n//             await  FirebaseMessaging.instance.getToken().then((token)async{\n//               ModelUser modelUser =ModelUser(url: url22, uid: FirebaseAuth.instance.currentUser!.uid,\n//                   token: token.toString(), phneNumber: phneNumber, password: password, email: Email, name: Name, appName: FirebaseX.appName);\n//\n//               await FirebaseFirestore.instance.collection(FirebaseX.collectionApp).doc(FirebaseAuth.instance.currentUser!.uid).set(modelUser.toMap()\n//\n//               ).then((value)async {\n//\n//\n//                 Navigator.push(\n//                     context, MaterialPageRoute(builder: (context) => bottonBar(theIndex: 0,)));\n//\n//\n//               });\n//\n//\n//             });\n//           }\n//\n//\n//\n//\n//         }else{\n//           debugPrint('//////////////////////q//////q///////q////q///q/////q///');\n//\n//\n//           Navigator.pushAndRemoveUntil(context, MaterialPageRoute(builder: (context) =>  bottonBar()),(rute)=>false);\n//\n//\n//         }\n//\n//\n//\n//\n//\n//         // });\n//       }\n//\n//\n//\n//     }on FirebaseAuthException catch (e){\n//       if(e.code == 'invalid-verification-code'){\n//           correct1 =false;\n//           isLoding =false;\n//           update();\n//       }\n//     }\n//     catch(e){\n//       debugPrint('3333333333333333333333333333333333');\n//       debugPrint(e);\n//\n//       debugPrint('3333333333333333333333333333333333');\n//\n//     }\n//   }\n//   @override\n//   void onInit() {\n//     startTimer();\n//     phoneAuthCode();\n//     // TODO: implement onInit\n//     super.onInit();\n//   }\n//   @override\n//   void dispose() {\n//     c1.dispose();\n//     c2.dispose();\n//     c3.dispose();\n//     c4.dispose();\n//     c5.dispose();\n//     c6.dispose();\n//     timer1.cancel();\n//     // TODO: implement dispose\n//     super.dispose();\n//   }\n//\n//\n//\n//\n// }\n\nimport 'dart:async';\nimport 'dart:io';\nimport 'dart:typed_data';\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:firebase_messaging/firebase_messaging.dart';\nimport 'package:firebase_storage/firebase_storage.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\nimport 'package:get/get.dart';\nimport 'package:uuid/uuid.dart';\n\nimport '../../../../Model/model_user.dart';\nimport '../../../../XXX/xxx_firebase.dart';\nimport '../../../bottonBar/botonBar.dart';\n\nclass GetCodePhoneNumber extends GetxController {\n  // TextEditingControllers لكل خانة من رمز التأكيد\n  final TextEditingController c1;\n  final TextEditingController c2;\n  final TextEditingController c3;\n  final TextEditingController c4;\n  final TextEditingController c5;\n  final TextEditingController c6;\n\n  final String phneNumber;\n  final bool pssworAndEmail;\n  final Uint8List imageUser;\n  final String name;\n  final String email;\n  final String password;\n\n  // حالة صحة الكود\n  RxBool correct = true.obs;\n  // عداد إعادة إرسال الكود\n  RxInt counter = 100.obs;\n  late Timer _timer;\n  String? verificationId;\n  RxBool isLoading = false.obs;\n\n  GetCodePhoneNumber({\n    required this.c1,\n    required this.c2,\n    required this.c3,\n    required this.c4,\n    required this.c5,\n    required this.c6,\n    required this.phneNumber,\n    required this.pssworAndEmail,\n    required this.imageUser,\n    required this.name,\n    required this.email,\n    required this.password,\n  });\n\n  /// بدء عداد إعادة إرسال الكود.\n  void startTimer() {\n    _timer = Timer.periodic(const Duration(seconds: 1), (timer) {\n      if (counter.value > 0) {\n        debugPrint(phneNumber);\n        debugPrint(name);\n        debugPrint(email);\n        debugPrint(password);\n        debugPrint(phneNumber);\n\n        counter.value--;\n      } else {\n        timer.cancel();\n      }\n      update();\n    });\n  }\n\n  /// طلب إرسال رمز التحقق عبر الهاتف باستخدام verifyPhoneNumber.\n  Future<void> phoneAuthCode() async {\n    try {\n      // في بيئة التطوير، يمكننا استخدام أرقام هواتف وهمية للاختبار\n      // Firebase يدعم test phone numbers في console\n      await FirebaseAuth.instance.verifyPhoneNumber(\n        phoneNumber: phneNumber,\n        timeout: const Duration(seconds: 90),\n        verificationCompleted: (PhoneAuthCredential credential) async {\n          // يمكن تنفيذ منطق تلقائي عند إكمال التحقق.\n          // على سبيل المثال، يمكن محاولة تسجيل الدخول تلقائيًا.\n          try {\n            await FirebaseAuth.instance.signInWithCredential(credential);\n            Get.snackbar(\n              'تأكيد تلقائي',\n              'تم التحقق بشكل تلقائي.',\n              backgroundColor: Colors.greenAccent,\n              colorText: Colors.black,\n            );\n            await _completeRegistration();\n          } catch (e) {\n            debugPrint('Error in automatic verification: $e');\n          }\n        },\n        verificationFailed: (FirebaseAuthException e) {\n          // عرض خطأ باستخدام حوار Get.defaultDialog\n          String errorMessage = 'حدث خطأ أثناء إرسال رمز التحقق.';\n\n          // معالجة رسائل خطأ محددة\n          if (e.code == 'invalid-phone-number') {\n            errorMessage =\n                'رقم الهاتف غير صحيح. الرجاء التحقق من الرقم والمحاولة مرة أخرى.';\n          } else if (e.code == 'too-many-requests') {\n            errorMessage =\n                'تم إرسال الكثير من الطلبات. الرجاء الانتظار والمحاولة لاحقاً.';\n          } else if (e.code == 'quota-exceeded') {\n            errorMessage =\n                'تم تجاوز الحد المسموح من الرسائل. الرجاء المحاولة لاحقاً.';\n          } else if (e.code == 'web-context-cancelled') {\n            errorMessage = 'تم إلغاء عملية التحقق. الرجاء المحاولة مرة أخرى.';\n          } else if (e.code == 'captcha-check-failed') {\n            errorMessage = 'فشل في التحقق الأمني. الرجاء المحاولة مرة أخرى.';\n          }\n\n          debugPrint('Firebase Auth Error: ${e.code} - ${e.message}');\n\n          Get.defaultDialog(\n            title: 'خطأ في التحقق',\n            middleText: errorMessage,\n            textConfirm: 'حسنًا',\n            onConfirm: () => Get.back(),\n            barrierDismissible: true,\n          );\n        },\n        codeSent: (String verificationId, int? resendToken) async {\n          this.verificationId = verificationId;\n          Get.snackbar(\n            'تم الإرسال',\n            'تم إرسال رمز التحقق إلى رقم الهاتف المحدد',\n            backgroundColor: Colors.green,\n            colorText: Colors.white,\n          );\n        },\n        codeAutoRetrievalTimeout: (String verificationId) {\n          this.verificationId = verificationId;\n        },\n      );\n    } catch (e) {\n      correct.value = false;\n      update();\n      debugPrint('Phone Auth Error: $e');\n      Get.defaultDialog(\n        title: 'خطأ',\n        middleText:\n            'حدث خطأ أثناء طلب رمز التحقق. الرجاء التأكد من اتصال الإنترنت والمحاولة مرة أخرى.',\n        textConfirm: 'موافق',\n        onConfirm: () => Get.back(),\n      );\n    }\n  }\n\n  /// محاولة إرسال الكود بعد إدخال الرقم.\n  Future<void> sendCode() async {\n    try {\n      isLoading.value = true;\n      update();\n\n      // جمع الحروف المدخلة في الخانات معاً.\n      String smsCode =\n          c1.text + c2.text + c3.text + c4.text + c5.text + c6.text;\n\n      // التأكد من أن الكود مكون من 6 أرقام.\n      if (smsCode.length != 6) {\n        Get.defaultDialog(\n          title: 'خطأ في الإدخال',\n          middleText: 'يرجى التأكد من إدخال رمز التحقق بالكامل.',\n          textConfirm: 'موافق',\n          onConfirm: () => Get.back(),\n        );\n        isLoading.value = false;\n        update();\n        return;\n      }\n\n      // إنشاء الاعتماد باستخدام verificationId والرمز المدخل.\n      PhoneAuthCredential credential = PhoneAuthProvider.credential(\n        verificationId: verificationId!,\n        smsCode: smsCode,\n      );\n\n      // محاولة تسجيل الدخول باستخدام الاعتماد.\n      await FirebaseAuth.instance.signInWithCredential(credential);\n\n      // إذا نجح التسجيل، نكمل التسجيل\n      await _completeRegistration();\n    } on FirebaseAuthException catch (e) {\n      if (e.code == 'invalid-verification-code') {\n        correct.value = false;\n        isLoading.value = false;\n        update();\n        Get.defaultDialog(\n          title: 'الكود غير صحيح',\n          middleText: 'يرجى التأكد من الكود المدخل وإعادة المحاولة.',\n          textConfirm: 'موافق',\n          onConfirm: () => Get.back(),\n        );\n      } else if (e.code == 'session-expired') {\n        Get.defaultDialog(\n          title: 'انتهت صلاحية الجلسة',\n          middleText: 'انتهت صلاحية رمز التحقق. الرجاء طلب رمز جديد.',\n          textConfirm: 'موافق',\n          onConfirm: () {\n            Get.back();\n            phoneAuthCode(); // إعادة إرسال الكود\n          },\n        );\n      }\n    } catch (e) {\n      Get.defaultDialog(\n        title: 'خطأ',\n        middleText: 'حدث خطأ أثناء التحقق: ${e.toString()}',\n        textConfirm: 'موافق',\n        onConfirm: () => Get.back(),\n      );\n    } finally {\n      isLoading.value = false;\n      update();\n    }\n  }\n\n  /// دالة لإكمال التسجيل بعد التحقق من الهاتف\n  Future<void> _completeRegistration() async {\n    try {\n      // رفع الصورة إلى Firebase Storage.\n      Reference storageRef = FirebaseStorage.instance\n          .ref(FirebaseX.StorgeApp)\n          .child(const Uuid().v1());\n      UploadTask uploadTask = storageRef.putData(imageUser);\n      TaskSnapshot taskSnapshot = await uploadTask;\n      String downloadUrl = await taskSnapshot.ref.getDownloadURL();\n\n      // الحصول على توكن Firebase Messaging بناءً على نوع النظام.\n      String? token;\n      if (Platform.isIOS) {\n        token = await FirebaseMessaging.instance.getAPNSToken();\n      } else {\n        token = await FirebaseMessaging.instance.getToken();\n      }\n\n      // إنشاء نموذج المستخدم وإضافته إلى Firestore.\n      UserModel modelUser = UserModel(\n        url: downloadUrl,\n        uid: FirebaseAuth.instance.currentUser!.uid,\n        token: token ?? '',\n        phoneNumber: phneNumber,\n        password: pssworAndEmail ? password : 'noPassword',\n        email: email,\n        name: name,\n        appName: FirebaseX.appName,\n      );\n\n      await FirebaseFirestore.instance\n          .collection(FirebaseX.collectionApp)\n          .doc(FirebaseAuth.instance.currentUser!.uid)\n          .set(modelUser.toMap());\n\n      // التنقل إلى الشاشة الرئيسية.\n      Get.offAll(() => BottomBar(initialIndex: 0));\n    } catch (e) {\n      Get.defaultDialog(\n        title: 'خطأ في حفظ البيانات',\n        middleText: 'حدث خطأ أثناء حفظ بياناتك. الرجاء المحاولة مرة أخرى.',\n        textConfirm: 'موافق',\n        onConfirm: () => Get.back(),\n      );\n    }\n  }\n\n  @override\n  void onInit() {\n    super.onInit();\n    startTimer();\n    phoneAuthCode();\n  }\n\n  @override\n  void dispose() {\n    c1.dispose();\n    c2.dispose();\n    c3.dispose();\n    c4.dispose();\n    c5.dispose();\n    c6.dispose();\n    _timer.cancel();\n    super.dispose();\n  }\n}\n"
        }
    ]
}