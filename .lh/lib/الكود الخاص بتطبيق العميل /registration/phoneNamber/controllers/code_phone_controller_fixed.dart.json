{
    "sourceFile": "lib/الكود الخاص بتطبيق العميل /registration/phoneNamber/controllers/code_phone_controller_fixed.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1752751503160,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1752751503160,
            "name": "Commit-0",
            "content": "import 'dart:async';\nimport 'dart:typed_data';\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:firebase_storage/firebase_storage.dart';\nimport 'package:flutter/material.dart';\nimport 'package:get/get.dart';\n\nimport '../../../core/error_display_manager.dart';\nimport '../../../services/phone_auth_service.dart';\n\n/// تحكم متقدم لصفحة إدخال رمز التحقق\nclass CodePhoneController extends GetxController {\n  // Controllers للحقول\n  final List<TextEditingController> codeControllers = List.generate(\n    6,\n    (index) => TextEditingController(),\n  );\n\n  // FocusNodes للحقول\n  final List<FocusNode> focusNodes = List.generate(6, (index) => FocusNode());\n\n  // متغيرات التحكم\n  final RxBool isLoading = false.obs;\n  final RxBool isCodeValid = true.obs;\n  final RxBool canResend = false.obs;\n  final RxInt resendCounter = 60.obs;\n  final RxString statusMessage = ''.obs;\n  final RxDouble progress = 0.0.obs;\n\n  // خدمة المصادقة\n  late PhoneAuthService _phoneAuthService;\n\n  // Timer لإعادة الإرسال\n  Timer? _resendTimer;\n\n  // بيانات المستخدم\n  final String phoneNumber;\n  final Uint8List userImage;\n  final String name;\n  final String email;\n  final String password;\n  final bool hasPassword;\n\n  CodePhoneController({\n    required this.phoneNumber,\n    required this.userImage,\n    required this.name,\n    required this.email,\n    required this.password,\n    required this.hasPassword,\n  });\n\n  @override\n  void onInit() {\n    super.onInit();\n    _initializeService();\n    _startResendTimer();\n    _setupFocusListeners();\n\n    print('CodePhoneController initialized for $phoneNumber');\n  }\n\n  /// تهيئة خدمة المصادقة\n  void _initializeService() {\n    try {\n      if (!Get.isRegistered<PhoneAuthService>()) {\n        Get.put(PhoneAuthService());\n      }\n      _phoneAuthService = Get.find<PhoneAuthService>();\n    } catch (e) {\n      print('ERROR: Failed to initialize PhoneAuthService: $e');\n      ErrorDisplayManager.showError(\n        'فشل في تهيئة خدمة المصادقة',\n        details: e.toString(),\n      );\n    }\n  }\n\n  /// إعداد listeners للحقول\n  void _setupFocusListeners() {\n    for (int i = 0; i < focusNodes.length; i++) {\n      codeControllers[i].addListener(() {\n        if (codeControllers[i].text.length == 1) {\n          if (i < focusNodes.length - 1) {\n            focusNodes[i + 1].requestFocus();\n          } else {\n            focusNodes[i].unfocus();\n          }\n        }\n      });\n    }\n  }\n\n  /// بدء مؤقت إعادة الإرسال\n  void _startResendTimer() {\n    canResend.value = false;\n    resendCounter.value = 60;\n\n    _resendTimer = Timer.periodic(const Duration(seconds: 1), (timer) {\n      if (resendCounter.value > 0) {\n        resendCounter.value--;\n      } else {\n        canResend.value = true;\n        timer.cancel();\n        print('Resend code is now available');\n      }\n    });\n  }\n\n  /// إعادة إرسال الرمز\n  Future<void> resendCode() async {\n    if (!canResend.value) return;\n\n    try {\n      isLoading.value = true;\n      statusMessage.value = 'جارٍ إعادة إرسال الرمز...';\n\n      final result = await _phoneAuthService.sendVerificationCode(phoneNumber);\n\n      if (result.isSuccess) {\n        ErrorDisplayManager.showSuccess('تم إعادة إرسال الرمز بنجاح');\n        _startResendTimer();\n        _clearCodeFields();\n      } else {\n        ErrorDisplayManager.showError(\n          'فشل في إعادة إرسال الرمز',\n          details: result.error?.toString(),\n        );\n      }\n    } catch (e) {\n      print('ERROR in resendCode: $e');\n      ErrorDisplayManager.showError(\n        'خطأ غير متوقع أثناء إعادة الإرسال',\n        details: e.toString(),\n      );\n    } finally {\n      isLoading.value = false;\n      statusMessage.value = '';\n    }\n  }\n\n  /// التحقق من الرمز عند اكتماله\n  void checkCodeOnComplete() {\n    final code = codeControllers.map((c) => c.text).join();\n    if (code.length == 6) {\n      verifyCode(code);\n    }\n  }\n\n  /// التحقق من الرمز\n  Future<void> verifyCode(String code) async {\n    if (code.length != 6) {\n      isCodeValid.value = false;\n      ErrorDisplayManager.showError('يجب أن يكون الرمز مكون من 6 أرقام');\n      return;\n    }\n\n    try {\n      isLoading.value = true;\n      isCodeValid.value = true;\n      statusMessage.value = 'جارٍ التحقق من الرمز...';\n      progress.value = 0.2;\n\n      final result = await _phoneAuthService.verifyCode(code);\n      progress.value = 0.6;\n\n      if (result.isSuccess && result.user != null) {\n        statusMessage.value = 'تم التحقق بنجاح، جارٍ إنشاء الحساب...';\n        progress.value = 0.8;\n\n        await _completeUserRegistration(result.user!);\n        progress.value = 1.0;\n\n        ErrorDisplayManager.showSuccess('تم التحقق بنجاح!');\n\n        // الانتقال للصفحة الرئيسية\n        Get.offAllNamed('/home');\n      } else {\n        isCodeValid.value = false;\n        ErrorDisplayManager.showError(\n          'رمز التحقق غير صحيح',\n          details: result.error?.toString(),\n        );\n      }\n    } catch (e) {\n      print('ERROR in verifyCode: $e');\n      isCodeValid.value = false;\n      ErrorDisplayManager.showError(\n        'خطأ أثناء التحقق من الرمز',\n        details: e.toString(),\n      );\n    } finally {\n      isLoading.value = false;\n      statusMessage.value = '';\n      progress.value = 0.0;\n    }\n  }\n\n  /// إكمال تسجيل المستخدم\n  Future<void> _completeUserRegistration(User user) async {\n    try {\n      statusMessage.value = 'جارٍ رفع الصورة...';\n\n      final imageUrl = await _uploadUserImage(user.uid);\n\n      statusMessage.value = 'جارٍ حفظ بيانات المستخدم...';\n\n      // إنشاء نموذج بيانات المستخدم\n      final userData = {\n        'uid': user.uid,\n        'name': name,\n        'email': email,\n        'phone': phoneNumber,\n        'profileImage': imageUrl,\n        'isVerified': true,\n        'createdAt': DateTime.now().toIso8601String(),\n        'appName': 'Codora',\n      };\n\n      await FirebaseFirestore.instance\n          .collection('users') // FirebaseX.collectionApp replacement\n          .doc(user.uid)\n          .set(userData);\n\n      print('User registration completed successfully');\n    } catch (e) {\n      print('ERROR in _completeUserRegistration: $e');\n      throw Exception('فشل في إكمال تسجيل المستخدم: $e');\n    }\n  }\n\n  /// رفع صورة المستخدم\n  Future<String> _uploadUserImage(String userId) async {\n    try {\n      final storageRef = FirebaseStorage.instance\n          .ref('user_images') // FirebaseX.StorgeApp replacement\n          .child('$userId.jpg');\n\n      final uploadTask = storageRef.putData(userImage);\n\n      final snapshot = await uploadTask;\n      final downloadUrl = await snapshot.ref.getDownloadURL();\n\n      print('Image uploaded successfully: $downloadUrl');\n      return downloadUrl;\n    } catch (e) {\n      print('ERROR in _uploadUserImage: $e');\n      throw Exception('فشل في رفع الصورة: $e');\n    }\n  }\n\n  /// مسح حقول الرمز\n  void _clearCodeFields() {\n    for (var controller in codeControllers) {\n      controller.clear();\n    }\n    isCodeValid.value = true;\n    focusNodes[0].requestFocus();\n  }\n\n  @override\n  void onClose() {\n    _resendTimer?.cancel();\n\n    for (var controller in codeControllers) {\n      controller.dispose();\n    }\n\n    for (var focusNode in focusNodes) {\n      focusNode.dispose();\n    }\n\n    super.onClose();\n  }\n}\n"
        }
    ]
}