{
    "sourceFile": "lib/الكود الخاص بتطبيق العميل /registration/phoneNamber/widgets/code_input_field.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1752751503159,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1752798049787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,22 +1,29 @@\n import 'package:flutter/material.dart';\n import 'package:flutter/services.dart';\n+import 'package:flutter_screenutil/flutter_screenutil.dart';\n \n /// حقل إدخال رمز التحقق المخصص\n class CodeInputField extends StatefulWidget {\n   final TextEditingController controller;\n   final FocusNode focusNode;\n   final bool isValid;\n   final VoidCallback? onChanged;\n   final VoidCallback? onComplete;\n+  final VoidCallback? onBackspace;\n+  final Function(String, int)? onPaste;\n+  final int index;\n \n   const CodeInputField({\n     super.key,\n     required this.controller,\n     required this.focusNode,\n+    required this.index,\n     this.isValid = true,\n     this.onChanged,\n     this.onComplete,\n+    this.onBackspace,\n+    this.onPaste,\n   });\n \n   @override\n   State<CodeInputField> createState() => _CodeInputFieldState();\n@@ -75,19 +82,19 @@\n       builder: (context, child) {\n         return Transform.scale(\n           scale: _scaleAnimation.value,\n           child: Container(\n-            width: 50,\n-            height: 60,\n+            width: 45.w,\n+            height: 55.h,\n             decoration: BoxDecoration(\n               border: Border.all(\n                 color:\n                     widget.isValid\n                         ? _colorAnimation.value ?? Colors.grey.shade300\n                         : Colors.red.shade400,\n-                width: 2,\n+                width: 2.w,\n               ),\n-              borderRadius: BorderRadius.circular(12),\n+              borderRadius: BorderRadius.circular(12.r),\n               color:\n                   widget.controller.text.isNotEmpty\n                       ? Colors.blue.shade50\n                       : Colors.grey.shade50,\n@@ -95,20 +102,20 @@\n                   widget.focusNode.hasFocus\n                       ? [\n                         BoxShadow(\n                           color: Colors.blue.shade200,\n-                          blurRadius: 8,\n-                          offset: const Offset(0, 2),\n+                          blurRadius: 8.r,\n+                          offset: Offset(0, 2.h),\n                         ),\n                       ]\n                       : [],\n             ),\n             child: TextField(\n               controller: widget.controller,\n               focusNode: widget.focusNode,\n               textAlign: TextAlign.center,\n-              style: const TextStyle(\n-                fontSize: 24,\n+              style: TextStyle(\n+                fontSize: 22.sp,\n                 fontWeight: FontWeight.bold,\n                 color: Colors.black87,\n               ),\n               keyboardType: TextInputType.number,\n@@ -118,17 +125,39 @@\n               ],\n               decoration: const InputDecoration(\n                 border: InputBorder.none,\n                 counterText: '',\n+                contentPadding: EdgeInsets.zero,\n               ),\n               onChanged: (value) {\n+                // كشف اللصق (إذا كان النص أطول من رقم واحد)\n                 if (value.length > 1) {\n-                  widget.controller.text = value.substring(0, 1);\n-                  widget.controller.selection = TextSelection.fromPosition(\n-                    TextPosition(offset: widget.controller.text.length),\n-                  );\n+                  widget.onPaste?.call(value, widget.index);\n+                  return;\n                 }\n+\n+                // استدعاء onComplete عند إدخال رقم\n+                if (value.length == 1) {\n+                  widget.onComplete?.call();\n+                } else if (value.isEmpty && widget.index > 0) {\n+                  // الرجوع للحقل السابق عند المسح\n+                  widget.onBackspace?.call();\n+                }\n+\n+                widget.onChanged?.call();\n               },\n+              onEditingComplete: () {\n+                // عدم فعل شيء لمنع التحرك غير المرغوب فيه\n+              },\n+              onSubmitted: (value) {\n+                // عدم فعل شيء لمنع التحرك غير المرغوب فيه\n+              },\n+              // إضافة استماع لزر المسح (backspace)\n+              onTap: () {\n+                if (widget.controller.text.isEmpty && widget.index > 0) {\n+                  widget.onBackspace?.call();\n+                }\n+              },\n             ),\n           ),\n         );\n       },\n"
                }
            ],
            "date": 1752751503159,
            "name": "Commit-0",
            "content": "import 'package:flutter/material.dart';\nimport 'package:flutter/services.dart';\n\n/// حقل إدخال رمز التحقق المخصص\nclass CodeInputField extends StatefulWidget {\n  final TextEditingController controller;\n  final FocusNode focusNode;\n  final bool isValid;\n  final VoidCallback? onChanged;\n  final VoidCallback? onComplete;\n\n  const CodeInputField({\n    super.key,\n    required this.controller,\n    required this.focusNode,\n    this.isValid = true,\n    this.onChanged,\n    this.onComplete,\n  });\n\n  @override\n  State<CodeInputField> createState() => _CodeInputFieldState();\n}\n\nclass _CodeInputFieldState extends State<CodeInputField>\n    with SingleTickerProviderStateMixin {\n  late AnimationController _animationController;\n  late Animation<double> _scaleAnimation;\n  late Animation<Color?> _colorAnimation;\n\n  @override\n  void initState() {\n    super.initState();\n    _setupAnimations();\n    _setupListeners();\n  }\n\n  void _setupAnimations() {\n    _animationController = AnimationController(\n      duration: const Duration(milliseconds: 200),\n      vsync: this,\n    );\n\n    _scaleAnimation = Tween<double>(begin: 1.0, end: 1.1).animate(\n      CurvedAnimation(parent: _animationController, curve: Curves.easeInOut),\n    );\n\n    _colorAnimation = ColorTween(\n      begin: Colors.grey.shade300,\n      end: Colors.blue.shade400,\n    ).animate(_animationController);\n  }\n\n  void _setupListeners() {\n    widget.focusNode.addListener(() {\n      if (widget.focusNode.hasFocus) {\n        _animationController.forward();\n      } else {\n        _animationController.reverse();\n      }\n    });\n\n    widget.controller.addListener(() {\n      if (widget.controller.text.length == 1) {\n        widget.onComplete?.call();\n      }\n      widget.onChanged?.call();\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return AnimatedBuilder(\n      animation: _animationController,\n      builder: (context, child) {\n        return Transform.scale(\n          scale: _scaleAnimation.value,\n          child: Container(\n            width: 50,\n            height: 60,\n            decoration: BoxDecoration(\n              border: Border.all(\n                color:\n                    widget.isValid\n                        ? _colorAnimation.value ?? Colors.grey.shade300\n                        : Colors.red.shade400,\n                width: 2,\n              ),\n              borderRadius: BorderRadius.circular(12),\n              color:\n                  widget.controller.text.isNotEmpty\n                      ? Colors.blue.shade50\n                      : Colors.grey.shade50,\n              boxShadow:\n                  widget.focusNode.hasFocus\n                      ? [\n                        BoxShadow(\n                          color: Colors.blue.shade200,\n                          blurRadius: 8,\n                          offset: const Offset(0, 2),\n                        ),\n                      ]\n                      : [],\n            ),\n            child: TextField(\n              controller: widget.controller,\n              focusNode: widget.focusNode,\n              textAlign: TextAlign.center,\n              style: const TextStyle(\n                fontSize: 24,\n                fontWeight: FontWeight.bold,\n                color: Colors.black87,\n              ),\n              keyboardType: TextInputType.number,\n              inputFormatters: [\n                FilteringTextInputFormatter.digitsOnly,\n                LengthLimitingTextInputFormatter(1),\n              ],\n              decoration: const InputDecoration(\n                border: InputBorder.none,\n                counterText: '',\n              ),\n              onChanged: (value) {\n                if (value.length > 1) {\n                  widget.controller.text = value.substring(0, 1);\n                  widget.controller.selection = TextSelection.fromPosition(\n                    TextPosition(offset: widget.controller.text.length),\n                  );\n                }\n              },\n            ),\n          ),\n        );\n      },\n    );\n  }\n\n  @override\n  void dispose() {\n    _animationController.dispose();\n    super.dispose();\n  }\n}\n"
        }
    ]
}