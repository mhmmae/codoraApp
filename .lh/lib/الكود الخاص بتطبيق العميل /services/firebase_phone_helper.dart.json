{
    "sourceFile": "lib/الكود الخاص بتطبيق العميل /services/firebase_phone_helper.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753181638899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753181638899,
            "name": "Commit-0",
            "content": "import 'dart:io';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/foundation.dart';\n\n/// كلاس مساعد لتشخيص وحل مشاكل Firebase Phone Auth\nclass FirebasePhoneHelper {\n  static const String version = '1.0.0';\n\n  /// تشخيص شامل لإعدادات Firebase Phone Auth\n  static Future<Map<String, dynamic>> comprehensiveDiagnosis() async {\n    final diagnosis = <String, dynamic>{\n      'helper_version': version,\n      'timestamp': DateTime.now().toIso8601String(),\n    };\n\n    try {\n      // 1. معلومات Firebase الأساسية\n      final auth = FirebaseAuth.instance;\n      diagnosis['firebase'] = {\n        'app_id': auth.app.options.appId,\n        'project_id': auth.app.options.projectId,\n        'api_key': auth.app.options.apiKey.substring(0, 10) + '...',\n        'current_user': auth.currentUser?.uid ?? 'no_user',\n        'auth_domain': auth.app.options.authDomain,\n      };\n\n      // 2. معلومات المنصة\n      diagnosis['platform'] = {\n        'os': Platform.operatingSystem,\n        'version': Platform.operatingSystemVersion,\n        'is_android': Platform.isAndroid,\n        'is_ios': Platform.isIOS,\n        'is_debug': kDebugMode,\n      };\n\n      // 3. فحص إعدادات Android\n      if (Platform.isAndroid) {\n        diagnosis['android'] = await _diagnoseAndroid(auth);\n      }\n\n      // 4. فحص إعدادات iOS\n      if (Platform.isIOS) {\n        diagnosis['ios'] = await _diagnoseiOS(auth);\n      }\n\n      // 5. نصائح التحسين\n      diagnosis['optimization_tips'] = _getOptimizationTips();\n\n      debugPrint('🔍 تشخيص Firebase Phone Auth مكتمل');\n      return diagnosis;\n    } catch (e) {\n      diagnosis['error'] = e.toString();\n      debugPrint('❌ خطأ في التشخيص الشامل: $e');\n      return diagnosis;\n    }\n  }\n\n  /// تشخيص إعدادات Android\n  static Future<Map<String, dynamic>> _diagnoseAndroid(\n    FirebaseAuth auth,\n  ) async {\n    final androidDiag = <String, dynamic>{};\n\n    try {\n      // فحص SHA-1 fingerprint (لا يمكن الوصول إليه مباشرة من Flutter)\n      androidDiag['sha1_note'] =\n          'تأكد من إضافة SHA-1 fingerprint في Firebase Console';\n\n      // فحص SMS permissions\n      androidDiag['sms_permissions'] = {\n        'note': 'تأكد من إضافة أذونات SMS في AndroidManifest.xml',\n        'required_permissions': [\n          'android.permission.RECEIVE_SMS',\n          'android.permission.READ_SMS',\n        ],\n      };\n\n      // نصائح Android\n      androidDiag['tips'] = [\n        'تأكد من تحديث Google Play Services',\n        'فعل SafetyNet في Firebase Console',\n        'تأكد من SHA-1 fingerprint للتوقيع',\n      ];\n\n      return androidDiag;\n    } catch (e) {\n      androidDiag['error'] = e.toString();\n      return androidDiag;\n    }\n  }\n\n  /// تشخيص إعدادات iOS\n  static Future<Map<String, dynamic>> _diagnoseiOS(FirebaseAuth auth) async {\n    final iosDiag = <String, dynamic>{};\n\n    try {\n      // فحص Bundle ID\n      iosDiag['bundle_id_note'] = 'تأكد من تطابق Bundle ID مع Firebase Console';\n\n      // فحص APN\n      iosDiag['apn_setup'] = {\n        'note': 'reCAPTCHA قد يتطلب إعداد APN صحيح',\n        'requirements': [\n          'APN Key في Firebase Console',\n          'تفعيل Push Notifications في Xcode',\n        ],\n      };\n\n      // نصائح iOS\n      iosDiag['tips'] = [\n        'تأكد من Bundle ID صحيح',\n        'فعل Push Notifications capability',\n        'تأكد من APN authentication key',\n        'اختبر على جهاز حقيقي وليس المحاكي',\n      ];\n\n      return iosDiag;\n    } catch (e) {\n      iosDiag['error'] = e.toString();\n      return iosDiag;\n    }\n  }\n\n  /// نصائح تحسين عامة\n  static List<String> _getOptimizationTips() {\n    return [\n      '🔧 تأكد من تفعيل Phone Authentication في Firebase Console',\n      '📱 أضف الأرقام التجريبية في قسم \"Phone numbers for testing\"',\n      '🌐 تأكد من إعدادات reCAPTCHA للمنصة المستهدفة',\n      '🔒 استخدم HTTPS للـ Authorized domains',\n      '📊 راقب حدود الاستخدام في Firebase Console',\n      '🧪 اختبر مع أرقام حقيقية وتجريبية',\n      '🔄 أعد تشغيل التطبيق بعد تغيير الإعدادات',\n    ];\n  }\n\n  /// فحص صحة رقم الهاتف المحسن\n  static Map<String, dynamic> validatePhoneNumberAdvanced(String phoneNumber) {\n    final validation = <String, dynamic>{\n      'input': phoneNumber,\n      'timestamp': DateTime.now().toIso8601String(),\n    };\n\n    // 1. فحص أساسي\n    validation['basic'] = {\n      'has_plus': phoneNumber.startsWith('+'),\n      'length': phoneNumber.length,\n      'is_numeric_only': RegExp(r'^\\+\\d+$').hasMatch(phoneNumber),\n      'contains_spaces': phoneNumber.contains(' '),\n      'contains_dashes': phoneNumber.contains('-'),\n    };\n\n    // 2. تحليل الدولة\n    validation['country'] = _analyzeCountryCode(phoneNumber);\n\n    // 3. تحليل نوع الرقم\n    validation['type'] = _analyzePhoneType(phoneNumber);\n\n    // 4. اقتراحات التحسين\n    validation['suggestions'] = _getSuggestions(phoneNumber);\n\n    return validation;\n  }\n\n  /// تحليل رمز الدولة\n  static Map<String, dynamic> _analyzeCountryCode(String phoneNumber) {\n    final countryData = <String, dynamic>{};\n\n    if (phoneNumber.startsWith('+964')) {\n      countryData.addAll({\n        'country': 'العراق',\n        'code': '+964',\n        'valid_length_range': '13-14',\n        'operators': ['زين', 'آسياسيل', 'كورك'],\n        'is_supported': true,\n      });\n    } else if (phoneNumber.startsWith('+966')) {\n      countryData.addAll({\n        'country': 'السعودية',\n        'code': '+966',\n        'valid_length_range': '13',\n        'operators': ['STC', 'Mobily', 'Zain'],\n        'is_supported': true,\n      });\n    } else if (phoneNumber.startsWith('+1')) {\n      countryData.addAll({\n        'country': 'الولايات المتحدة/كندا',\n        'code': '+1',\n        'valid_length_range': '12',\n        'is_supported': true,\n      });\n    } else {\n      countryData.addAll({\n        'country': 'غير محدد',\n        'code':\n            phoneNumber.length > 3 ? phoneNumber.substring(0, 4) : 'غير صحيح',\n        'is_supported': 'غير معروف',\n      });\n    }\n\n    return countryData;\n  }\n\n  /// تحليل نوع الرقم\n  static Map<String, dynamic> _analyzePhoneType(String phoneNumber) {\n    final typeData = <String, dynamic>{};\n\n    // فحص إذا كان رقماً تجريبياً\n    final testPatterns = [\n      '+1555',\n      '+15005550',\n      '+4474',\n      '+33123456',\n      '+96412345',\n      '+966123',\n    ];\n\n    bool isTestNumber = false;\n    for (final pattern in testPatterns) {\n      if (phoneNumber.startsWith(pattern)) {\n        isTestNumber = true;\n        break;\n      }\n    }\n\n    // فحص أنماط تجريبية أخرى\n    if (!isTestNumber) {\n      if (phoneNumber.contains('123456') ||\n          phoneNumber.contains('555555') ||\n          phoneNumber.contains('000000')) {\n        isTestNumber = true;\n      }\n    }\n\n    typeData['is_test_number'] = isTestNumber;\n    typeData['type'] = isTestNumber ? 'تجريبي' : 'حقيقي';\n\n    if (isTestNumber) {\n      typeData['test_note'] =\n          'تأكد من إضافة هذا الرقم في Firebase Console تحت \"Phone numbers for testing\"';\n    }\n\n    return typeData;\n  }\n\n  /// اقتراحات تحسين الرقم\n  static List<String> _getSuggestions(String phoneNumber) {\n    final suggestions = <String>[];\n\n    if (!phoneNumber.startsWith('+')) {\n      suggestions.add('أضف رمز الدولة (مثل +964 للعراق)');\n    }\n\n    if (phoneNumber.contains(' ') || phoneNumber.contains('-')) {\n      suggestions.add('احذف المسافات والشرطات');\n    }\n\n    if (phoneNumber.length < 10) {\n      suggestions.add('الرقم قصير جداً، تأكد من الرقم كاملاً');\n    }\n\n    if (phoneNumber.length > 15) {\n      suggestions.add('الرقم طويل جداً، تحقق من صحته');\n    }\n\n    if (!RegExp(r'^\\+\\d+$').hasMatch(phoneNumber)) {\n      suggestions.add('استخدم الأرقام ورمز + فقط');\n    }\n\n    if (suggestions.isEmpty) {\n      suggestions.add('الرقم يبدو صحيحاً');\n    }\n\n    return suggestions;\n  }\n\n  /// نصائح لحل المشاكل الشائعة\n  static Map<String, List<String>> getCommonSolutions() {\n    return {\n      'فشل إرسال الرمز': [\n        'تحقق من اتصال الإنترنت',\n        'تأكد من صحة رقم الهاتف',\n        'تأكد من إعدادات Firebase Console',\n        'أعد تشغيل التطبيق',\n        'جرب رقماً تجريبياً أولاً',\n      ],\n      'رمز التحقق غير صحيح': [\n        'تأكد من إدخال الرمز الصحيح',\n        'للأرقام التجريبية: استخدم الرمز من Firebase Console',\n        'للأرقام الحقيقية: استخدم الرمز من SMS',\n        'تحقق من انتهاء صلاحية الرمز',\n      ],\n      'خطأ internal-error': [\n        'أعد تشغيل التطبيق',\n        'تحقق من إعدادات reCAPTCHA',\n        'تحقق من SHA-1 fingerprint (Android)',\n        'تحقق من Bundle ID (iOS)',\n        'جرب على شبكة مختلفة',\n      ],\n      'الحد الأقصى للطلبات': [\n        'انتظر بضع دقائق قبل إعادة المحاولة',\n        'استخدم أرقاماً تجريبية للاختبار',\n        'تحقق من حدود Firebase في Console',\n      ],\n    };\n  }\n\n  /// طباعة تقرير مفصل\n  static void printDetailedReport(Map<String, dynamic> diagnosis) {\n    print('\\n🔍 ===== تقرير تشخيص Firebase Phone Auth =====');\n    print('📅 الوقت: ${diagnosis['timestamp']}');\n    print('📱 المنصة: ${diagnosis['platform']['os']}');\n    print('🔧 إصدار المساعد: ${diagnosis['helper_version']}');\n\n    if (diagnosis.containsKey('firebase')) {\n      print('\\n🔥 Firebase:');\n      final firebase = diagnosis['firebase'] as Map<String, dynamic>;\n      firebase.forEach((key, value) {\n        print('   $key: $value');\n      });\n    }\n\n    if (diagnosis.containsKey('android')) {\n      print('\\n🤖 Android:');\n      print('   ${diagnosis['android']}');\n    }\n\n    if (diagnosis.containsKey('ios')) {\n      print('\\n🍎 iOS:');\n      print('   ${diagnosis['ios']}');\n    }\n\n    if (diagnosis.containsKey('optimization_tips')) {\n      print('\\n💡 نصائح التحسين:');\n      for (final tip in diagnosis['optimization_tips'] as List<String>) {\n        print('   • $tip');\n      }\n    }\n\n    print('\\n🔧 ===== نهاية التقرير =====\\n');\n  }\n}\n"
        }
    ]
}