{
    "sourceFile": "lib/الكود الخاص بتطبيق العميل /theـchosen/GetXController/GetAddAndRemove.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1753157006719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1753157006719,
            "name": "Commit-0",
            "content": "import 'dart:async';\nimport 'package:cloud_firestore/cloud_firestore.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:get/get.dart';\n\nimport '../../../XXX/xxx_firebase.dart';\n\n/// يتحكم هذا المتحكم في إضافة وحذف العناصر من السلة وحساب الأسعار الإجمالية.\n/// يعتمد على خريطة لتخزين الكميات الحالية لكل مستند ويستخدم استعلامات متوازية (Future.wait)\n/// للحصول على الأسعار من مجموعتي \"Item\" و\"Itemoffer\".\nclass GetAddAndRemove extends GetxController {\n  // يخزن الكميات الحالية لكل مستند باستخدام uidOfDoc كمفتاح\n  final Map<String, int> _itemQuantities = {};\n  RxInt totalCartItemCount = 0.obs;\n\n  // متغيرات Rx لمتابعة التحديثات في الأسعار\n  RxInt total = 0.obs;\n  RxInt totalPriceOfItem = 0.obs;\n  RxInt totalPriceOfofferItem = 0.obs;\n  RxInt totalPrice = 0.obs;\n\n  /// دالة لحساب الأسعار الإجمالية بشكل متوازي مع استرجاع بيانات كلا المجموعتين\n\n  Future<void> calculateTotals() async {\n    final String userId = FirebaseAuth.instance.currentUser!.uid;\n    debugPrint('🔥 Starting calculateTotals for user: $userId');\n\n    try {\n      totalPriceOfItem.value = 0;\n      totalPriceOfofferItem.value = 0;\n      int currentTotalItems = 0; // For sum of quantities\n\n      QuerySnapshot querySnapshot =\n          await FirebaseFirestore.instance\n              .collection('the-chosen')\n              .doc(userId)\n              .collection(FirebaseX.appName)\n              .get();\n\n      debugPrint('🛒 Found ${querySnapshot.docs.length} items in cart');\n\n      // Clear local quantities before recalculating\n      _itemQuantities.clear();\n\n      List<Future<void>> priceFutures = [];\n\n      for (var doc in querySnapshot.docs) {\n        final data = doc.data() as Map<String, dynamic>?;\n        if (data == null) continue;\n\n        int itemCount = data['number'] as int? ?? 0;\n        currentTotalItems += itemCount; // Summing up quantities\n        final uidItem = data['uidItem'] as String? ?? \"\";\n        final bool isOffer = data['isOfer'] as bool? ?? false;\n\n        debugPrint(\n          '📦 Processing item: $uidItem, quantity: $itemCount, isOffer: $isOffer',\n        );\n\n        if (uidItem.isEmpty) continue;\n\n        _itemQuantities[doc.id] = itemCount;\n\n        // إضافة منطق حساب الأسعار الفعلي\n        priceFutures.add(\n          Future.wait([\n            FirebaseFirestore.instance\n                .collection(FirebaseX.itemsCollection)\n                .doc(uidItem)\n                .get(),\n            FirebaseFirestore.instance\n                .collection(FirebaseX.offersCollection)\n                .doc(uidItem)\n                .get(),\n          ]).then((List<DocumentSnapshot> snapshots) {\n            final productSnapshot = snapshots[0];\n            final offerSnapshot = snapshots[1];\n            int priceNormal = 0;\n            int priceOffer = 0;\n\n            debugPrint('🏪 Checking product collections for item: $uidItem');\n            debugPrint('   Normal product exists: ${productSnapshot.exists}');\n            debugPrint('   Offer product exists: ${offerSnapshot.exists}');\n\n            // قراءة السعر من مجموعة المنتجات الأساسية إذا كانت موجودة\n            if (productSnapshot.exists) {\n              try {\n                // استخدام suggestedRetailPrice أولاً ثم priceOfItem كبديل\n                final productData =\n                    productSnapshot.data() as Map<String, dynamic>?;\n                final suggestedPriceData = productData?['suggestedRetailPrice'];\n                final regularPriceData = productSnapshot.get('priceOfItem');\n\n                final priceData = suggestedPriceData ?? regularPriceData;\n                debugPrint(\n                  '   Raw normal price data: $priceData (${priceData.runtimeType})',\n                );\n                if (priceData != null) {\n                  // التعامل مع النوع المختلط (int أو double أو string)\n                  if (priceData is num) {\n                    priceNormal = priceData.toInt();\n                  } else if (priceData is String) {\n                    priceNormal = double.tryParse(priceData)?.toInt() ?? 0;\n                  }\n                  debugPrint('   Normal price converted: $priceNormal');\n                }\n              } catch (e) {\n                debugPrint(\"❌ Error parsing normal item price: $e\");\n              }\n            }\n\n            // قراءة السعر من مجموعة العروض إذا كانت موجودة\n            if (offerSnapshot.exists) {\n              try {\n                // استخدام suggestedRetailPrice أولاً ثم priceOfItem كبديل للعروض أيضاً\n                final offerData = offerSnapshot.data() as Map<String, dynamic>?;\n                final suggestedPriceData = offerData?['suggestedRetailPrice'];\n                final regularPriceData = offerSnapshot.get('priceOfItem');\n\n                final priceData = suggestedPriceData ?? regularPriceData;\n                debugPrint(\n                  '   Raw offer price data: $priceData (${priceData.runtimeType})',\n                );\n                if (priceData != null) {\n                  // التعامل مع النوع المختلط (int أو double أو string)\n                  if (priceData is num) {\n                    priceOffer = priceData.toInt();\n                  } else if (priceData is String) {\n                    priceOffer = double.tryParse(priceData)?.toInt() ?? 0;\n                  }\n                  debugPrint('   Offer price converted: $priceOffer');\n                }\n              } catch (e) {\n                debugPrint(\"❌ Error parsing offer item price: $e\");\n              }\n            }\n\n            // تحديد السعر المناسب بناءً على نوع المنتج (عرض أم لا)\n            int finalPrice = 0;\n            if (isOffer) {\n              // هذا منتج من مجموعة العروض\n              if (priceOffer > 0) {\n                finalPrice = priceOffer;\n                totalPriceOfofferItem.value += priceOffer * itemCount;\n                debugPrint(\n                  '💰 Added offer price: ${priceOffer * itemCount} ($priceOffer x $itemCount)',\n                );\n              } else {\n                debugPrint('⚠️ Offer item has no valid price: $uidItem');\n              }\n            } else {\n              // هذا منتج من مجموعة المنتجات العادية\n              if (priceNormal > 0) {\n                finalPrice = priceNormal;\n                totalPriceOfItem.value += priceNormal * itemCount;\n                debugPrint(\n                  '💰 Added normal price: ${priceNormal * itemCount} ($priceNormal x $itemCount)',\n                );\n              } else {\n                debugPrint('⚠️ Normal item has no valid price: $uidItem');\n              }\n            }\n\n            if (finalPrice == 0) {\n              debugPrint(\n                '🚨 NO PRICE FOUND for item: $uidItem (isOffer: $isOffer, normalPrice: $priceNormal, offerPrice: $priceOffer)',\n              );\n            }\n          }),\n        );\n      }\n\n      await Future.wait(priceFutures);\n      total.value = totalPriceOfItem.value + totalPriceOfofferItem.value;\n      totalPrice.value = total.value; // تحديث totalPrice أيضاً\n      totalCartItemCount.value =\n          currentTotalItems; // Update the total item count\n      update(); // This updates listeners to GetAddAndRemove\n\n      debugPrint('✅ Calculate totals completed:');\n      debugPrint('   Normal items total: ${totalPriceOfItem.value}');\n      debugPrint('   Offer items total: ${totalPriceOfofferItem.value}');\n      debugPrint('   FINAL TOTAL: ${total.value}');\n      debugPrint('   Total item count: ${totalCartItemCount.value}');\n    } catch (e) {\n      debugPrint(\"❌ Error calculating totals: $e\");\n      totalCartItemCount.value = 0; // Reset on error\n      total.value = 0;\n      totalPrice.value = 0;\n      // rethrow; // Or handle gracefully\n    }\n  }\n\n  // Method to be called by GetxAreYouSureMapOrder\n  int getTotalItemCountInCart() {\n    return totalCartItemCount.value;\n  }\n\n  /// تحدث الأسعار الإجمالية بعد أي تغيير في السلة\n  Future<void> refreshTotals() async {\n    debugPrint('refreshTotals11111111111111111111111');\n    await calculateTotals();\n    update();\n  }\n\n  /// دالة لزيادة كمية عنصر معين.\n  /// تُحدِّث قاعدة البيانات وتعيد حساب الإجماليات.\n  Future<void> incrementItem({\n    required String uidItem,\n    required String uidOfDoc,\n    required bool isOfer,\n    required String uidAdd,\n  }) async {\n    final String userId = FirebaseAuth.instance.currentUser!.uid;\n    final docRef = FirebaseFirestore.instance\n        .collection('the-chosen')\n        .doc(userId)\n        .collection(FirebaseX.appName)\n        .doc(uidOfDoc);\n\n    int currentCount = _itemQuantities[uidOfDoc] ?? 0;\n    currentCount++;\n    _itemQuantities[uidOfDoc] = currentCount;\n\n    // تحديث Firestore باستخدام set (insert/update)\n    await docRef.set({\n      'uidUser': userId,\n      'uidItem': uidItem,\n      'uidOfDoc': uidOfDoc,\n      'number': currentCount,\n      'isOfer': isOfer,\n      'uidAdd': uidAdd,\n    });\n\n    await refreshTotals();\n    update();\n  }\n\n  /// دالة لتقليل كمية عنصر معين.\n  /// إذا كانت الكمية 1 أو أقل، يتم حذف السجل.\n  Future<void> decrementItem({\n    required String uidItem,\n    required String uidOfDoc,\n    required bool isOfer,\n    required String uidAdd,\n  }) async {\n    final String userId = FirebaseAuth.instance.currentUser!.uid;\n    final docRef = FirebaseFirestore.instance\n        .collection('the-chosen')\n        .doc(userId)\n        .collection(FirebaseX.appName)\n        .doc(uidOfDoc);\n\n    int currentCount = _itemQuantities[uidOfDoc] ?? 0;\n\n    if (currentCount <= 1) {\n      await docRef.delete();\n      _itemQuantities[uidOfDoc] = 0;\n    } else {\n      currentCount--;\n      _itemQuantities[uidOfDoc] = currentCount;\n      await docRef.update({\n        'uidUser': userId,\n        'uidItem': uidItem,\n        'uidOfDoc': uidOfDoc,\n        'number': currentCount,\n        'isOfer': isOfer,\n        'uidAdd': uidAdd,\n      });\n    }\n    await refreshTotals();\n    update();\n  }\n\n  /// دالة لاسترجاع الكمية الحالية لمستند معين بناءً على uidOfDoc.\n  int getCurrentItemCount(String uidOfDoc) {\n    return _itemQuantities[uidOfDoc] ?? 0;\n  }\n\n  @override\n  void onInit() {\n    super.onInit();\n    // تحديث الأسعار عند بدء تهيئة المتحكم\n    refreshTotals();\n    // تشغيل دالة migration للتأكد من أن جميع المنتجات تحتوي على uidAdd\n    _migrateCartItemsWithSellerId();\n  }\n\n  /// دالة migration لإضافة uidAdd للمنتجات الموجودة في السلة\n  Future<void> _migrateCartItemsWithSellerId() async {\n    final String userId = FirebaseAuth.instance.currentUser!.uid;\n    debugPrint('🔄 Starting cart migration to add seller IDs...');\n\n    try {\n      // الحصول على جميع المنتجات في السلة\n      QuerySnapshot cartSnapshot =\n          await FirebaseFirestore.instance\n              .collection('the-chosen')\n              .doc(userId)\n              .collection(FirebaseX.appName)\n              .get();\n\n      int migratedCount = 0;\n\n      for (var doc in cartSnapshot.docs) {\n        final data = doc.data() as Map<String, dynamic>?;\n        if (data == null) continue;\n\n        // التحقق من وجود uidAdd\n        if (data['uidAdd'] == null || data['uidAdd'].toString().isEmpty) {\n          final String uidItem = data['uidItem'] as String? ?? \"\";\n          final bool isOffer = data['isOfer'] as bool? ?? false;\n\n          if (uidItem.isNotEmpty) {\n            // الحصول على معلومات المنتج من المجموعة المناسبة\n            DocumentSnapshot productDoc;\n            if (isOffer) {\n              productDoc =\n                  await FirebaseFirestore.instance\n                      .collection(FirebaseX.offersCollection)\n                      .doc(uidItem)\n                      .get();\n            } else {\n              productDoc =\n                  await FirebaseFirestore.instance\n                      .collection(FirebaseX.itemsCollection)\n                      .doc(uidItem)\n                      .get();\n            }\n\n            if (productDoc.exists) {\n              final productData = productDoc.data() as Map<String, dynamic>?;\n              final String uidAdd = productData?['uidAdd'] as String? ?? \"\";\n\n              if (uidAdd.isNotEmpty) {\n                // تحديث المستند في السلة بإضافة uidAdd\n                await doc.reference.update({'uidAdd': uidAdd});\n                migratedCount++;\n                debugPrint('✅ Migrated item ${doc.id} with seller ID: $uidAdd');\n              } else {\n                debugPrint('⚠️ Product $uidItem has no seller ID');\n              }\n            }\n          }\n        }\n      }\n\n      if (migratedCount > 0) {\n        debugPrint(\n          '✅ Migration completed: Updated $migratedCount items with seller IDs',\n        );\n        // إعادة حساب الإجماليات بعد التحديث\n        await refreshTotals();\n      } else {\n        debugPrint('ℹ️ No items needed migration');\n      }\n    } catch (e) {\n      debugPrint('❌ Error during cart migration: $e');\n    }\n  }\n\n  @override\n  void dispose() {\n    update();\n    _itemQuantities.clear();\n    total.value = 0;\n    totalPriceOfItem.value = 0;\n    totalPriceOfofferItem.value = 0;\n    totalPrice.value = 0;\n    super.dispose();\n  }\n}\n"
        }
    ]
}