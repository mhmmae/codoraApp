rules:
  # قاعدة إلزامية للاستجابة باللغة العربية
  - id: mandatory-arabic-response-rule
    description: "إجبار الاستجابة باللغة العربية مع وضع الأسماء الإنجليزية بين قوسين"
    context:
      responseLanguage: "العربية"
      englishTermsPattern: "[a-zA-Z][a-zA-Z0-9_]*"
      requiresArabicResponse: true
      detectedEnglishTerms: >
        (() => {
          const response = intent.details?.response || '';
          const englishWords = response.match(/\b[a-zA-Z][a-zA-Z0-9_]*\b/g) || [];
          const technicalTerms = englishWords.filter(word => 
            word.length > 2 && 
            !['the', 'and', 'or', 'but', 'in', 'on', 'at', 'to', 'for', 'of', 'with', 'by'].includes(word.toLowerCase())
          );
          return technicalTerms;
        })()
    when:
      intent.name == "apply_edit" ||
      intent.name == "ai_response" ||
      intent.name == "generate_code" ||
      intent.name == "explain_code" ||
      intent.name == "suggest_improvement"
    then:
      - action: ai_command
        command: >
          📝 **قاعدة اللغة العربية الإلزامية مُفعّلة!**
          
          **📋 المتطلبات الإلزامية:**
          
          ✅ **يجب الالتزام بما يلي في جميع الردود:**
          
                     1️⃣ **الاستجابة باللغة العربية حصرياً في المحادثة**
              - جميع الشروحات والتوضيحات بالعربية
              - جميع الردود والمحادثات بالعربية
              - التعليقات في الكود بالعربية
          
          2️⃣ **الأسماء الإنجليزية بين قوسين**
             - أسماء المكتبات: (flutter_screenutil)
             - أسماء الكلاسات: (StatelessWidget)
             - أسماء الدوال التقنية: (setState)
             - أسماء الخصائص: (width), (height), (padding)
             - أسماء الملفات: (main.dart), (pubspec.yaml)
          
                     **✅ أمثلة صحيحة:**
           ```dart
           // إنشاء كلاس (StatelessWidget) جديد
           class HomePage extends StatelessWidget {
             @override
             Widget build(BuildContext context) {
               return Scaffold(
                 appBar: AppBar(
                   title: Text('مرحباً بكم في كودورا'), // المحتوى بالعربية
                 ),
                 body: Container(
                   width: 200.w, // استخدام (flutter_screenutil)
                   height: 100.h,
                   child: Text(
                     'هذا نص تجريبي', // المحتوى بالعربية
                     style: TextStyle(fontSize: 16.sp),
                   ),
                 ),
               );
             }
           }
           ```
          
                     **❌ أمثلة خاطئة للمحادثة:**
           - "Creating a new StatelessWidget class" ❌
           - "استخدم مكتبة flutter_screenutil للتجاوب" ❌ (بدون قوسين)
           - "This widget is responsive" ❌
          
          **🎯 تطبيق القاعدة:**
          
          **في الشروحات:**
          - "قم بإنشاء كلاس (StatelessWidget) جديد"
          - "استخدم مكتبة (flutter_screenutil) للتجاوب"
          - "أضف خاصية (padding) للعنصر"
          
                     **في التعليقات داخل الكود:**
           ```dart
           // إنشاء كنترولر (GetX) للصفحة
           class HomePageController extends GetxController {
             // متغير تفاعلي للعد
             var counter = 0.obs;
             
             // دالة لزيادة العد
             void incrementCounter() {
               counter++; // زيادة القيمة
             }
           }
           ```
          
          **في أسماء الملفات:**
          - "احفظ الملف باسم (main.dart)"
          - "أضف المكتبة في ملف (pubspec.yaml)"
          - "إنشاء مجلد جديد باسم (lib/الكود الخاص بتطبيق البائع/)"
          
          **🚨 هذه القاعدة إلزامية ولا يمكن تجاهلها!**
          
          **سيتم تطبيق هذه القاعدة على:**
          - جميع الردود والشروحات
          - جميع أمثلة الكود
          - جميع التعليقات والتوضيحات
          - جميع أسماء المتغيرات والدوال
          - جميع رسائل الخطأ والتحذيرات
          
                     **📝 ملاحظات مهمة:**
           - أسماء الكلاسات والمتغيرات في الكود تبقى بالإنجليزية (أفضل الممارسات)
           - الكلمات التقنية مثل (class), (extends), (import) تبقى كما هي
           - فقط المحادثة والشروحات والتعليقات تكون بالعربية
           - الأسماء الإنجليزية في المحادثة توضع بين قوسين للوضوح

  - id: confirm-and-relocate-new-file-creation
    description: "Asks for confirmation before AI creates a new file and allows choosing a new location."
    context:
      proposedNewFile: >
        intent.details.edits.find(edit =>
          edit.kind == 'createFile' &&
          !workspace.fileExists(edit.path)
        )
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.kind == 'createFile' &&
        !workspace.fileExists(edit.path)
      )
    then:
      - action: prompt
        message: >
          الذكاء الاصطناعي يقترح إنشاء الملفات الجديدة التالية:
          {{
            intent.details.edits
              .filter(edit => edit.kind == 'createFile' && !workspace.fileExists(edit.path))
              .map(edit => `- ${edit.path}`)
              .join('\\n')
          }}
          ماذا تريد أن تفعل؟
        choices:
          - label: "✅ الموافقة (المسار الأصلي)"
            value: "allow_original"
          - label: "📝 الموافقة (اختيار مسار/اسم جديد)"
            value: "choose_location"
          - label: "❌ رفض الإنشاء"
            value: "deny"
        next_actions:
          choose_location:
            - action: prompt
              message: "أدخل المسار/الاسم الجديد للملف (المقترح أصلاً كـ '{{context.proposedNewFile.path}}'):"
              type: "text_input"
              default_value: "{{context.proposedNewFile.path}}"
              next_actions:
                ok:
                  - action: ai_command
                    command: >
                      قم بإنشاء الملف في المسار الجديد: {{prompt.result}}
                      بالمحتوى التالي:

                      ```{{ context.proposedNewFile.path.split('.').pop() }}
                      {{context.proposedNewFile.content}}
                      ```
                  - action: stop_ai
                    message: "تم التعامل مع إنشاء الملف بواسطة القاعدة. تم إيقاف الإجراء الأصلي لهذا الملف."

          allow_original:
            - action: no_op
              message: "تم السماح بإنشاء الملف في المسار الأصلي."

          deny:
            - action: stop_ai
              message: "تم رفض إنشاء الملف من قبل المستخدم."

  # قاعدة فرض استخدام StatelessWidget مع GetX
  - id: enforce-stateless-getx
    description: "فرض استخدام StatelessWidget مع GetX بدلاً من StatefulWidget"
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content.includes('StatefulWidget') ||
        (edit.content.includes('class ') && 
         edit.content.includes('Widget') && 
         !edit.content.includes('StatelessWidget'))
      )
    then:
      - action: prompt
        message: >
          تم اكتشاف إنشاء Widget جديد. في هذا المشروع نستخدم StatelessWidget مع GetX.
          هل تريد تحويله إلى StatelessWidget مع GetX Controller؟
        choices:
          - label: "✅ نعم، استخدم StatelessWidget + GetX"
            value: "convert_stateless"
          - label: "⚠️ لا، احتفظ بـ StatefulWidget (غير مستحسن)"
            value: "keep_stateful"
          - label: "❌ إلغاء إنشاء الWidget"
            value: "cancel"
        next_actions:
          convert_stateless:
            - action: ai_command
              command: >
                قم بتحويل هذا Widget إلى StatelessWidget واستخدم GetX Controller بدلاً من State.
                تأكد من:
                1. استخدام StatelessWidget
                2. إنشاء Controller منفصل يمتد من GetxController
                3. استخدام GetBuilder أو Obx للتفاعل
                4. إضافة التعليقات بالعربية
          cancel:
            - action: stop_ai
              message: "تم إلغاء إنشاء الWidget"

  # قاعدة التحقق من هيكل التطبيقات الأربعة
  - id: multi-app-structure-validation
    description: "التحقق من هيكل التطبيقات الأربعة (بائع، توصيل، عميل، أدمن)"
    context:
      appType: >
        (() => {
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          if (filePath.includes('الكود الخاص بتطبيق البائع')) return 'seller';
          if (filePath.includes('الكود الخاص بتطبيق التوصيل')) return 'delivery';
          if (filePath.includes('الكود الخاص بتطبيق العميل')) return 'customer';
          if (filePath.includes('الكود الخاص بتطبيق صاحب التطبيق')) return 'admin';
          if (filePath.includes('shared') || filePath.includes('مشترك')) return 'shared';
          return 'unknown';
        })()
      targetPath: >
        intent.details.edits.find(edit => edit.path)?.path || ''
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.kind == 'createFile' &&
        !workspace.fileExists(edit.path)
      )
    then:
      - action: prompt
        message: >
          تم اكتشاف إنشاء ملف في: {{context.targetPath}}
          
          نوع التطبيق المحدد: {{context.appType}}
          
          هذا المشروع يحتوي على 4 تطبيقات:
          🏪 تطبيق البائع (Seller)
          🚚 تطبيق التوصيل (Delivery) 
          👤 تطبيق العميل (Customer)
          👨‍💼 تطبيق الأدمن (Admin)
          📦 مجلد مشترك (Shared)
          
          هل هذا الملف في المكان الصحيح؟
        choices:
          - label: "✅ نعم، المكان صحيح"
            value: "correct_location"
          - label: "📝 لا، أريد تغيير المكان"
            value: "change_location"
          - label: "🔄 هذا كود مشترك بين التطبيقات"
            value: "shared_code"
          - label: "❌ إلغاء الإنشاء"
            value: "cancel"
        next_actions:
          change_location:
            - action: prompt
              message: >
                اختر التطبيق المناسب لهذا الملف:
                
                🏪 للبائع: lib/الكود الخاص بتطبيق البائع/
                🚚 للتوصيل: lib/الكود الخاص بتطبيق التوصيل/
                👤 للعميل: lib/الكود الخاص بتطبيق العميل/
                👨‍💼 للأدمن: lib/الكود الخاص بتطبيق صاحب التطبيق/
                📦 مشترك: lib/shared/
              type: "text_input"
              default_value: "lib/shared/"
              next_actions:
                ok:
                  - action: ai_command
                    command: >
                      قم بإنشاء الملف في المسار الجديد: {{prompt.result}}
                      وتأكد من أن الكود مناسب لنوع التطبيق المحدد
          shared_code:
            - action: ai_command
              command: >
                انقل هذا الملف إلى مجلد shared وتأكد من أنه:
                1. قابل للاستخدام في جميع التطبيقات
                2. لا يحتوي على كود خاص بتطبيق معين
                3. يستخدم interfaces عامة
                4. موثق بشكل جيد
          cancel:
            - action: stop_ai
              message: "تم إلغاء إنشاء الملف"

  # قاعدة منع الخلط بين التطبيقات
  - id: prevent-cross-app-contamination
    description: "منع إنشاء كود خاص بتطبيق في تطبيق آخر"
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        (edit.content.includes('البائع') && !edit.path.includes('الكود الخاص بتطبيق البائع')) ||
        (edit.content.includes('التوصيل') && !edit.path.includes('الكود الخاص بتطبيق التوصيل') && !edit.path.includes('shared')) ||
        (edit.content.includes('العميل') && !edit.path.includes('الكود الخاص بتطبيق العميل') && !edit.path.includes('shared')) ||
        (edit.content.includes('الأدمن') && !edit.path.includes('الكود الخاص بتطبيق صاحب التطبيق') && !edit.path.includes('shared'))
      )
    then:
      - action: prompt
        message: >
          ⚠️ تحذير: تم اكتشاف كود خاص بتطبيق معين في مكان غير مناسب!
          
          هذا قد يسبب:
          - خلط في الوظائف
          - صعوبة في الصيانة
          - أخطاء في التشغيل
          
          ماذا تريد أن تفعل؟
        choices:
          - label: "🔄 نقل إلى التطبيق الصحيح"
            value: "move_to_correct_app"
          - label: "📦 تحويل إلى كود مشترك"
            value: "make_shared"
          - label: "✏️ تعديل الكود ليكون عاماً"
            value: "make_generic"
          - label: "❌ إلغاء التعديل"
            value: "cancel"
        next_actions:
          move_to_correct_app:
            - action: ai_command
              command: "حدد التطبيق المناسب وانقل الكود إلى المجلد الصحيح"
          make_shared:
            - action: ai_command
              command: "حول هذا الكود إلى كود مشترك قابل للاستخدام في جميع التطبيقات"
          make_generic:
            - action: ai_command
              command: "عدل الكود ليكون عاماً وقابل للاستخدام في أي تطبيق"

  # قاعدة التحقق من استخدام GetX
  - id: enforce-getx-usage
    description: "فرض استخدام GetX للـ state management"
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content.includes('setState') ||
        edit.content.includes('Provider') ||
        edit.content.includes('BlocProvider') ||
        edit.content.includes('ValueNotifier')
      )
    then:
      - action: prompt
        message: >
          🎯 تم اكتشاف استخدام state management غير GetX!
          
          هذا المشروع يستخدم GetX حصرياً لإدارة الحالة.
          هل تريد تحويله إلى GetX؟
        choices:
          - label: "✅ نعم، استخدم GetX"
            value: "convert_to_getx"
          - label: "❌ لا، احتفظ بالطريقة الحالية (غير مستحسن)"
            value: "keep_current"
        next_actions:
          convert_to_getx:
            - action: ai_command
              command: >
                قم بتحويل إدارة الحالة إلى GetX:
                1. استخدم GetxController بدلاً من setState
                2. استخدم .obs للمتغيرات التفاعلية
                3. استخدم GetBuilder أو Obx في الـ UI
                                 4. أضف التعليقات المناسبة

  # قاعدة التحقق من الاستيراد بين التطبيقات
  - id: validate-cross-app-imports
    description: "التحقق من صحة الاستيراد بين التطبيقات المختلفة"
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content.includes('import ') &&
        (edit.content.includes('../') || edit.content.includes('../../'))
      )
    then:
      - action: prompt
        message: >
          🔍 تم اكتشاف استيراد من مجلدات أخرى!
          
          تأكد من أن الاستيراد صحيح:
          ✅ يمكن استيراد من shared إلى أي تطبيق
          ✅ يمكن استيراد من نفس التطبيق
          ❌ لا يمكن استيراد من تطبيق لآخر
          
          هل الاستيراد صحيح؟
        choices:
          - label: "✅ نعم، الاستيراد صحيح"
            value: "import_correct"
          - label: "🔄 نقل الملف إلى shared"
            value: "move_to_shared"
          - label: "✏️ تعديل الاستيراد"
            value: "fix_import"
          - label: "❌ إلغاء التعديل"
            value: "cancel"
        next_actions:
          move_to_shared:
            - action: ai_command
              command: "انقل الملف المستورد إلى مجلد shared وعدل الاستيراد"
          fix_import:
            - action: ai_command
              command: "عدل الاستيراد ليكون من مجلد مناسب أو shared"

  # قاعدة إنشاء ملف README لكل تطبيق
  - id: app-documentation
    description: "التحقق من وجود توثيق لكل تطبيق"
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.kind == 'createFile' &&
        (edit.path.includes('الكود الخاص بتطبيق البائع') ||
         edit.path.includes('الكود الخاص بتطبيق التوصيل') ||
         edit.path.includes('الكود الخاص بتطبيق العميل') ||
         edit.path.includes('الكود الخاص بتطبيق صاحب التطبيق')) &&
        !edit.path.includes('README')
      )
    then:
      - action: prompt
        message: >
          📚 هل تريد إنشاء أو تحديث ملف README لهذا التطبيق؟
          
          التوثيق مهم لـ:
          - شرح وظائف التطبيق
          - توضيح هيكل الملفات
          - تسهيل الصيانة
        choices:
          - label: "✅ نعم، أضف/حدث README"
            value: "add_readme"
          - label: "❌ لا، تابع بدون README"
            value: "skip_readme"
        next_actions:
          add_readme:
            - action: ai_command
              command: >
                أنشئ أو حدث ملف README.md لهذا التطبيق يحتوي على:
                1. وصف التطبيق ووظائفه
                2. هيكل المجلدات
                3. الملفات المهمة
                4. تعليمات الاستخدام

  # قاعدة إجبار حفظ Models في مجلد lib/Model
  - id: enforce-model-location
    description: "إجبار حفظ جميع النماذج في مجلد lib/Model"
    context:
      modelFile: >
        intent.details.edits.find(edit => 
          (edit.kind == 'createFile' || edit.kind == 'editFile') &&
          (edit.path.toLowerCase().includes('model') || 
           edit.content?.includes('class ') && 
           (edit.content.includes('Model') || edit.content.includes('model')))
        )
      isInCorrectLocation: >
        intent.details.edits.find(edit => edit.path)?.path?.startsWith('lib/Model/') || false
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        (edit.kind == 'createFile' || edit.kind == 'editFile') &&
        (edit.path.toLowerCase().includes('model') ||
         edit.path.toLowerCase().endsWith('model.dart') ||
         (edit.content && 
          edit.content.includes('class ') && 
          (edit.content.includes('Model {') || 
           edit.content.includes('Model extends') ||
           edit.content.includes('model {') ||
           edit.content.includes('fromMap') ||
           edit.content.includes('toMap') ||
           edit.content.includes('fromJson') ||
           edit.content.includes('toJson') ||
           edit.content.includes('fromFirestore'))))
      ) &&
      !intent.details.edits.some(edit => edit.path?.startsWith('lib/Model/'))
    then:
      - action: prompt
        message: >
          📋 تم اكتشاف إنشاء أو تعديل Model جديد!
          
          الملف المقترح: {{context.modelFile.path}}
          
          🎯 في مشروع كودورا، جميع النماذج (Models) يجب أن تكون في:
          📁 lib/Model/
          
          هذا يضمن:
          ✅ سهولة الوصول من جميع التطبيقات الأربعة
          ✅ تنظيم أفضل للبيانات
          ✅ تجنب التكرار
          ✅ إدارة أسهل للنماذج
          
          ماذا تريد أن تفعل؟
        choices:
          - label: "✅ نقل إلى lib/Model/ (مستحسن)"
            value: "move_to_model_folder"
          - label: "📝 تحديد اسم مختلف في lib/Model/"
            value: "choose_model_name"
          - label: "⚠️ الاحتفاظ بالمكان الحالي (غير مستحسن)"
            value: "keep_current_location"
          - label: "❌ إلغاء العملية"
            value: "cancel"
        next_actions:
          move_to_model_folder:
            - action: ai_command
              command: >
                انقل هذا Model إلى مجلد lib/Model/ واستخدم تسمية مناسبة:
                
                1. احفظ الملف في lib/Model/
                2. استخدم تسمية واضحة مثل: item_model.dart, user_model.dart
                3. تأكد من أن الكلاس يحتوي على:
                   - fromMap() constructor
                   - toMap() method
                   - toString() method (اختياري)
                4. أضف تعليقات باللغة العربية لشرح الحقول
                5. حدث جميع imports في الملفات الأخرى إذا لزم الأمر
          choose_model_name:
            - action: prompt
              message: "أدخل اسم الملف الجديد في lib/Model/ (مثل: item_model.dart):"
              type: "text_input"
              default_value: "{{context.modelFile.path.split('/').pop()}}"
              next_actions:
                ok:
                  - action: ai_command
                    command: >
                      أنشئ Model في المسار: lib/Model/{{prompt.result}}
                      
                      تأكد من:
                      1. استخدام تسمية واضحة ومفهومة
                      2. إضافة جميع الطرق المطلوبة (fromMap, toMap)
                      3. توثيق الحقول بالعربية
                      4. تحديث imports في الملفات المرتبطة
          keep_current_location:
            - action: ai_command
              command: >
                تحذير: هذا Model ليس في lib/Model/ مما قد يسبب:
                - صعوبة في الوصول من التطبيقات الأخرى
                - تكرار في الكود
                - صعوبة في الصيانة
                
                يُنصح بنقله إلى lib/Model/ لاحقاً.
          cancel:
            - action: stop_ai
              message: "تم إلغاء إنشاء/تعديل الـ Model"

  # قاعدة التحقق من وجود مجلد lib/Model
  - id: ensure-model-folder-exists
    description: "التأكد من وجود مجلد lib/Model"
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.path?.startsWith('lib/Model/') &&
        edit.kind == 'createFile'
      )
    then:
      - action: ai_command
        command: >
          تأكد من وجود مجلد lib/Model/ وإنشاؤه إذا لم يكن موجوداً.
          
          إذا كان هذا أول model في المشروع، أنشئ أيضاً:
          1. ملف lib/Model/README.md يشرح هيكل النماذج
          2. ملف lib/Model/base_model.dart كنموذج أساسي (اختياري)

  # قاعدة تكرار الكود للميزات المتعددة التطبيقات
  - id: duplicate-code-for-multi-app-features
    description: "تكرار الكود إذا كان يعمل في تطبيقين أو أكثر"
    context:
      affectedApps: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const apps = [];
          if (content.includes('بائع') || content.includes('seller')) apps.push('البائع');
          if (content.includes('توصيل') || content.includes('delivery')) apps.push('التوصيل');
          if (content.includes('عميل') || content.includes('customer')) apps.push('العميل');
          if (content.includes('أدمن') || content.includes('admin')) apps.push('الأدمن');
          return apps;
        })()
      isMultiApp: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const apps = [];
          if (content.includes('بائع') || content.includes('seller')) apps.push('seller');
          if (content.includes('توصيل') || content.includes('delivery')) apps.push('delivery');
          if (content.includes('عميل') || content.includes('customer')) apps.push('customer');
          if (content.includes('أدمن') || content.includes('admin')) apps.push('admin');
          return apps.length >= 2;
        })()
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          (edit.content.includes('بائع') || edit.content.includes('seller')) &&
          (edit.content.includes('توصيل') || edit.content.includes('delivery') ||
           edit.content.includes('عميل') || edit.content.includes('customer') ||
           edit.content.includes('أدمن') || edit.content.includes('admin'))
        ) ||
        (edit.content.includes('توصيل') || edit.content.includes('delivery')) &&
        (edit.content.includes('عميل') || edit.content.includes('customer') ||
         edit.content.includes('أدمن') || edit.content.includes('admin')) ||
        (edit.content.includes('عميل') || edit.content.includes('customer')) &&
        (edit.content.includes('أدمن') || edit.content.includes('admin'))
      )
    then:
      - action: prompt
        message: >
          🔄 تم اكتشاف ميزة تعمل في عدة تطبيقات!
          
          التطبيقات المتأثرة: {{context.affectedApps.join(', ')}}
          
          🎯 في مشروع كودورا، كل تطبيق مستقل بذاته.
          إذا كانت الميزة تعمل في تطبيقين أو أكثر، يُفضل:
          
          ✅ تكرار الكود في كل تطبيق (استقلالية كاملة)
          ❌ عدم ربط التطبيقات ببعضها البعض
          
          ماذا تريد أن تفعل؟
        choices:
          - label: "🔄 تكرار الكود في كل تطبيق (مستحسن)"
            value: "duplicate_code"
          - label: "📦 نقل إلى shared (إذا كان عاماً حقاً)"
            value: "move_to_shared"
          - label: "✂️ تقسيم الكود حسب التطبيق"
            value: "split_by_app"
          - label: "❌ إلغاء العملية"
            value: "cancel"
        next_actions:
          duplicate_code:
            - action: ai_command
              command: >
                قم بتكرار هذا الكود في كل تطبيق من التطبيقات المتأثرة:
                
                1. أنشئ نسخة منفصلة في كل تطبيق:
                   - lib/الكود الخاص بتطبيق البائع/ (إذا كان للبائع)
                   - lib/الكود الخاص بتطبيق التوصيل/ (إذا كان للتوصيل)
                   - lib/الكود الخاص بتطبيق العميل/ (إذا كان للعميل)
                   - lib/الكود الخاص بتطبيق صاحب التطبيق/ (إذا كان للأدمن)
                
                2. خصص كل نسخة للتطبيق المحدد:
                   - عدل الأسماء لتكون واضحة (مثل: SellerProductCard, CustomerProductCard)
                   - أضف تعليقات توضح الاختلافات
                   - احذف الأجزاء غير المطلوبة في كل تطبيق
                
                3. تأكد من عدم وجود dependencies بين التطبيقات
          move_to_shared:
            - action: ai_command
              command: >
                انقل هذا الكود إلى lib/shared/ واجعله عاماً تماماً:
                
                1. احذف أي كود خاص بتطبيق معين
                2. استخدم parameters لتخصيص السلوك
                3. اجعله قابل للاستخدام من أي تطبيق
                4. أضف توثيق واضح للاستخدام
          split_by_app:
            - action: ai_command
              command: >
                قسم هذا الكود حسب التطبيق:
                
                1. حدد الأجزاء الخاصة بكل تطبيق
                2. أنشئ ملفات منفصلة لكل تطبيق
                3. ضع كل جزء في التطبيق المناسب له
                4. تأكد من عدم وجود تداخل بين التطبيقات

  # قاعدة فصل الكود المختلط بين التطبيقات
  - id: separate-mixed-app-code
    description: "فصل الكود المختلط الذي يحتوي على أجزاء من تطبيقات مختلفة"
    context:
      detectedApps: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          const apps = [];
          
          // فحص المحتوى
          if (content.includes('بائع') || content.includes('seller') || content.includes('Seller')) {
            apps.push('البائع');
          }
          if (content.includes('توصيل') || content.includes('delivery') || content.includes('Delivery')) {
            apps.push('التوصيل');
          }
          if (content.includes('عميل') || content.includes('customer') || content.includes('Customer')) {
            apps.push('العميل');
          }
          if (content.includes('أدمن') || content.includes('admin') || content.includes('Admin')) {
            apps.push('الأدمن');
          }
          
          // فحص المسار
          const pathApp = (() => {
            if (filePath.includes('الكود الخاص بتطبيق البائع')) return 'البائع';
            if (filePath.includes('الكود الخاص بتطبيق التوصيل')) return 'التوصيل';
            if (filePath.includes('الكود الخاص بتطبيق العميل')) return 'العميل';
            if (filePath.includes('الكود الخاص بتطبيق صاحب التطبيق')) return 'الأدمن';
            return null;
          })();
          
          return { contentApps: apps, pathApp: pathApp, isMixed: apps.length > 1 };
        })()
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && 
        edit.path &&
        !edit.path.includes('shared') &&
        !edit.path.includes('Model') &&
        (() => {
          const content = edit.content;
          const hasMultipleApps = [
            content.includes('بائع') || content.includes('seller') || content.includes('Seller'),
            content.includes('توصيل') || content.includes('delivery') || content.includes('Delivery'),
            content.includes('عميل') || content.includes('customer') || content.includes('Customer'),
            content.includes('أدمن') || content.includes('admin') || content.includes('Admin')
          ].filter(Boolean).length > 1;
          
          return hasMultipleApps;
        })()
      )
    then:
      - action: prompt
        message: >
          ✂️ تم اكتشاف كود مختلط يحتوي على أجزاء من تطبيقات مختلفة!
          
          🔍 التطبيقات المكتشفة في المحتوى: {{context.detectedApps.contentApps.join(', ')}}
          📁 المسار الحالي ينتمي لـ: {{context.detectedApps.pathApp || 'غير محدد'}}
          
          ⚠️ هذا يخالف مبدأ الفصل بين التطبيقات!
          
          🎯 الحل: فصل كل جزء ووضعه في التطبيق المناسب له
          
          ماذا تريد أن تفعل؟
        choices:
          - label: "✂️ فصل الكود وتوزيعه (مستحسن)"
            value: "separate_and_distribute"
          - label: "🔄 إعادة كتابة ليكون خاص بتطبيق واحد"
            value: "rewrite_single_app"
          - label: "📦 تحويل إلى كود مشترك عام"
            value: "make_generic_shared"
          - label: "❌ إلغاء العملية"
            value: "cancel"
        next_actions:
          separate_and_distribute:
            - action: ai_command
              command: >
                قم بفصل هذا الكود وتوزيعه على التطبيقات المناسبة:
                
                1. حلل الكود وحدد الأجزاء الخاصة بكل تطبيق:
                   - ما يخص البائع → lib/الكود الخاص بتطبيق البائع/
                   - ما يخص التوصيل → lib/الكود الخاص بتطبيق التوصيل/
                   - ما يخص العميل → lib/الكود الخاص بتطبيق العميل/
                   - ما يخص الأدمن → lib/الكود الخاص بتطبيق صاحب التطبيق/
                
                2. أنشئ ملفات منفصلة لكل تطبيق:
                   - استخدم أسماء واضحة (مثل: seller_dashboard.dart, customer_dashboard.dart)
                   - ضع كل ملف في التطبيق المناسب
                   - احذف الأجزاء غير المتعلقة من كل ملف
                
                3. تأكد من عدم وجود dependencies بين الملفات الجديدة
                
                4. أضف تعليقات توضح الغرض من كل ملف
          rewrite_single_app:
            - action: ai_command
              command: >
                أعد كتابة هذا الكود ليكون خاصاً بتطبيق واحد فقط:
                
                1. حدد التطبيق الأساسي المستهدف
                2. احذف جميع المراجع للتطبيقات الأخرى
                3. ركز على وظائف التطبيق المحدد فقط
                4. استخدم مسميات واضحة خاصة بالتطبيق
                5. أضف تعليقات توضح أن هذا خاص بتطبيق معين
          make_generic_shared:
            - action: ai_command
              command: >
                حول هذا الكود إلى مكون مشترك عام:
                
                1. انقله إلى lib/shared/
                2. احذف جميع الأكواد الخاصة بتطبيقات معينة
                3. استخدم parameters للتحكم في السلوك
                4. اجعله قابل للتخصيص من أي تطبيق
                5. أضف توثيق شامل للاستخدام
                6. تأكد من أنه لا يحتوي على منطق خاص بتطبيق معين

  # قاعدة فحص وإصلاح الأخطاء التلقائي
  - id: auto-error-detection-and-fix
    description: "فحص وإصلاح الأخطاء تلقائياً بعد كل عملية إنشاء أو تعديل كود"
    context:
      editedFiles: >
        intent.details.edits
          .filter(edit => edit.kind === 'createFile' || edit.kind === 'editFile')
          .map(edit => edit.path)
      hasCodeChanges: >
        intent.details.edits.some(edit => 
          (edit.kind === 'createFile' || edit.kind === 'editFile') &&
          (edit.path.endsWith('.dart') || 
           edit.path.endsWith('.yaml') || 
           edit.path.endsWith('.yml'))
        )
      maxRetries: 3
      currentRetry: 0
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        (edit.kind === 'createFile' || edit.kind === 'editFile') &&
        (edit.path.endsWith('.dart') || 
         edit.path.endsWith('.yaml') || 
         edit.path.endsWith('.yml') ||
         edit.path.endsWith('.json'))
      )
    then:
      - action: ai_command
        command: >
          🔍 **فحص الأخطاء التلقائي** - تم تنفيذ عملية إنشاء/تعديل كود.
          
          الملفات المُعدلة: {{context.editedFiles.join(', ')}}
          
          سأقوم الآن بفحص شامل للأخطاء وإصلاحها:
          
          **المرحلة 1: فحص أخطاء التركيب (Syntax Errors)**
          - فحص جميع ملفات .dart للتأكد من صحة التركيب
          - البحث عن الأقواس المفقودة أو الزائدة
          - التحقق من الفواصل والنقاط المفقودة
          
          **المرحلة 2: فحص أخطاء الاستيراد (Import Errors)**  
          - التحقق من صحة جميع عبارات import
          - البحث عن مسارات غير صحيحة
          - التأكد من وجود الملفات المستوردة
          
          **المرحلة 3: فحص أخطاء النوع (Type Errors)**
          - التحقق من تطابق الأنواع
          - فحص المتغيرات غير المُعرفة
          - التأكد من صحة استدعاء الدوال
          
          **المرحلة 4: فحص أخطاء التحليل (Analysis Errors)**
          - فحص التحذيرات والأخطاء المنطقية
          - التحقق من best practices
          - فحص قواعد الكود المخصصة
          
          إذا وُجدت أخطاء، سأقوم بإصلاحها فوراً ثم أعيد الفحص.
          العملية ستتكرر حتى عدم وجود أي أخطاء (حد أقصى {{context.maxRetries}} محاولات).
      - action: prompt
        message: >
          🔍 **فحص الأخطاء التلقائي مُفعّل**
          
          📁 الملفات التي سيتم فحصها:
          {{context.editedFiles.map(file => `- ${file}`).join('\n')}}
          
          🎯 سيتم فحص:
          ✅ أخطاء التركيب (Syntax Errors)
          ✅ أخطاء الاستيراد (Import Errors)  
          ✅ أخطاء النوع (Type Errors)
          ✅ أخطاء التحليل (Analysis Errors)
          ✅ تحذيرات الجودة (Quality Warnings)
          
          هل تريد المتابعة مع الفحص التلقائي؟
        choices:
          - label: "🚀 نعم، ابدأ الفحص والإصلاح التلقائي"
            value: "start_auto_check"
          - label: "🔧 فحص وإصلاح يدوي مع التأكيد"
            value: "manual_check_confirm"
          - label: "📋 فحص فقط بدون إصلاح"
            value: "check_only"
          - label: "⏭️ تجاهل الفحص هذه المرة"
            value: "skip_check"
        next_actions:
          start_auto_check:
            - action: ai_command
              command: >
                🚀 **بدء الفحص والإصلاح التلقائي**
                
                **الخطوة 1: تشغيل flutter analyze**
                قم بتشغيل flutter analyze على المشروع بالكامل وأظهر النتائج.
                
                **الخطوة 2: فحص الأخطاء**
                إذا وُجدت أخطاء:
                1. حدد نوع كل خطأ (syntax, import, type, analysis)
                2. حدد الملف والسطر المحدد
                3. اشرح سبب الخطأ
                
                **الخطوة 3: الإصلاح التلقائي**
                قم بإصلاح كل خطأ على حدة:
                1. أخطاء التركيب → إصلاح فوري
                2. أخطاء الاستيراد → تصحيح المسارات أو إضافة الاستيراد
                3. أخطاء النوع → تصحيح الأنواع أو إضافة التحويل
                4. أخطاء التحليل → تطبيق أفضل الممارسات
                
                **الخطوة 4: إعادة الفحص**
                بعد كل إصلاح، أعد تشغيل flutter analyze
                إذا وُجدت أخطاء جديدة، كرر العملية
                
                **الخطوة 5: التأكيد النهائي**
                تأكد من عدم وجود أي أخطاء نهائياً
                أظهر رسالة "No issues found!" أو ما يعادلها
                
                **حد المحاولات:** {{context.maxRetries}} محاولات كحد أقصى
                **الهدف:** صفر أخطاء نهائياً ✅
          manual_check_confirm:
            - action: ai_command
              command: >
                🔧 **الفحص والإصلاح اليدوي**
                
                سأقوم بفحص الأخطاء وعرضها عليك قبل الإصلاح:
                
                1. **تشغيل flutter analyze** وعرض النتائج
                2. **تحليل كل خطأ** مع شرح السبب والحل
                3. **اقتراح الإصلاح** مع السؤال عن الموافقة
                4. **تطبيق الإصلاح** بعد التأكيد
                5. **إعادة الفحص** للتأكد من نجاح الإصلاح
                
                هذا الوضع يمنحك سيطرة أكبر على عملية الإصلاح.
          check_only:
            - action: ai_command
              command: >
                📋 **فحص فقط بدون إصلاح**
                
                سأقوم بـ:
                1. تشغيل flutter analyze
                2. عرض جميع الأخطاء والتحذيرات
                3. تصنيف الأخطاء حسب النوع والأولوية  
                4. اقتراح الحلول بدون تطبيقها
                5. إعطاء تقرير شامل عن حالة الكود
                
                لن يتم تعديل أي كود في هذا الوضع.
          skip_check:
            - action: no_op
              message: "تم تجاهل فحص الأخطاء. يمكنك تشغيله لاحقاً يدوياً."

  # قاعدة متابعة إصلاح الأخطاء المتكررة
  - id: iterative-error-fixing
    description: "متابعة إصلاح الأخطاء إذا ظهرت أخطاء جديدة بعد الإصلاح"
    context:
      previousErrors: >
        intent.context?.previousErrors || []
      retryCount: >
        intent.context?.retryCount || 0
      maxRetries: 3
    when:
      intent.name == "apply_edit" &&
      intent.context?.hasErrors === true &&
      intent.context?.retryCount < intent.context?.maxRetries
    then:
      - action: prompt
        message: >
          🔄 **تم اكتشاف أخطاء بعد الإصلاح السابق**
          
          المحاولة رقم: {{context.retryCount + 1}} من {{context.maxRetries}}
          
          🔍 الأخطاء الحالية:
          {{context.previousErrors.map(error => `- ${error}`).join('\n')}}
          
          ماذا تريد أن تفعل؟
        choices:
          - label: "🔧 متابعة الإصلاح التلقائي"
            value: "continue_fixing"
          - label: "🔍 فحص يدوي للأخطاء الجديدة"
            value: "manual_inspection"
          - label: "📋 عرض تفاصيل الأخطاء"
            value: "show_error_details"
          - label: "⏹️ إيقاف عملية الإصلاح"
            value: "stop_fixing"
        next_actions:
          continue_fixing:
            - action: ai_command
              command: >
                🔧 **متابعة الإصلاح التلقائي - المحاولة {{context.retryCount + 1}}**
                
                1. **تحليل الأخطاء الجديدة:**
                   - قارن مع الأخطاء السابقة
                   - حدد إذا كانت أخطاء جديدة أم متكررة
                   - اكتشف إذا كان الإصلاح السابق سبب أخطاء جديدة
                
                2. **استراتيجية الإصلاح:**
                   - ركز على الأخطاء الحرجة أولاً
                   - اصلح خطأ واحد في كل مرة
                   - تأكد من كل إصلاح قبل الانتقال للتالي
                
                3. **تشغيل flutter analyze مرة أخرى**
                
                4. **إذا نجح الإصلاح:** انتقل للخطأ التالي
                
                5. **إذا ظهرت أخطاء جديدة:** سجلها وحاول إيجاد السبب
          manual_inspection:
            - action: ai_command
              command: >
                🔍 **فحص يدوي للأخطاء المستمرة**
                
                سأقوم بـ:
                1. عرض تفاصيل كل خطأ
                2. تحليل سبب عدم نجاح الإصلاح السابق
                3. اقتراح حلول بديلة
                4. طلب التأكيد قبل كل إصلاح
                5. تتبع التقدم خطوة بخطوة
          show_error_details:
            - action: ai_command
              command: >
                📋 **تفاصيل الأخطاء الحالية**
                
                سأعرض لك:
                1. قائمة مفصلة بكل خطأ
                2. الملف والسطر المحدد
                3. رسالة الخطأ كاملة
                4. السبب المحتمل
                5. الحلول المقترحة
                6. مستوى الأولوية لكل خطأ
          stop_fixing:
            - action: stop_ai
              message: >
                ⏹️ تم إيقاف عملية الإصلاح التلقائي.
                
                📊 **ملخص العملية:**
                - عدد المحاولات: {{context.retryCount}}
                - الأخطاء المتبقية: {{context.previousErrors.length}}
                
                يمكنك إصلاح الأخطاء المتبقية يدوياً أو إعادة تشغيل عملية الفحص لاحقاً.

  # قاعدة تقرير جودة الكود النهائي
  - id: final-code-quality-report
    description: "إنشاء تقرير شامل عن جودة الكود بعد اكتمال الإصلاحات"
    when:
      intent.name == "apply_edit" &&
      intent.context?.allErrorsFixed === true
    then:
      - action: ai_command
        command: >
          📊 **تقرير جودة الكود النهائي**
          
          ✅ **تم إنجاز جميع الإصلاحات بنجاح!**
          
          📈 **إحصائيات العملية:**
          - عدد الملفات المُعدلة: {{context.editedFiles?.length || 0}}
          - عدد الأخطاء المُصلحة: {{context.fixedErrors?.length || 0}}  
          - عدد المحاولات: {{context.retryCount || 0}}
          - الوقت المستغرق: {{context.processingTime || 'غير محدد'}}
          
          🎯 **حالة الكود الحالية:**
          - ✅ لا توجد أخطاء تركيب
          - ✅ لا توجد أخطاء استيراد
          - ✅ لا توجد أخطاء نوع
          - ✅ لا توجد أخطاء تحليل
          - ✅ الكود جاهز للتشغيل
          
          🚀 **التوصيات:**
          - تم التأكد من جودة الكود
          - يمكن المتابعة بأمان للخطوة التالية
          - الكود يتبع أفضل الممارسات
          
          **النتيجة النهائية:** 🌟 كود عالي الجودة وخالي من الأخطاء!

  # قاعدة إدارة أسماء Firebase Collections
  - id: firebase-collections-management
    description: "إدارة وتنظيم أسماء Firebase Collections في ملف مرجعي مركزي"
    context:
      firebaseFile: "lib/XXX/XXXFirebase.dart"
      detectedCollections: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const collectionMatches = content.match(/collection\(['"`]([^'"`]+)['"`]\)/g) || [];
          const firebaseMatches = content.match(/FirebaseFirestore\.instance\.collection\(['"`]([^'"`]+)['"`]\)/g) || [];
          const dbMatches = content.match/\.collection\(['"`]([^'"`]+)['"`]\)/g) || [];
          
          const collections = [];
          [...collectionMatches, ...firebaseMatches, ...dbMatches].forEach(match => {
            const nameMatch = match.match(/['"`]([^'"`]+)['"`]/);
            if (nameMatch && nameMatch[1]) {
              collections.push(nameMatch[1]);
            }
          });
          
          return [...new Set(collections)]; // إزالة التكرار
        })()
      hasFirebaseCollections: >
        intent.details.edits.some(edit =>
          edit.content && (
            edit.content.includes('collection(') ||
            edit.content.includes('FirebaseFirestore.instance.collection') ||
            edit.content.includes('.collection(')
          )
        )
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('collection(') ||
          edit.content.includes('FirebaseFirestore.instance.collection') ||
          edit.content.includes('.collection(') ||
          edit.content.includes('firebase') ||
          edit.content.includes('firestore') ||
          edit.content.includes('Firebase')
        )
      )
    then:
      - action: prompt
        message: >
          🔥 **تم اكتشاف استخدام Firebase Collections!**
          
          📋 Collections المكتشفة في الكود:
          {{context.detectedCollections.map(name => `- "${name}"`).join('\n')}}
          
          🎯 **في مشروع كودورا، جميع أسماء Collections يجب أن تكون منظمة في:**
          📁 `lib/XXX/XXXFirebase.dart` (ملف مرجعي مركزي)
          
          هذا يضمن:
          ✅ عدم تكرار الأسماء
          ✅ تجنب الأخطاء الإملائية
          ✅ سهولة الصيانة والتعديل
          ✅ مرجع مركزي لجميع Collections
          
          ماذا تريد أن تفعل؟
        choices:
          - label: "🔍 فحص الملف المرجعي وإضافة الأسماء الجديدة (مستحسن)"
            value: "check_and_add_collections"
          - label: "📝 إنشاء ملف Firebase مرجعي جديد"
            value: "create_firebase_reference_file"
          - label: "🔄 استبدال الأسماء المباشرة بالمراجع"
            value: "replace_with_references"
          - label: "📋 عرض جميع Collections الموجودة"
            value: "show_existing_collections"
          - label: "⏭️ تجاهل هذه المرة"
            value: "skip_firebase_check"
        next_actions:
          check_and_add_collections:
            - action: ai_command
              command: >
                🔍 **فحص وإدارة Firebase Collections**
                
                **الخطوة 1: البحث عن الملف المرجعي**
                ابحث عن ملف `lib/XXX/XXXFirebase.dart` أو أي ملف مشابه يحتوي على أسماء Collections.
                
                **الخطوة 2: فحص الأسماء الموجودة**
                اقرأ الملف المرجعي واستخرج جميع أسماء Collections الموجودة.
                
                **الخطوة 3: مقارنة الأسماء الجديدة**
                قارن الأسماء المكتشفة: {{context.detectedCollections.join(', ')}}
                مع الأسماء الموجودة في الملف المرجعي.
                
                **الخطوة 4: إضافة الأسماء الجديدة**
                إذا وُجدت أسماء جديدة غير موجودة في الملف المرجعي:
                1. أضفها للملف المرجعي مع تعليق واضح
                2. استخدم تنسيق ثابت مثل: `static const String collectionName = 'collection_name';`
                3. رتب الأسماء أبجدياً
                4. أضف تعليقات بالعربية لكل collection
                
                **الخطوة 5: تحديث الكود الحالي**
                استبدل استخدام الأسماء المباشرة بالمراجع من الملف المرجعي.
                
                **مثال:**
                ```dart
                // بدلاً من:
                FirebaseFirestore.instance.collection('users')
                
                // استخدم:
                FirebaseFirestore.instance.collection(FirebaseCollections.users)
                ```
          create_firebase_reference_file:
            - action: ai_command
              command: >
                📝 **إنشاء ملف Firebase مرجعي جديد**
                
                أنشئ ملف `lib/XXX/XXXFirebase.dart` يحتوي على:
                
                1. **كلاس مركزي للـ Collections:**
                ```dart
                class FirebaseCollections {
                  // منع إنشاء instance من الكلاس
                  FirebaseCollections._();
                  
                  // === Collections الأساسية ===
                  static const String users = 'users';
                  static const String items = 'items';
                  static const String orders = 'orders';
                  static const String categories = 'categories';
                  
                  // إضافة الـ Collections المكتشفة
                  {{context.detectedCollections.map(name => `static const String ${name.replace(/[^a-zA-Z0-9]/g, '_')} = '${name}';`).join('\n  ')}}
                }
                ```
                
                2. **توثيق شامل:**
                - تعليقات بالعربية لكل collection
                - شرح الغرض من كل collection
                - أمثلة على الاستخدام
                
                3. **تنظيم حسب التطبيق:**
                ```dart
                // === Collections الخاصة بالبائع ===
                static const String sellerProducts = 'seller_products';
                
                // === Collections الخاصة بالعميل ===
                static const String customerOrders = 'customer_orders';
                ```
          replace_with_references:
            - action: ai_command
              command: >
                🔄 **استبدال الأسماء المباشرة بالمراجع**
                
                1. **ابحث عن جميع استخدامات Firebase في الكود الحالي**
                2. **استبدل الأسماء المباشرة:**
                
                ```dart
                // قبل الاستبدال:
                FirebaseFirestore.instance.collection('users')
                db.collection('items')
                collection('orders')
                
                // بعد الاستبدال:
                FirebaseFirestore.instance.collection(FirebaseCollections.users)
                db.collection(FirebaseCollections.items)
                collection(FirebaseCollections.orders)
                ```
                
                3. **أضف الاستيراد المطلوب:**
                ```dart
                import '../../XXX/XXXFirebase.dart';
                ```
                
                4. **تأكد من عدم وجود أسماء مباشرة متبقية**
          show_existing_collections:
            - action: ai_command
              command: >
                📋 **عرض جميع Collections الموجودة**
                
                1. **ابحث عن الملف المرجعي** `lib/XXX/XXXFirebase.dart`
                2. **استخرج جميع الأسماء الموجودة**
                3. **اعرض قائمة منظمة:**
                
                ```
                📁 Firebase Collections المُعرفة:
                ✅ users - المستخدمين
                ✅ items - المنتجات  
                ✅ orders - الطلبات
                ✅ categories - الفئات
                
                🆕 Collections جديدة مكتشفة:
                {{context.detectedCollections.map(name => `🔸 ${name}`).join('\n')}}
                ```
                
                4. **اقتراح الإضافة إذا لزم الأمر**
          skip_firebase_check:
            - action: no_op
              message: "تم تجاهل فحص Firebase Collections. يُنصح بمراجعتها لاحقاً لضمان التنظيم."

  # قاعدة مراقبة أداء التطبيق المتقدمة
  - id: advanced-performance-monitoring
    description: "مراقبة شاملة ومتقدمة لأداء التطبيق مع تحسينات تلقائية"
    context:
      performanceThresholds:
        frameBuildTime: 16.67 # 60 FPS
        memoryUsageMB: 100
        networkTimeoutMS: 5000
        imageLoadTimeMS: 2000
        firestoreQueryTimeMS: 1000
        animationDurationMS: 300
        widgetBuildTimeMS: 5
        scrollPerformanceFPS: 50
      detectedPerformanceIssues: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const issues = [];
          
          // فحص عمليات باهظة التكلفة في build
          if (content.includes('for (') && content.includes('build(')) {
            issues.push('expensive_loop_in_build');
          }
          
          // فحص setState المتكرر
          if ((content.match(/setState/g) || []).length > 3) {
            issues.push('frequent_setstate');
          }
          
          // فحص استعلامات Firebase غير محسنة
          if (content.includes('.collection(') && !content.includes('.limit(')) {
            issues.push('unlimited_firestore_query');
          }
          
          // فحص تحميل صور بدون تحسين
          if (content.includes('Image.network') && !content.includes('cacheWidth')) {
            issues.push('unoptimized_image_loading');
          }
          
          // فحص animations بدون dispose
          if (content.includes('AnimationController') && !content.includes('dispose()')) {
            issues.push('animation_memory_leak');
          }
          
          // فحص استخدام ListView بدون builder
          if (content.includes('ListView(') && content.includes('children:')) {
            issues.push('inefficient_listview');
          }
          
          return issues;
        })()
      appType: >
        (() => {
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          if (filePath.includes('الكود الخاص بتطبيق البائع')) return 'seller';
          if (filePath.includes('الكود الخاص بتطبيق التوصيل')) return 'delivery';
          if (filePath.includes('الكود الخاص بتطبيق العميل')) return 'customer';
          if (filePath.includes('الكود الخاص بتطبيق صاحب التطبيق')) return 'admin';
          return 'shared';
        })()
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('Widget') ||
          edit.content.includes('StatelessWidget') ||
          edit.content.includes('StatefulWidget') ||
          edit.content.includes('build(') ||
          edit.content.includes('FirebaseFirestore') ||
          edit.content.includes('Image.') ||
          edit.content.includes('ListView') ||
          edit.content.includes('GridView') ||
          edit.content.includes('AnimationController') ||
          edit.content.includes('StreamBuilder') ||
          edit.content.includes('FutureBuilder') ||
          edit.content.includes('setState') ||
          edit.content.includes('http.') ||
          edit.content.includes('dio.')
        )
      )
    then:
      - action: prompt
        message: >
          🚀 **مراقب الأداء المتقدم مُفعّل!**
          
          📱 **التطبيق:** {{context.appType}}
          
          🔍 **مشاكل الأداء المكتشفة:**
          {{context.detectedPerformanceIssues.length === 0 ? 
            '✅ لم يتم اكتشاف مشاكل أداء واضحة' : 
            context.detectedPerformanceIssues.map(issue => {
              const issueMessages = {
                'expensive_loop_in_build': '⚠️ حلقة تكرار باهظة في build()',
                'frequent_setstate': '⚠️ استخدام متكرر لـ setState',
                'unlimited_firestore_query': '⚠️ استعلام Firebase بدون limit',
                'unoptimized_image_loading': '⚠️ تحميل صور غير محسن',
                'animation_memory_leak': '⚠️ تسريب ذاكرة في الرسوم المتحركة',
                'inefficient_listview': '⚠️ ListView غير محسن'
              };
              return issueMessages[issue] || `⚠️ ${issue}`;
            }).join('\n')
          }}
          
          🎯 **مستويات المراقبة المتاحة:**
          
          **🔥 المراقبة الشاملة (مستحسن)**
          - مراقبة FPS و Memory Usage
          - تحسين Firebase Queries  
          - تحسين تحميل الصور
          - مراقبة Animations و Scrolling
          - تحليل Network Performance
          - رصد Battery Usage
          
          **⚡ المراقبة السريعة**
          - فحص المشاكل الواضحة فقط
          - إصلاح سريع للأداء
          
          **📊 التحليل فقط**
          - تقرير مفصل بدون تعديل
          
          ماذا تختار؟
        choices:
          - label: "🔥 المراقبة الشاملة + الإصلاح التلقائي"
            value: "comprehensive_monitoring"
          - label: "⚡ المراقبة السريعة + الإصلاح"
            value: "quick_monitoring"
          - label: "📊 التحليل المفصل فقط"
            value: "analysis_only"
          - label: "🛠️ إعداد نظام مراقبة مخصص"
            value: "custom_monitoring_setup"
          - label: "📈 إنشاء لوحة مراقبة الأداء"
            value: "create_performance_dashboard"
          - label: "⏭️ تجاهل هذه المرة"
            value: "skip_monitoring"
        next_actions:
          comprehensive_monitoring:
            - action: ai_command
              command: >
                🔥 **تفعيل المراقبة الشاملة للأداء**
                
                **المرحلة 1: تحليل الأداء الحالي** 🔍
                
                1. **فحص Widget Performance:**
                   - تحليل build() methods للـ widgets
                   - رصد expensive operations في build()
                   - فحص widget rebuilds غير الضرورية
                   - قياس widget tree depth
                
                2. **فحص Memory Usage:**
                   - رصد memory leaks في Controllers
                   - فحص dispose() methods
                   - تحليل image caching
                   - مراقبة stream subscriptions
                
                3. **فحص Firebase Performance:**
                   - تحليل Firestore queries complexity
                   - فحص missing indexes
                   - رصد unlimited queries
                   - تحسين real-time listeners
                
                4. **فحص Network Performance:**
                   - تحليل HTTP requests timeout
                   - فحص image loading optimization
                   - رصد concurrent requests
                   - تحسين caching strategies
                
                **المرحلة 2: الإصلاحات التلقائية** 🛠️
                
                1. **تحسين Widgets:**
                ```dart
                // إضافة const constructors
                const Widget() instead of Widget()
                
                // استخدام Builder widgets
                Builder(builder: (context) => ...)
                
                // تحسين ListView
                ListView.builder() instead of ListView(children: ...)
                
                // إضافة keys للـ widgets
                Key('unique_key_${item.id}')
                ```
                
                2. **تحسين Firebase:**
                ```dart
                // إضافة limit للاستعلامات
                .limit(20)
                
                // استخدام composite indexes
                .where().orderBy().limit()
                
                // تحسين real-time listeners
                stream.listen().cancel()
                ```
                
                3. **تحسين الصور:**
                ```dart
                // إضافة cache parameters
                Image.network(url, 
                  cacheWidth: 300,
                  cacheHeight: 300,
                  loadingBuilder: ...,
                  errorBuilder: ...
                )
                
                // استخدام CachedNetworkImage
                CachedNetworkImage()
                ```
                
                4. **تحسين Animations:**
                ```dart
                // إضافة dispose methods
                @override
                void dispose() {
                  _animationController.dispose();
                  super.dispose();
                }
                
                // استخدام SingleTickerProvider
                with SingleTickerProviderStateMixin
                ```
                
                **المرحلة 3: إضافة نظام المراقبة** 📊
                
                1. **إنشاء Performance Monitor:**
                ```dart
                class CodoraPerformanceMonitor {
                  static void trackWidgetBuild(String widgetName) {}
                  static void trackFirebaseQuery(String collection) {}
                  static void trackImageLoad(String url) {}
                  static void trackMemoryUsage() {}
                }
                ```
                
                2. **إضافة Performance Overlays:**
                ```dart
                MaterialApp(
                  showPerformanceOverlay: kDebugMode,
                  debugShowCheckedModeBanner: false,
                )
                ```
                
                3. **تكامل مع Firebase Performance:**
                ```dart
                FirebasePerformance.instance
                  .newTrace('{{context.appType}}_screen_load')
                  .start();
                ```
                
                **المرحلة 4: التقرير النهائي** 📈
                سأقوم بإنشاء تقرير شامل يحتوي على:
                - الإصلاحات المطبقة
                - تحسينات الأداء المتوقعة
                - توصيات للمستقبل
                - benchmarks قبل وبعد التحسين
          quick_monitoring:
            - action: ai_command
              command: >
                ⚡ **المراقبة السريعة والإصلاح**
                
                سأركز على المشاكل الأكثر تأثيراً:
                
                **1. إصلاح المشاكل المكتشفة فوراً:**
                {{context.detectedPerformanceIssues.map(issue => {
                  const fixes = {
                    'expensive_loop_in_build': '- نقل الحلقة خارج build() أو استخدام builder pattern',
                    'frequent_setstate': '- استبدال بـ GetX reactive variables (.obs)',
                    'unlimited_firestore_query': '- إضافة .limit(20) للاستعلام',
                    'unoptimized_image_loading': '- إضافة cacheWidth وcacheHeight',
                    'animation_memory_leak': '- إضافة dispose() للـ AnimationController',
                    'inefficient_listview': '- استبدال بـ ListView.builder()'
                  };
                  return fixes[issue] || `- فحص وإصلاح ${issue}`;
                }).join('\n')}}
                
                **2. إضافة تحسينات سريعة:**
                - const constructors للـ widgets الثابتة
                - keys للـ widgets المتحركة  
                - caching للصور والبيانات
                - dispose methods للموارد
                
                **3. فحص سريع للأداء:**
                - قياس build times
                - فحص memory usage أساسي
                - رصد network timeouts
                
                سيستغرق هذا 2-3 دقائق فقط! ⚡
          analysis_only:
            - action: ai_command
              command: >
                📊 **تحليل الأداء المفصل**
                
                سأقوم بإنشاء تقرير شامل يحتوي على:
                
                **📈 تحليل الأداء الحالي:**
                
                1. **Widget Performance Analysis:**
                   - عدد الـ widgets في الشجرة
                   - تعقيد build() methods
                   - معدل rebuilds المتوقع
                   - استخدام الذاكرة للـ widgets
                
                2. **Firebase Performance Analysis:**
                   - عدد الاستعلامات في الصفحة
                   - تعقيد كل استعلام
                   - استخدام الفهارس (indexes)
                   - real-time listeners count
                
                3. **Network Performance Analysis:**
                   - عدد طلبات الشبكة
                   - حجم البيانات المنقولة
                   - استراتيجية التخزين المؤقت
                   - تحميل الصور وتحسينها
                
                4. **Memory Usage Analysis:**
                   - Controllers lifecycle
                   - Stream subscriptions
                   - Image caching strategy
                   - Potential memory leaks
                
                **🎯 التوصيات والحلول:**
                - ترتيب المشاكل حسب الأولوية
                - حلول مقترحة لكل مشكلة
                - تقدير تحسين الأداء لكل حل
                - خطة تنفيذ مرحلية
                
                **📊 المقاييس المتوقعة:**
                - FPS improvement percentage
                - Memory usage reduction
                - Load time improvement
                - Battery usage optimization
                
                لن يتم تعديل أي كود، فقط تحليل وتوصيات.
          custom_monitoring_setup:
            - action: ai_command
              command: >
                🛠️ **إعداد نظام مراقبة أداء مخصص لكودورا**
                
                سأقوم بإنشاء نظام مراقبة متكامل:
                
                **1. إنشاء Performance Monitor Class:**
                ```dart
                class CodoraPerformanceMonitor extends GetxService {
                  static CodoraPerformanceMonitor get instance => Get.find();
                  
                  // مراقبة FPS
                  void trackFPS(String screenName) {}
                  
                  // مراقبة الذاكرة
                  void trackMemoryUsage(String feature) {}
                  
                  // مراقبة Firebase
                  void trackFirebaseQuery(String collection, int resultCount) {}
                  
                  // مراقبة الشبكة
                  void trackNetworkRequest(String endpoint, Duration duration) {}
                  
                  // مراقبة البطارية
                  void trackBatteryImpact(String feature) {}
                }
                ```
                
                **2. إنشاء Performance Dashboard:**
                - شاشة لمراقبة الأداء في real-time
                - رسوم بيانية للاستخدام
                - تنبيهات عند تجاوز الحدود
                - تقارير يومية/أسبوعية
                
                **3. تكامل مع كل تطبيق:**
                - تطبيق البائع: مراقبة إدارة المنتجات
                - تطبيق العميل: مراقبة التصفح والشراء  
                - تطبيق التوصيل: مراقبة الخرائط والتتبع
                - تطبيق الأدمن: مراقبة الإحصائيات والتقارير
                
                **4. إعداد Alerts System:**
                ```dart
                class PerformanceAlerts {
                  static void onSlowWidget(String widgetName, Duration buildTime) {}
                  static void onMemoryLeak(String controllerName) {}
                  static void onSlowFirebaseQuery(String collection, Duration queryTime) {}
                  static void onNetworkTimeout(String endpoint) {}
                }
                ```
                
                **5. Performance Configs:**
                ```dart
                class PerformanceConfig {
                  static const int maxBuildTimeMs = 16; // 60 FPS
                  static const int maxMemoryUsageMB = 100;
                  static const int maxFirebaseQueryTimeMs = 1000;
                  static const int maxNetworkTimeoutMs = 5000;
                }
                ```
          create_performance_dashboard:
            - action: ai_command
              command: >
                📈 **إنشاء لوحة مراقبة الأداء لكودورا**
                
                سأقوم بإنشاء لوحة تحكم شاملة:
                
                **1. Performance Dashboard Screen:**
                ```dart
                class PerformanceDashboardScreen extends StatelessWidget {
                  @override
                  Widget build(BuildContext context) {
                    return Scaffold(
                      appBar: AppBar(title: Text('مراقب الأداء')),
                      body: Column(children: [
                        // Real-time Performance Metrics
                        PerformanceMetricsCard(),
                        
                        // Memory Usage Chart
                        MemoryUsageChart(),
                        
                        // Firebase Performance
                        FirebasePerformanceCard(),
                        
                        // Network Performance  
                        NetworkPerformanceCard(),
                        
                        // App-specific Performance
                        AppSpecificMetrics(appType: '{{context.appType}}'),
                      ]),
                    );
                  }
                }
                ```
                
                **2. Real-time Performance Widgets:**
                - FPS counter مع رسم بياني
                - Memory usage مع تنبيهات
                - Battery usage tracker
                - Network speed monitor
                
                **3. Performance Reports:**
                - تقارير يومية تلقائية
                - إحصائيات أسبوعية
                - مقارنات الأداء بين التطبيقات الأربعة
                - تنبيهات عند تدهور الأداء
                
                **4. Integration مع Firebase Analytics:**
                ```dart
                // تتبع أداء كل تطبيق منفصل
                FirebaseAnalytics.instance.logEvent(
                  name: 'performance_metric',
                  parameters: {
                    'app_type': '{{context.appType}}',
                    'metric_type': 'fps',
                    'metric_value': fpsValue,
                    'screen_name': currentScreen,
                  },
                );
                ```
                
                **5. Performance Alerts:**
                - إشعارات push عند مشاكل الأداء
                - تقارير عبر البريد الإلكتروني
                - تكامل مع Slack/Discord للفريق
          skip_monitoring:
            - action: no_op
              message: "تم تجاهل مراقبة الأداء. يمكنك تفعيلها لاحقاً من خلال إعدادات المشروع."

  # قاعدة إدارة الكاش الذكي المتقدمة
  - id: smart-cache-management
    description: "إدارة ذكية ومتقدمة للتخزين المؤقت لجميع أنواع البيانات"
    context:
      cacheThresholds:
        maxImageCacheSizeMB: 50
        maxDataCacheSizeMB: 20
        maxFirestoreCacheDays: 7
        maxNetworkCacheHours: 24
        maxLocalStorageMB: 100
        compressionQuality: 0.8
      detectedCacheableData: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const cacheableItems = [];
          
          // كشف الصور
          if (content.includes('Image.network') || content.includes('NetworkImage')) {
            cacheableItems.push('network_images');
          }
          
          // كشف طلبات HTTP
          if (content.includes('http.get') || content.includes('dio.get') || content.includes('fetch')) {
            cacheableItems.push('http_requests');
          }
          
          // كشف استعلامات Firebase
          if (content.includes('FirebaseFirestore') && content.includes('.get()')) {
            cacheableItems.push('firestore_queries');
          }
          
          // كشف القوائم الكبيرة
          if (content.includes('ListView') && content.includes('itemCount')) {
            cacheableItems.push('large_lists');
          }
          
          // كشف البيانات المحلية
          if (content.includes('SharedPreferences') || content.includes('Hive') || content.includes('sqflite')) {
            cacheableItems.push('local_storage');
          }
          
          // كشف الملفات
          if (content.includes('File(') || content.includes('Directory(')) {
            cacheableItems.push('file_operations');
          }
          
          return cacheableItems;
        })()
      appType: >
        (() => {
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          if (filePath.includes('الكود الخاص بتطبيق البائع')) return 'seller';
          if (filePath.includes('الكود الخاص بتطبيق التوصيل')) return 'delivery';
          if (filePath.includes('الكود الخاص بتطبيق العميل')) return 'customer';
          if (filePath.includes('الكود الخاص بتطبيق صاحب التطبيق')) return 'admin';
          return 'shared';
        })()
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('Image.network') ||
          edit.content.includes('NetworkImage') ||
          edit.content.includes('http.get') ||
          edit.content.includes('dio.get') ||
          edit.content.includes('FirebaseFirestore') ||
          edit.content.includes('SharedPreferences') ||
          edit.content.includes('File(') ||
          edit.content.includes('ListView') ||
          edit.content.includes('GridView') ||
          edit.content.includes('fetch') ||
          edit.content.includes('Hive') ||
          edit.content.includes('sqflite')
        )
      )
    then:
      - action: prompt
        message: >
          🧠 **نظام إدارة الكاش الذكي مُفعّل!**
          
          📱 **التطبيق:** {{context.appType}}
          
          🔍 **البيانات القابلة للتخزين المؤقت المكتشفة:**
          {{context.detectedCacheableData.length === 0 ? 
            '✅ لم يتم اكتشاف بيانات تحتاج تخزين مؤقت' : 
            context.detectedCacheableData.map(item => {
              const itemMessages = {
                'network_images': '🖼️ صور من الشبكة تحتاج تخزين مؤقت',
                'http_requests': '🌐 طلبات HTTP تحتاج تخزين مؤقت',
                'firestore_queries': '🔥 استعلامات Firebase تحتاج تخزين مؤقت',
                'large_lists': '📝 قوائم كبيرة تحتاج تحسين الذاكرة',
                'local_storage': '💾 بيانات محلية تحتاج تنظيم',
                'file_operations': '📁 عمليات ملفات تحتاج تحسين'
              };
              return itemMessages[item] || `📦 ${item}`;
            }).join('\n')
          }}
          
          🎯 **استراتيجيات الكاش المتاحة:**
          
          **🧠 الكاش الذكي الشامل (مستحسن)**
          - تخزين مؤقت متعدد المستويات
          - ضغط تلقائي للبيانات
          - إدارة ذكية للذاكرة
          - تنظيف تلقائي عند الامتلاء
          
          **⚡ الكاش السريع**
          - تحسينات أساسية فقط
          - تطبيق سريع
          
          **🔧 إعداد كاش مخصص**
          - تخصيص حسب نوع البيانات
          
          ماذا تختار؟
        choices:
          - label: "🧠 الكاش الذكي الشامل + التحسين التلقائي"
            value: "comprehensive_caching"
          - label: "⚡ الكاش السريع والأساسي"
            value: "quick_caching"
          - label: "🔧 إعداد نظام كاش مخصص"
            value: "custom_cache_setup"
          - label: "📊 تحليل استخدام الكاش الحالي"
            value: "analyze_current_cache"
          - label: "🗂️ إنشاء مدير كاش مركزي"
            value: "create_cache_manager"
          - label: "⏭️ تجاهل هذه المرة"
            value: "skip_caching"
        next_actions:
          comprehensive_caching:
            - action: ai_command
              command: >
                🧠 **تفعيل نظام الكاش الذكي الشامل**
                
                **المرحلة 1: تحليل البيانات المكتشفة** 🔍
                
                البيانات المكتشفة: {{context.detectedCacheableData.join(', ')}}
                
                1. **تحليل الصور:**
                   - تحديد حجم وأنواع الصور
                   - اختيار استراتيجية الضغط المناسبة
                   - إعداد مستويات cache (memory, disk, network)
                   - تحديد TTL (Time To Live) لكل نوع
                
                2. **تحليل طلبات HTTP:**
                   - تصنيف الطلبات حسب التكرار
                   - تحديد البيانات المناسبة للتخزين
                   - إعداد headers للتخزين المؤقت
                   - تطبيق ETags و Last-Modified
                
                3. **تحليل بيانات Firebase:**
                   - تحديد الاستعلامات المكررة
                   - إعداد offline persistence
                   - تحسين real-time listeners
                   - تنظيم cache size limits
                
                **المرحلة 2: تطبيق الكاش الذكي** 🛠️
                
                1. **كاش الصور المتقدم:**
                ```dart
                // تطبيق CachedNetworkImage مع تحسينات
                CachedNetworkImage(
                  imageUrl: url,
                  memCacheWidth: 300,
                  memCacheHeight: 300,
                  maxWidthDiskCache: 600,
                  maxHeightDiskCache: 600,
                  cacheManager: CodoraCacheManager.instance,
                  progressIndicatorBuilder: (context, url, progress) => 
                    CustomLoadingIndicator(progress: progress.progress),
                  errorWidget: (context, url, error) => 
                    CachedErrorWidget(url: url),
                )
                ```
                
                2. **كاش HTTP ذكي:**
                ```dart
                class CodoraHttpCache {
                  static final _cache = <String, CacheEntry>{};
                  
                  static Future<http.Response> get(String url, {
                    Duration cacheDuration = const Duration(hours: 1),
                    bool forceRefresh = false,
                  }) async {
                    final cacheKey = _generateCacheKey(url);
                    
                    if (!forceRefresh && _cache.containsKey(cacheKey)) {
                      final entry = _cache[cacheKey]!;
                      if (!entry.isExpired) {
                        return entry.response;
                      }
                    }
                    
                    final response = await http.get(Uri.parse(url));
                    _cache[cacheKey] = CacheEntry(response, cacheDuration);
                    
                    // تنظيف الكاش عند الامتلاء
                    if (_cache.length > 100) {
                      _cleanExpiredEntries();
                    }
                    
                    return response;
                  }
                }
                ```
                
                3. **كاش Firebase محسن:**
                ```dart
                class CodoraFirestoreCache {
                  static final Map<String, FirestoreCacheEntry> _cache = {};
                  
                  static Future<QuerySnapshot> getCachedQuery(
                    Query query, {
                    Duration cacheDuration = const Duration(minutes: 5),
                    bool allowStale = true,
                  }) async {
                    final cacheKey = _generateQueryKey(query);
                    
                    // البحث في الكاش أولاً
                    if (_cache.containsKey(cacheKey)) {
                      final entry = _cache[cacheKey]!;
                      if (!entry.isExpired || allowStale) {
                        return entry.snapshot;
                      }
                    }
                    
                    // جلب من Firebase
                    final snapshot = await query.get();
                    _cache[cacheKey] = FirestoreCacheEntry(snapshot, cacheDuration);
                    
                    return snapshot;
                  }
                }
                ```
                
                **المرحلة 3: إدارة الذاكرة الذكية** 🧠
                
                1. **مراقبة استخدام الذاكرة:**
                ```dart
                class CodoraMemoryManager {
                  static Timer? _memoryCheckTimer;
                  
                  static void startMemoryMonitoring() {
                    _memoryCheckTimer = Timer.periodic(
                      Duration(seconds: 30), 
                      (_) => _checkMemoryUsage()
                    );
                  }
                  
                  static void _checkMemoryUsage() async {
                    final memoryInfo = await _getMemoryInfo();
                    
                    if (memoryInfo.usedMemoryMB > {{context.cacheThresholds.maxImageCacheSizeMB}}) {
                      await _emergencyCacheCleanup();
                    }
                  }
                }
                ```
                
                2. **تنظيف تلقائي:**
                ```dart
                class CodoraCacheCleanup {
                  static Future<void> performCleanup() async {
                    // تنظيف الصور القديمة
                    await _cleanOldImages();
                    
                    // تنظيف بيانات HTTP المنتهية الصلاحية
                    await _cleanExpiredHttpCache();
                    
                    // تنظيف Firestore cache
                    await _cleanFirestoreCache();
                    
                    // ضغط قاعدة البيانات المحلية
                    await _compressLocalDatabase();
                  }
                }
                ```
                
                **المرحلة 4: تحسينات خاصة بكل تطبيق** 🎯
                
                حسب نوع التطبيق ({{context.appType}}):
                
                - البائع: تحسين كاش صور المنتجات والإحصائيات
                - العميل: تحسين كاش التصفح والبحث
                - التوصيل: تحسين كاش الخرائط والمواقع
                - الأدمن: تحسين كاش التقارير والبيانات الكبيرة
                
                **المرحلة 5: إعداد المراقبة والتقارير** 📊
                سأقوم بإنشاء نظام مراقبة شامل لأداء الكاش مع تقارير دورية.
          quick_caching:
            - action: ai_command
              command: >
                ⚡ **تطبيق الكاش السريع**
                
                سأطبق تحسينات أساسية فورية:
                
                **1. إصلاح المشاكل المكتشفة:**
                {{context.detectedCacheableData.map(item => {
                  const fixes = {
                    'network_images': '- استبدال Image.network بـ CachedNetworkImage',
                    'http_requests': '- إضافة كاش بسيط لطلبات HTTP',
                    'firestore_queries': '- تفعيل Firestore offline persistence',
                    'large_lists': '- تحسين ListView مع caching للعناصر',
                    'local_storage': '- تنظيم SharedPreferences مع compression',
                    'file_operations': '- إضافة file caching للملفات المقروءة'
                  };
                  return fixes[item] || `- تحسين ${item}`;
                }).join('\n')}}
                
                **2. إضافة تحسينات أساسية:**
                - Memory caching للبيانات المستخدمة بكثرة
                - Image compression تلقائي
                - HTTP response caching
                - Local storage optimization
                
                **3. إعداد حدود أمان:**
                - حد أقصى للذاكرة: {{context.cacheThresholds.maxImageCacheSizeMB}}MB
                - تنظيف تلقائي عند امتلاء الكاش
                - مراقبة أساسية للأداء
                
                سيستغرق هذا 3-5 دقائق! ⚡
          custom_cache_setup:
            - action: ai_command
              command: >
                🔧 **إعداد نظام كاش مخصص لكودورا**
                
                سأقوم بإنشاء نظام كاش مصمم خصيصاً للتطبيق:
                
                **1. إنشاء CodoraCacheManager:**
                ```dart
                class CodoraCacheManager extends GetxService {
                  static CodoraCacheManager get instance => Get.find();
                  
                  // كاش متعدد المستويات
                  late final MemoryCache _memoryCache;
                  late final DiskCache _diskCache;
                  late final NetworkCache _networkCache;
                  
                  @override
                  void onInit() {
                    super.onInit();
                    _initializeCaches();
                  }
                  
                  // إدارة كاش الصور
                  Future<Widget> getCachedImage(String url) async {}
                  
                  // إدارة كاش البيانات
                  Future<T?> getCachedData<T>(String key) async {}
                  
                  // إدارة كاش Firebase
                  Future<QuerySnapshot> getCachedFirestoreQuery(Query query) async {}
                  
                  // تنظيف ذكي
                  Future<void> performSmartCleanup() async {}
                }
                ```
                
                **2. تخصيص حسب نوع البيانات:**
                - Image Cache: ضغط وتحسين أحجام
                - Data Cache: تشفير للبيانات الحساسة
                - File Cache: إدارة مساحة التخزين
                - Memory Cache: تحسين الوصول السريع
                
                **3. تكامل مع تطبيق {{context.appType}}:**
                سأقوم بتخصيص الكاش حسب احتياجات التطبيق المحدد
                
                **4. إعدادات متقدمة:**
                - Cache warming للبيانات المهمة
                - Preloading ذكي
                - Background cache maintenance
                - Analytics وتتبع الأداء
          analyze_current_cache:
            - action: ai_command
              command: >
                📊 **تحليل استخدام الكاش الحالي**
                
                سأقوم بتحليل شامل للوضع الحالي:
                
                **📈 تحليل الاستخدام الحالي:**
                
                1. **Image Cache Analysis:**
                   - حجم الصور المخزنة حالياً
                   - معدل hit/miss ratio
                   - أنواع الصور الأكثر استخداماً
                   - مقدار المساحة المستخدمة
                
                2. **Data Cache Analysis:**
                   - أنواع البيانات المخزنة
                   - تكرار الوصول للبيانات
                   - حجم البيانات المتراكمة
                   - سرعة الوصول الحالية
                
                3. **Performance Metrics:**
                   - أوقات التحميل المختلفة
                   - استخدام الذاكرة
                   - تأثير على البطارية
                   - معدل فعالية الكاش
                
                **🎯 توصيات التحسين:**
                سأقدم اقتراحات مخصصة بناءً على التحليل:
                - أولويات التحسين
                - مناطق الهدر في الموارد
                - فرص تحسين الأداء
                - خطة تنفيذ مرحلية
                
                **📊 المقاييس المتوقعة:**
                - تحسين السرعة: XX%
                - توفير الذاكرة: XX MB
                - تحسين تجربة المستخدم: XX%
                
                لن يتم تعديل أي كود، فقط تحليل وتوصيات.
          create_cache_manager:
            - action: ai_command
              command: >
                🗂️ **إنشاء مدير كاش مركزي لكودورا**
                
                سأقوم بإنشاء نظام إدارة كاش متكامل:
                
                **1. CodoraCacheManager الرئيسي:**
                ```dart
                class CodoraCacheManager extends GetxService {
                  // إدارة مركزية لجميع أنواع الكاش
                  late final ImageCacheManager imageCacheManager;
                  late final DataCacheManager dataCacheManager;
                  late final FirestoreCacheManager firestoreCacheManager;
                  late final FileCacheManager fileCacheManager;
                  
                  // إحصائيات الكاش
                  CacheStatistics get statistics => _calculateStatistics();
                  
                  // تنظيف شامل
                  Future<void> performGlobalCleanup() async {}
                  
                  // مراقبة الأداء
                  void startPerformanceMonitoring() {}
                }
                ```
                
                **2. مديري كاش متخصصين:**
                - ImageCacheManager: للصور والوسائط
                - DataCacheManager: للبيانات النصية والـ JSON
                - FirestoreCacheManager: لاستعلامات Firebase
                - FileCacheManager: للملفات المحلية
                
                **3. واجهة إدارة الكاش:**
                ```dart
                class CacheManagementScreen extends StatelessWidget {
                  @override
                  Widget build(BuildContext context) {
                    return Scaffold(
                      appBar: AppBar(title: Text('إدارة الكاش')),
                      body: Column(children: [
                        CacheStatisticsCard(),
                        CacheControlsPanel(),
                        CacheDetailsList(),
                        CacheCleanupOptions(),
                      ]),
                    );
                  }
                }
                ```
                
                **4. إعدادات ذكية:**
                - تنظيف تلقائي حسب الاستخدام
                - ضغط البيانات القديمة
                - أولوية الكاش حسب الأهمية
                - مزامنة بين الأجهزة (اختياري)
          skip_caching:
            - action: no_op
              message: "تم تجاهل إدارة الكاش. يمكنك تفعيلها لاحقاً لتحسين أداء التطبيق."

  # قاعدة الأمان المتقدم والحماية الشاملة
  - id: advanced-security-protection
    description: "نظام أمان متقدم وشامل لحماية البيانات والتطبيق من التهديدات"
    context:
      securityThresholds:
        maxPasswordStrength: 8
        apiKeyExposureRisk: "high"
        dataEncryptionLevel: "AES256"
        certificateValidityDays: 30
        suspiciousActivityThreshold: 5
        maxLoginAttempts: 3
        sessionTimeoutMinutes: 30
        twoFactorRequired: true
      detectedSecurityIssues: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const issues = [];
          
          // كشف كلمات المرور المكشوفة
          if (content.match(/password\s*=\s*["'][^"']{1,8}["']/i) || 
              content.match(/pwd\s*=\s*["'][^"']{1,8}["']/i)) {
            issues.push('weak_password_exposed');
          }
          
          // كشف API Keys مكشوفة
          if (content.match(/api[_-]?key\s*=\s*["'][^"']+["']/i) ||
              content.match(/secret\s*=\s*["'][^"']+["']/i) ||
              content.match(/token\s*=\s*["'][^"']+["']/i)) {
            issues.push('api_key_exposed');
          }
          
          // كشف بيانات حساسة غير مشفرة
          if ((content.includes('SharedPreferences') || content.includes('Hive')) &&
              (content.includes('password') || content.includes('creditCard') || 
               content.includes('ssn') || content.includes('phoneNumber'))) {
            issues.push('sensitive_data_unencrypted');
          }
          
          // كشف Firebase Rules غير آمنة
          if (content.includes('allow read, write: if true') ||
              content.includes('allow read, write;')) {
            issues.push('unsafe_firebase_rules');
          }
          
          // كشف HTTP بدلاً من HTTPS
          if (content.includes('http://') && !content.includes('localhost')) {
            issues.push('insecure_http_connection');
          }
          
          // كشف SQL Injection مخاطر
          if (content.includes('rawQuery') && content.includes('$') &&
              !content.includes('?')) {
            issues.push('sql_injection_risk');
          }
          
          // كشف debugging معلومات حساسة
          if (content.includes('print(') && 
              (content.includes('password') || content.includes('token') || 
               content.includes('secret'))) {
            issues.push('sensitive_data_in_logs');
          }
          
          // كشف أذونات خطيرة
          if (content.includes('WRITE_EXTERNAL_STORAGE') ||
              content.includes('CAMERA') ||
              content.includes('RECORD_AUDIO') ||
              content.includes('ACCESS_FINE_LOCATION')) {
            issues.push('dangerous_permissions');
          }
          
          return issues;
        })()
      appType: >
        (() => {
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          if (filePath.includes('الكود الخاص بتطبيق البائع')) return 'seller';
          if (filePath.includes('الكود الخاص بتطبيق التوصيل')) return 'delivery';
          if (filePath.includes('الكود الخاص بتطبيق العميل')) return 'customer';
          if (filePath.includes('الكود الخاص بتطبيق صاحب التطبيق')) return 'admin';
          return 'shared';
        })()
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('password') ||
          edit.content.includes('api') ||
          edit.content.includes('secret') ||
          edit.content.includes('token') ||
          edit.content.includes('SharedPreferences') ||
          edit.content.includes('Hive') ||
          edit.content.includes('FirebaseFirestore') ||
          edit.content.includes('http') ||
          edit.content.includes('https') ||
          edit.content.includes('rawQuery') ||
          edit.content.includes('Permission') ||
          edit.content.includes('Auth') ||
          edit.content.includes('login') ||
          edit.content.includes('encrypt') ||
          edit.content.includes('decrypt') ||
          edit.content.includes('certificate') ||
          edit.content.includes('ssl')
        )
      )
    then:
      - action: prompt
        message: >
          🔒 **نظام الأمان المتقدم مُفعّل!**
          
          📱 **التطبيق:** {{context.appType}}
          
          ⚠️ **التهديدات الأمنية المكتشفة:**
          {{context.detectedSecurityIssues.length === 0 ? 
            '✅ لم يتم اكتشاف تهديدات أمنية واضحة' : 
            context.detectedSecurityIssues.map(issue => {
              const issueMessages = {
                'weak_password_exposed': '🚨 كلمة مرور ضعيفة أو مكشوفة في الكود',
                'api_key_exposed': '🔑 مفاتيح API مكشوفة في الكود',
                'sensitive_data_unencrypted': '💾 بيانات حساسة غير مشفرة',
                'unsafe_firebase_rules': '🔥 قواعد Firebase غير آمنة',
                'insecure_http_connection': '🌐 اتصالات HTTP غير آمنة',
                'sql_injection_risk': '💉 خطر SQL Injection',
                'sensitive_data_in_logs': '📝 بيانات حساسة في السجلات',
                'dangerous_permissions': '⚡ أذونات خطيرة مطلوبة'
              };
              return issueMessages[issue] || `⚠️ ${issue}`;
            }).join('\n')
          }}
          
          🛡️ **مستويات الحماية المتاحة:**
          
          **🔒 الحماية الشاملة (مستحسن بقوة)**
          - تشفير البيانات الحساسة تلقائياً
          - حماية API Keys والمفاتيح
          - فحص Firebase Security Rules
          - مراقبة الأنشطة المشبوهة
          - تطبيق Two-Factor Authentication
          - فحص الثغرات الأمنية
          
          **⚡ الحماية السريعة**
          - إصلاح المشاكل الأمنية الفورية
          - تشفير أساسي للبيانات
          
          **🔍 تحليل الأمان فقط**
          - فحص شامل بدون تعديل الكود
          
          ماذا تختار؟
        choices:
          - label: "🔒 الحماية الشاملة + التشفير التلقائي"
            value: "comprehensive_security"
          - label: "⚡ الحماية السريعة والأساسية"
            value: "quick_security"
          - label: "🔍 تحليل الأمان الشامل"
            value: "security_analysis"
          - label: "🛠️ إعداد نظام أمان مخصص"
            value: "custom_security_setup"
          - label: "🔐 إنشاء مدير أمان مركزي"
            value: "create_security_manager"
          - label: "📋 فحص الامتثال الأمني"
            value: "security_compliance_check"
          - label: "⏭️ تجاهل هذه المرة"
            value: "skip_security"
        next_actions:
          comprehensive_security:
            - action: ai_command
              command: >
                🔒 **تفعيل نظام الحماية الشاملة**
                
                **المرحلة 1: تحليل التهديدات المكتشفة** 🔍
                
                التهديدات المكتشفة: {{context.detectedSecurityIssues.join(', ')}}
                
                1. **فحص البيانات الحساسة:**
                   - تحديد جميع كلمات المرور والمفاتيح
                   - فحص أماكن تخزين البيانات الحساسة
                   - تحليل طرق النقل والمشاركة
                   - تقييم مستوى التشفير الحالي
                
                2. **فحص أمان الشبكة:**
                   - التأكد من استخدام HTTPS حصرياً
                   - فحص شهادات SSL/TLS
                   - تحليل طلبات API للثغرات
                   - فحص headers الأمنية
                
                3. **فحص Firebase Security:**
                   - مراجعة Firestore Security Rules
                   - فحص Firebase Authentication setup
                   - تحليل Storage Rules
                   - فحص Cloud Functions security
                
                **المرحلة 2: تطبيق الحماية التلقائية** 🛠️
                
                1. **تشفير البيانات الحساسة:**
                ```dart
                class CodoraSecurityManager {
                  // تشفير البيانات تلقائياً
                  static Future<String> encryptSensitiveData(String data) async {
                    final key = await _getOrCreateEncryptionKey();
                    final encrypted = await AES.encrypt(data, key);
                    return encrypted.base64;
                  }
                  
                  // حفظ آمن للبيانات الحساسة
                  static Future<void> secureStore(String key, String value) async {
                    final encryptedValue = await encryptSensitiveData(value);
                    await FlutterSecureStorage().write(key: key, value: encryptedValue);
                  }
                  
                  // استرجاع آمن للبيانات
                  static Future<String?> secureGet(String key) async {
                    final encryptedValue = await FlutterSecureStorage().read(key: key);
                    if (encryptedValue != null) {
                      return await decryptSensitiveData(encryptedValue);
                    }
                    return null;
                  }
                }
                ```
                
                2. **حماية API Keys:**
                ```dart
                class CodoraAPISecurityManager {
                  // إخفاء API Keys من الكود
                  static Future<String> getSecureAPIKey(String keyName) async {
                    // استخدام Environment Variables أو Secure Storage
                    return await _loadFromSecureEnvironment(keyName);
                  }
                  
                  // تدوير API Keys تلقائياً
                  static Future<void> rotateAPIKeys() async {
                    final keys = await _getAllAPIKeys();
                    for (final key in keys) {
                      await _rotateKey(key);
                    }
                  }
                  
                  // مراقبة استخدام API Keys
                  static Future<void> monitorAPIUsage(String apiKey) async {
                    final usage = await _trackAPIUsage(apiKey);
                    if (usage.isSuspicious()) {
                      await _alertSecurityTeam(usage);
                    }
                  }
                }
                ```
                
                3. **تأمين Firebase:**
                ```dart
                // Firebase Security Rules محسنة
                rules_version = '2';
                service cloud.firestore {
                  match /databases/{database}/documents {
                    // قواعد آمنة للمستخدمين
                    match /users/{userId} {
                      allow read, write: if request.auth != null 
                        && request.auth.uid == userId
                        && isValidUserData(request.resource.data);
                    }
                    
                    // قواعد آمنة للمنتجات - تطبيق {{context.appType}}
                    match /products/{productId} {
                      allow read: if request.auth != null;
                      allow write: if request.auth != null 
                        && hasRole('seller') || hasRole('admin')
                        && isValidProductData(request.resource.data);
                    }
                    
                    // functions للتحقق من صحة البيانات
                    function isValidUserData(data) {
                      return data.keys().hasAll(['name', 'email', 'role'])
                        && data.name is string
                        && data.email.matches('.*@.*\\..*')
                        && data.role in ['customer', 'seller', 'delivery', 'admin'];
                    }
                  }
                }
                ```
                
                4. **مصادقة ثنائية العامل:**
                ```dart
                class CodoraTwoFactorAuth {
                  // إعداد 2FA
                  static Future<String> setupTwoFactor(String userId) async {
                    final secret = _generateTOTPSecret();
                    await _saveTwoFactorSecret(userId, secret);
                    return _generateQRCode(secret);
                  }
                  
                  // التحقق من 2FA
                  static Future<bool> verifyTwoFactor(String userId, String code) async {
                    final secret = await _getTwoFactorSecret(userId);
                    return _verifyTOTPCode(secret, code);
                  }
                  
                  // إجبار 2FA للعمليات الحساسة
                  static Future<bool> requireTwoFactorForOperation(String operation) async {
                    final sensitiveOperations = ['delete_account', 'change_password', 'transfer_money'];
                    return sensitiveOperations.contains(operation);
                  }
                }
                ```
                
                **المرحلة 3: مراقبة الأمان المستمرة** 🔍
                
                1. **نظام مراقبة الأنشطة:**
                ```dart
                class CodoraSecurityMonitor {
                  // مراقبة محاولات تسجيل الدخول
                  static Future<void> monitorLoginAttempts(String userId) async {
                    final attempts = await _getRecentLoginAttempts(userId);
                    if (attempts.failed > {{context.securityThresholds.maxLoginAttempts}}) {
                      await _lockAccount(userId);
                      await _notifySecurityTeam('Account locked: $userId');
                    }
                  }
                  
                  // مراقبة الأنشطة المشبوهة
                  static Future<void> detectSuspiciousActivity() async {
                    final activities = await _getRecentActivities();
                    for (final activity in activities) {
                      if (_isSuspicious(activity)) {
                        await _flagSuspiciousActivity(activity);
                      }
                    }
                  }
                  
                  // مراقبة تسريب البيانات
                  static Future<void> monitorDataLeaks() async {
                    final dataFlows = await _trackDataFlows();
                    for (final flow in dataFlows) {
                      if (_isUnauthorizedDataFlow(flow)) {
                        await _alertDataLeak(flow);
                      }
                    }
                  }
                }
                ```
                
                **المرحلة 4: اختبار الاختراق التلقائي** 🧪
                
                سأقوم بإجراء اختبارات أمنية شاملة:
                - فحص SQL Injection
                - فحص XSS vulnerabilities  
                - فحص CSRF attacks
                - فحص أمان API endpoints
                - فحص تسريب البيانات
                
                **المرحلة 5: تقرير الأمان الشامل** 📊
                سأقوم بإنشاء تقرير مفصل يحتوي على:
                - التهديدات المكتشفة والمعالجة
                - مستوى الأمان الحالي
                - التوصيات المتقدمة
                - خطة الحماية المستقبلية
          quick_security:
            - action: ai_command
              command: >
                ⚡ **الحماية السريعة والأساسية**
                
                سأطبق إصلاحات أمنية فورية:
                
                **1. إصلاح التهديدات المكتشفة:**
                {{context.detectedSecurityIssues.map(issue => {
                  const fixes = {
                    'weak_password_exposed': '- نقل كلمات المرور إلى متغيرات بيئة آمنة',
                    'api_key_exposed': '- إخفاء API Keys في FlutterSecureStorage',
                    'sensitive_data_unencrypted': '- تشفير البيانات الحساسة فوراً',
                    'unsafe_firebase_rules': '- تطبيق قواعد Firebase آمنة',
                    'insecure_http_connection': '- تحويل جميع الاتصالات إلى HTTPS',
                    'sql_injection_risk': '- استخدام Prepared Statements',
                    'sensitive_data_in_logs': '- إزالة البيانات الحساسة من السجلات',
                    'dangerous_permissions': '- مراجعة وتبرير الأذونات الخطيرة'
                  };
                  return fixes[issue] || `- إصلاح ${issue}`;
                }).join('\n')}}
                
                **2. تطبيق الحماية الأساسية:**
                - تشفير أساسي للبيانات الحساسة
                - HTTPS إجباري لجميع الطلبات  
                - تنظيف السجلات من البيانات الحساسة
                - قواعد Firebase أمان أساسية
                
                **3. فحص سريع للثغرات:**
                - فحص كلمات المرور الضعيفة
                - فحص API Keys المكشوفة
                - فحص الأذونات غير الضرورية
                
                سيستغرق هذا 5-7 دقائق! ⚡
          security_analysis:
            - action: ai_command
              command: >
                🔍 **تحليل الأمان الشامل**
                
                سأقوم بفحص أمني شامل بدون تعديل الكود:
                
                **📊 تحليل التهديدات الحالية:**
                
                1. **Data Security Analysis:**
                   - فحص جميع البيانات الحساسة المخزنة
                   - تحليل طرق التشفير المستخدمة
                   - فحص نقاط تسريب البيانات المحتملة
                   - تقييم مستوى حماية البيانات الشخصية
                
                2. **Network Security Analysis:**
                   - فحص جميع الاتصالات الشبكية
                   - تحليل شهادات SSL/TLS
                   - فحص headers الأمنية
                   - تحليل طلبات API للثغرات
                
                3. **Authentication & Authorization Analysis:**
                   - فحص نظام المصادقة الحالي
                   - تحليل صلاحيات المستخدمين
                   - فحص session management
                   - تقييم قوة كلمات المرور
                
                4. **Firebase Security Analysis:**
                   - مراجعة Firestore Security Rules
                   - فحص Firebase Authentication config
                   - تحليل Storage Rules
                   - فحص Cloud Functions security
                
                **🎯 تقرير المخاطر:**
                - ترتيب التهديدات حسب الخطورة
                - تحديد نقاط الضعف الحرجة
                - تقييم تأثير كل تهديد
                - خطة معالجة مرحلية
                
                **📈 مؤشرات الأمان:**
                - Security Score الحالي
                - مقارنة مع المعايير الدولية
                - مستوى الامتثال للمعايير
                - توصيات التحسين
                
                لن يتم تعديل أي كود، فقط تحليل وتقرير شامل.
          custom_security_setup:
            - action: ai_command
              command: >
                🛠️ **إعداد نظام أمان مخصص لكودورا**
                
                سأقوم بإنشاء نظام أمان متكامل:
                
                **1. إنشاء CodoraSecurityManager:**
                ```dart
                class CodoraSecurityManager extends GetxService {
                  static CodoraSecurityManager get instance => Get.find();
                  
                  // مدير التشفير
                  late final CodoraEncryptionManager encryption;
                  
                  // مدير المصادقة
                  late final CodoraAuthManager authentication;
                  
                  // مدير المراقبة الأمنية
                  late final CodoraSecurityMonitor monitor;
                  
                  // مدير الأذونات
                  late final CodoraPermissionManager permissions;
                  
                  @override
                  void onInit() {
                    super.onInit();
                    _initializeSecuritySystems();
                  }
                  
                  // تقييم شامل للأمان
                  Future<SecurityAssessment> performSecurityAssessment() async {}
                  
                  // مراقبة التهديدات المباشرة
                  void startThreatMonitoring() {}
                  
                  // تطبيق سياسات الأمان
                  Future<void> enforceSecurityPolicies() async {}
                }
                ```
                
                **2. نظام التشفير المتقدم:**
                - AES-256 للبيانات الحساسة
                - RSA للمفاتيح العامة/الخاصة
                - HMAC للتحقق من سلامة البيانات
                - Key rotation تلقائي
                
                **3. نظام المصادقة المتعدد:**
                - Multi-factor Authentication
                - Biometric authentication
                - OAuth 2.0 integration
                - Session management متقدم
                
                **4. تكامل مع تطبيق {{context.appType}}:**
                سأقوم بتخصيص الأمان حسب احتياجات التطبيق:
                
                - البائع: حماية معلومات المتجر والمبيعات
                - العميل: حماية البيانات الشخصية والدفع
                - التوصيل: حماية المواقع والمسارات
                - الأدمن: حماية الوصول للنظام والتحكم
          create_security_manager:
            - action: ai_command
              command: >
                🔐 **إنشاء مدير أمان مركزي لكودورا**
                
                سأقوم بإنشاء نظام إدارة أمان شامل:
                
                **1. CodoraSecurityCenter الرئيسي:**
                ```dart
                class CodoraSecurityCenter extends GetxService {
                  // لوحة تحكم الأمان المركزية
                  late final SecurityDashboard dashboard;
                  
                  // مدير التهديدات
                  late final ThreatManager threatManager;
                  
                  // مدير الحوادث الأمنية
                  late final IncidentManager incidentManager;
                  
                  // مدير الامتثال
                  late final ComplianceManager complianceManager;
                  
                  // إحصائيات الأمان
                  SecurityMetrics get metrics => _calculateMetrics();
                  
                  // مراقبة مباشرة
                  void startRealTimeMonitoring() {}
                  
                  // استجابة للحوادث
                  Future<void> respondToIncident(SecurityIncident incident) async {}
                }
                ```
                
                **2. واجهة إدارة الأمان:**
                ```dart
                class SecurityManagementScreen extends StatelessWidget {
                  @override
                  Widget build(BuildContext context) {
                    return Scaffold(
                      appBar: AppBar(title: Text('مركز الأمان')),
                      body: Column(children: [
                        SecurityMetricsCard(),
                        ThreatDetectionPanel(),
                        SecurityIncidentsLog(),
                        ComplianceStatusCard(),
                        SecurityControlsPanel(),
                      ]),
                    );
                  }
                }
                ```
                
                **3. أنظمة الحماية المتخصصة:**
                - DataProtectionSystem: حماية البيانات
                - NetworkSecuritySystem: أمان الشبكة
                - AuthenticationSystem: نظام المصادقة
                - AuditingSystem: نظام المراجعة والتدقيق
                
                **4. Integration مع الأنظمة الخارجية:**
                - تكامل مع Firebase Security
                - تكامل مع Cloud Security APIs
                - تكامل مع Threat Intelligence feeds
                - تكامل مع SIEM systems
          security_compliance_check:
            - action: ai_command
              command: >
                📋 **فحص الامتثال الأمني الشامل**
                
                سأقوم بفحص الامتثال للمعايير الأمنية:
                
                **🏛️ معايير الامتثال المفحوصة:**
                
                1. **GDPR Compliance (EU):**
                   - حماية البيانات الشخصية
                   - حق المستخدم في الحذف
                   - موافقة واضحة على جمع البيانات
                   - إشعار خروقات البيانات
                
                2. **PCI DSS (Payment Security):**
                   - حماية بيانات بطاقات الائتمان
                   - تشفير البيانات المالية
                   - شبكة آمنة للمدفوعات
                   - مراقبة الوصول للبيانات المالية
                
                3. **ISO 27001 Security Standards:**
                   - إدارة أمان المعلومات
                   - تقييم المخاطر
                   - أمان الوصول
                   - استمرارية الأعمال
                
                4. **OWASP Mobile Security:**
                   - Top 10 Mobile Security Risks
                   - فحص الثغرات الشائعة
                   - اختبار الاختراق
                   - أمان التطبيقات المحمولة
                
                **📊 تقرير الامتثال:**
                - نسبة الامتثال لكل معيار
                - النقاط التي تحتاج تحسين
                - خطة تحقيق الامتثال الكامل
                - شهادات الامتثال المطلوبة
                
                **🎯 خطة العمل:**
                - أولويات التحسين
                - الجدول الزمني للتنفيذ
                - الموارد المطلوبة
                - مؤشرات قياس النجاح
          skip_security:
            - action: no_op
              message: "تم تجاهل فحص الأمان. يُنصح بشدة بتطبيق الحماية الأمنية لضمان سلامة التطبيق والبيانات."

  # قاعدة مراجعة الأذونات المتقدمة والشاملة
  - id: advanced-permissions-review
    description: "نظام شامل لمراجعة وإدارة أذونات التطبيق وضمان الأمان والامتثال"
    context:
      permissionCategories:
        dangerous: ["CAMERA", "RECORD_AUDIO", "ACCESS_FINE_LOCATION", "ACCESS_COARSE_LOCATION", "READ_CONTACTS", "WRITE_CONTACTS", "READ_CALENDAR", "WRITE_CALENDAR", "READ_SMS", "SEND_SMS", "CALL_PHONE", "READ_CALL_LOG", "WRITE_CALL_LOG", "READ_PHONE_STATE", "BODY_SENSORS", "READ_EXTERNAL_STORAGE", "WRITE_EXTERNAL_STORAGE"]
        normal: ["INTERNET", "ACCESS_NETWORK_STATE", "ACCESS_WIFI_STATE", "VIBRATE", "WAKE_LOCK", "RECEIVE_BOOT_COMPLETED", "CHANGE_WIFI_STATE", "BLUETOOTH", "BLUETOOTH_ADMIN"]
        signature: ["BIND_DEVICE_ADMIN", "BIND_INPUT_METHOD", "BIND_WALLPAPER", "BIND_VPN_SERVICE"]
        development: ["SET_DEBUG_APP", "READ_LOGS", "DUMP"]
      appSpecificNeeds:
        seller: ["CAMERA", "READ_EXTERNAL_STORAGE", "WRITE_EXTERNAL_STORAGE", "INTERNET", "ACCESS_NETWORK_STATE"]
        customer: ["ACCESS_FINE_LOCATION", "CAMERA", "INTERNET", "ACCESS_NETWORK_STATE", "VIBRATE"]
        delivery: ["ACCESS_FINE_LOCATION", "ACCESS_COARSE_LOCATION", "CAMERA", "CALL_PHONE", "INTERNET", "ACCESS_NETWORK_STATE", "WAKE_LOCK"]
        admin: ["INTERNET", "ACCESS_NETWORK_STATE", "WRITE_EXTERNAL_STORAGE", "READ_EXTERNAL_STORAGE"]
      detectedPermissions: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          const permissions = [];
          
          // كشف أذونات Android
          const androidPermissions = content.match(/<uses-permission\s+android:name="([^"]+)"/g) || [];
          androidPermissions.forEach(match => {
            const permission = match.match(/android:name="([^"]+)"/);
            if (permission && permission[1]) {
              permissions.push(permission[1].replace('android.permission.', ''));
            }
          });
          
          // كشف استخدام الأذونات في الكود
          if (content.includes('LocationManager') || content.includes('getCurrentPosition') || content.includes('Geolocator')) {
            permissions.push('LOCATION_USAGE');
          }
          
          if (content.includes('CameraController') || content.includes('ImagePicker') || content.includes('camera')) {
            permissions.push('CAMERA_USAGE');
          }
          
          if (content.includes('AudioRecord') || content.includes('MediaRecorder') || content.includes('record_audio')) {
            permissions.push('AUDIO_USAGE');
          }
          
          if (content.includes('ContactsContract') || content.includes('getContacts') || content.includes('contacts')) {
            permissions.push('CONTACTS_USAGE');
          }
          
          if (content.includes('TelephonyManager') || content.includes('makePhoneCall') || content.includes('phone')) {
            permissions.push('PHONE_USAGE');
          }
          
          if (content.includes('File(') || content.includes('Directory(') || content.includes('external_storage')) {
            permissions.push('STORAGE_USAGE');
          }
          
          if (content.includes('NotificationManager') || content.includes('showNotification')) {
            permissions.push('NOTIFICATION_USAGE');
          }
          
          if (content.includes('BluetoothAdapter') || content.includes('bluetooth')) {
            permissions.push('BLUETOOTH_USAGE');
          }
          
          return [...new Set(permissions)];
        })()
      appType: >
        (() => {
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          if (filePath.includes('الكود الخاص بتطبيق البائع')) return 'seller';
          if (filePath.includes('الكود الخاص بتطبيق التوصيل')) return 'delivery';
          if (filePath.includes('الكود الخاص بتطبيق العميل')) return 'customer';
          if (filePath.includes('الكود الخاص بتطبيق صاحب التطبيق')) return 'admin';
          return 'shared';
        })()
      unnecessaryPermissions: >
        (() => {
          const detected = context.detectedPermissions || [];
          const appType = context.appType || 'shared';
          const needed = context.appSpecificNeeds[appType] || [];
          
          return detected.filter(permission => 
            !needed.includes(permission) && 
            !permission.includes('USAGE') &&
            permission !== 'INTERNET' &&
            permission !== 'ACCESS_NETWORK_STATE'
          );
        })()
      missingJustifications: >
        (() => {
          const detected = context.detectedPermissions || [];
          const dangerous = context.permissionCategories.dangerous || [];
          
          return detected.filter(permission => 
            dangerous.includes(permission) ||
            permission.includes('LOCATION') ||
            permission.includes('CAMERA') ||
            permission.includes('AUDIO') ||
            permission.includes('CONTACTS') ||
            permission.includes('PHONE')
          );
        })()
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('permission') ||
          edit.content.includes('Permission') ||
          edit.content.includes('uses-permission') ||
          edit.content.includes('LocationManager') ||
          edit.content.includes('CameraController') ||
          edit.content.includes('AudioRecord') ||
          edit.content.includes('ContactsContract') ||
          edit.content.includes('TelephonyManager') ||
          edit.content.includes('NotificationManager') ||
          edit.content.includes('BluetoothAdapter') ||
          edit.content.includes('File(') ||
          edit.content.includes('Directory(') ||
          edit.path.includes('AndroidManifest.xml') ||
          edit.path.includes('Info.plist') ||
          edit.path.includes('permissions') ||
          edit.path.includes('permission')
        )
      )
    then:
      - action: prompt
        message: >
          🔐 **نظام مراجعة الأذونات المتقدم مُفعّل!**
          
          📱 **التطبيق:** {{context.appType}}
          
          🔍 **الأذونات المكتشفة:**
          {{context.detectedPermissions.length === 0 ? 
            '✅ لم يتم اكتشاف أذونات جديدة' : 
            context.detectedPermissions.map(permission => `📋 ${permission}`).join('\n')
          }}
          
          ⚠️ **تحليل الأذونات:**
          
          **🚨 أذونات غير ضرورية:**
          {{context.unnecessaryPermissions.length === 0 ? 
            '✅ لا توجد أذونات غير ضرورية' : 
            context.unnecessaryPermissions.map(permission => `❌ ${permission} - غير مطلوب لتطبيق ${context.appType}`).join('\n')
          }}
          
          **📝 أذونات تحتاج تبرير:**
          {{context.missingJustifications.length === 0 ? 
            '✅ جميع الأذونات مبررة' : 
            context.missingJustifications.map(permission => `⚠️ ${permission} - يحتاج تبرير وشرح للمستخدم`).join('\n')
          }}
          
          🎯 **مستويات المراجعة المتاحة:**
          
          **🔍 المراجعة الشاملة (مستحسن)**
          - تحليل جميع الأذونات المطلوبة
          - فحص الضرورة والأمان
          - مراجعة التبريرات للمستخدم
          - تحسين تجربة طلب الأذونات
          - إنشاء نظام إدارة أذونات ذكي
          
          **⚡ المراجعة السريعة**
          - فحص الأذونات الخطيرة فقط
          - إزالة الأذونات غير الضرورية
          
          **📋 تحليل الأذونات فقط**
          - تقرير مفصل بدون تعديل
          
          ماذا تختار؟
        choices:
          - label: "🔍 المراجعة الشاملة + إدارة الأذونات الذكية"
            value: "comprehensive_permissions_review"
          - label: "⚡ المراجعة السريعة للأذونات الخطيرة"
            value: "quick_permissions_review"
          - label: "📋 تحليل مفصل للأذونات الحالية"
            value: "detailed_permissions_analysis"
          - label: "🛠️ إعداد نظام إدارة أذونات مخصص"
            value: "custom_permissions_management"
          - label: "📱 مراجعة أذونات خاصة بالتطبيق"
            value: "app_specific_permissions_review"
          - label: "🏛️ فحص امتثال الأذونات للمعايير"
            value: "permissions_compliance_check"
          - label: "📊 إنشاء لوحة إدارة الأذونات"
            value: "create_permissions_dashboard"
          - label: "⏭️ تجاهل هذه المرة"
            value: "skip_permissions_review"
        next_actions:
          comprehensive_permissions_review:
            - action: ai_command
              command: >
                🔍 **تفعيل المراجعة الشاملة للأذونات**
                
                **المرحلة 1: تحليل الأذونات المكتشفة** 📋
                
                الأذونات المكتشفة: {{context.detectedPermissions.join(', ')}}
                نوع التطبيق: {{context.appType}}
                
                1. **تصنيف الأذونات:**
                   - تحديد الأذونات الخطيرة vs العادية
                   - فحص الضرورة لكل إذن حسب نوع التطبيق
                   - تحليل التأثير على الخصوصية
                   - مراجعة البدائل الأقل تدخلاً
                
                2. **فحص الاستخدام الفعلي:**
                   - التأكد من استخدام الأذونات في الكود
                   - فحص الحالات التي لا تتطلب الإذن
                   - تحليل توقيت طلب الأذونات
                   - مراجعة معالجة رفض الأذونات
                
                3. **تحسين تجربة المستخدم:**
                   - شرح واضح لكل إذن مطلوب
                   - طلب الأذونات في الوقت المناسب
                   - توفير بدائل عند الرفض
                   - احترام خيارات المستخدم
                
                **المرحلة 2: تطبيق نظام إدارة الأذونات الذكي** 🛠️
                
                1. **إنشاء مدير الأذونات المركزي:**
                ```dart
                class CodoraPermissionsManager extends GetxService {
                  static CodoraPermissionsManager get instance => Get.find();
                  
                  // خريطة الأذونات المطلوبة لكل تطبيق
                  static const Map<String, List<Permission>> appPermissions = {
                    'seller': [
                      Permission.camera,
                      Permission.storage,
                      Permission.photos,
                    ],
                    'customer': [
                      Permission.location,
                      Permission.camera,
                      Permission.notification,
                    ],
                    'delivery': [
                      Permission.locationAlways,
                      Permission.camera,
                      Permission.phone,
                      Permission.notification,
                    ],
                    'admin': [
                      Permission.storage,
                      Permission.photos,
                    ],
                  };
                  
                  // طلب إذن مع تبرير مخصص
                  Future<bool> requestPermissionWithJustification(
                    Permission permission,
                    String justification,
                    {String? alternativeAction}
                  ) async {
                    // فحص الإذن الحالي
                    final status = await permission.status;
                    
                    if (status.isGranted) return true;
                    
                    // عرض تبرير مخصص
                    final shouldRequest = await _showPermissionJustification(
                      permission, 
                      justification,
                      alternativeAction
                    );
                    
                    if (!shouldRequest) return false;
                    
                    // طلب الإذن
                    final result = await permission.request();
                    
                    // تسجيل النتيجة
                    await _logPermissionRequest(permission, result);
                    
                    return result.isGranted;
                  }
                  
                  // طلب أذونات متعددة بذكاء
                  Future<Map<Permission, PermissionStatus>> requestMultiplePermissions(
                    List<Permission> permissions,
                    {bool showGroupJustification = true}
                  ) async {
                    final results = <Permission, PermissionStatus>{};
                    
                    if (showGroupJustification) {
                      await _showGroupPermissionJustification(permissions);
                    }
                    
                    for (final permission in permissions) {
                      final justification = _getPermissionJustification(permission);
                      final granted = await requestPermissionWithJustification(
                        permission, 
                        justification
                      );
                      
                      results[permission] = granted 
                        ? PermissionStatus.granted 
                        : PermissionStatus.denied;
                    }
                    
                    return results;
                  }
                  
                  // التحقق من الأذونات الأساسية للتطبيق
                  Future<bool> checkEssentialPermissions() async {
                    final appType = _getCurrentAppType();
                    final requiredPermissions = appPermissions[appType] ?? [];
                    
                    for (final permission in requiredPermissions) {
                      if (await _isEssentialPermission(permission)) {
                        final status = await permission.status;
                        if (!status.isGranted) {
                          await _handleMissingEssentialPermission(permission);
                          return false;
                        }
                      }
                    }
                    
                    return true;
                  }
                }
                ```
                
                2. **نظام تبرير الأذونات الذكي:**
                ```dart
                class PermissionJustificationSystem {
                  // تبريرات مخصصة لكل إذن
                  static const Map<Permission, PermissionJustification> justifications = {
                    Permission.camera: PermissionJustification(
                      title: 'إذن الكاميرا',
                      description: 'نحتاج الوصول للكاميرا لتصوير المنتجات وإضافتها للمتجر',
                      benefits: [
                        'تصوير منتجات عالية الجودة',
                        'مسح الباركود بسهولة',
                        'التقاط صور المستندات'
                      ],
                      alternatives: 'يمكنك اختيار الصور من المعرض بدلاً من ذلك',
                      icon: Icons.camera_alt,
                      isEssential: false,
                    ),
                    
                    Permission.location: PermissionJustification(
                      title: 'إذن الموقع',
                      description: 'نحتاج موقعك لعرض المتاجر والمطاعم القريبة منك',
                      benefits: [
                        'عرض المتاجر القريبة',
                        'تقدير وقت التوصيل بدقة',
                        'تتبع حالة الطلب'
                      ],
                      alternatives: 'يمكنك إدخال العنوان يدوياً',
                      icon: Icons.location_on,
                      isEssential: true,
                    ),
                    
                    Permission.phone: PermissionJustification(
                      title: 'إذن الهاتف',
                      description: 'للتواصل السريع مع العملاء وخدمة التوصيل',
                      benefits: [
                        'تواصل مباشر مع العملاء',
                        'حل المشاكل بسرعة',
                        'تنسيق التوصيل'
                      ],
                      alternatives: 'يمكنك استخدام الدردشة في التطبيق',
                      icon: Icons.phone,
                      isEssential: false,
                    ),
                  };
                  
                  // عرض تبرير مخصص للإذن
                  static Future<bool> showPermissionJustification(Permission permission) async {
                    final justification = justifications[permission];
                    if (justification == null) return true;
                    
                    return await Get.dialog<bool>(
                      PermissionJustificationDialog(justification: justification),
                      barrierDismissible: false,
                    ) ?? false;
                  }
                }
                
                class PermissionJustificationDialog extends StatelessWidget {
                  final PermissionJustification justification;
                  
                  const PermissionJustificationDialog({
                    Key? key,
                    required this.justification,
                  }) : super(key: key);
                  
                  @override
                  Widget build(BuildContext context) {
                    return AlertDialog(
                      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(16)),
                      title: Row(
                        children: [
                          Icon(justification.icon, color: Colors.blue),
                          SizedBox(width: 8),
                          Text(justification.title, style: TextStyle(fontSize: 18)),
                        ],
                      ),
                      content: SingleChildScrollView(
                        child: Column(
                          mainAxisSize: MainAxisSize.min,
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            Text(justification.description, style: TextStyle(fontSize: 16)),
                            SizedBox(height: 16),
                            
                            Text('الفوائد:', style: TextStyle(fontWeight: FontWeight.bold)),
                            SizedBox(height: 8),
                            ...justification.benefits.map((benefit) => 
                              Padding(
                                padding: EdgeInsets.only(bottom: 4),
                                child: Row(
                                  children: [
                                    Icon(Icons.check, color: Colors.green, size: 16),
                                    SizedBox(width: 8),
                                    Expanded(child: Text(benefit)),
                                  ],
                                ),
                              )
                            ).toList(),
                            
                            if (justification.alternatives != null) ...[
                              SizedBox(height: 16),
                              Container(
                                padding: EdgeInsets.all(12),
                                decoration: BoxDecoration(
                                  color: Colors.orange[50],
                                  borderRadius: BorderRadius.circular(8),
                                ),
                                child: Row(
                                  children: [
                                    Icon(Icons.info, color: Colors.orange),
                                    SizedBox(width: 8),
                                    Expanded(
                                      child: Text(
                                        justification.alternatives!,
                                        style: TextStyle(color: Colors.orange[800]),
                                      ),
                                    ),
                                  ],
                                ),
                              ),
                            ],
                          ],
                        ),
                      ),
                      actions: [
                        TextButton(
                          onPressed: () => Get.back(result: false),
                          child: Text('لا، شكراً'),
                        ),
                        ElevatedButton(
                          onPressed: () => Get.back(result: true),
                          child: Text('السماح'),
                        ),
                      ],
                    );
                  }
                }
                ```
                
                3. **نظام مراقبة استخدام الأذونات:**
                ```dart
                class PermissionUsageMonitor {
                  // تتبع استخدام الأذونات
                  static Future<void> trackPermissionUsage(
                    Permission permission,
                    String action,
                    {Map<String, dynamic>? metadata}
                  ) async {
                    final usage = PermissionUsage(
                      permission: permission,
                      action: action,
                      timestamp: DateTime.now(),
                      appType: _getCurrentAppType(),
                      metadata: metadata,
                    );
                    
                    await _recordPermissionUsage(usage);
                    
                    // فحص الاستخدام المشبوه
                    if (await _isSuspiciousUsage(usage)) {
                      await _flagSuspiciousPermissionUsage(usage);
                    }
                  }
                  
                  // تحليل أنماط استخدام الأذونات
                  static Future<PermissionUsageReport> analyzeUsagePatterns() async {
                    final usageData = await _getPermissionUsageData();
                    
                    return PermissionUsageReport(
                      totalUsage: usageData.length,
                      mostUsedPermissions: _getMostUsedPermissions(usageData),
                      unusedPermissions: await _getUnusedPermissions(),
                      suspiciousActivity: _getSuspiciousActivity(usageData),
                      recommendations: _generateUsageRecommendations(usageData),
                    );
                  }
                  
                  // تحسين طلب الأذونات بناءً على الاستخدام
                  static Future<void> optimizePermissionRequests() async {
                    final report = await analyzeUsagePatterns();
                    
                    // إزالة الأذونات غير المستخدمة
                    for (final permission in report.unusedPermissions) {
                      await _removeUnusedPermission(permission);
                    }
                    
                    // تحسين توقيت طلب الأذونات
                    await _optimizeRequestTiming(report.mostUsedPermissions);
                  }
                }
                ```
                
                **المرحلة 3: تخصيص الأذونات لكل تطبيق** 📱
                
                سأقوم بإنشاء أنظمة مخصصة لإدارة أذونات كل تطبيق:
                
                1. **تطبيق البائع**: إدارة أذونات الكاميرا والتخزين
                2. **تطبيق العميل**: إدارة أذونات الموقع والإشعارات  
                3. **تطبيق التوصيل**: إدارة أذونات الموقع والهاتف
                4. **تطبيق الأدمن**: إدارة أذونات التخزين والوصول للبيانات
                
                **المرحلة 4: إنشاء لوحة إدارة الأذونات** 📊
                سأقوم بإنشاء واجهة شاملة لمراقبة وإدارة جميع الأذونات
                
                **المرحلة 5: فحص الامتثال للمعايير** 🏛️
                سأقوم بفحص الامتثال لمعايير Google Play وApp Store
          quick_permissions_review:
            - action: ai_command
              command: >
                ⚡ **المراجعة السريعة للأذونات**
                
                سأركز على الأذونات الخطيرة والمشاكل الفورية:
                
                **1. مراجعة الأذونات المكتشفة:**
                {{context.detectedPermissions.map(permission => {
                  const permissionInfo = {
                    'CAMERA': 'كاميرا - خطر متوسط، تحتاج تبرير',
                    'LOCATION': 'موقع - خطر عالي، تحتاج تبرير قوي',
                    'RECORD_AUDIO': 'تسجيل صوت - خطر عالي، تحتاج موافقة صريحة',
                    'READ_CONTACTS': 'قراءة جهات الاتصال - خطر عالي',
                    'WRITE_CONTACTS': 'كتابة جهات الاتصال - خطر عالي',
                    'CALL_PHONE': 'إجراء مكالمات - خطر متوسط، تحتاج تبرير',
                    'READ_SMS': 'قراءة الرسائل - خطر عالي جداً',
                    'SEND_SMS': 'إرسال رسائل - خطر عالي، تكلفة إضافية',
                    'WRITE_EXTERNAL_STORAGE': 'كتابة التخزين - مقبول للتطبيقات',
                    'READ_EXTERNAL_STORAGE': 'قراءة التخزين - مقبول للتطبيقات'
                  };
                  return `📋 ${permission}: ${permissionInfo[permission] || 'إذن عادي'}`;
                }).join('\n')}}
                
                **2. إزالة الأذونات غير الضرورية:**
                {{context.unnecessaryPermissions.length === 0 ? 
                  '✅ لا توجد أذونات غير ضرورية' : 
                  `سأقوم بإزالة: ${context.unnecessaryPermissions.join(', ')}`
                }}
                
                **3. إضافة تبريرات للأذونات الخطيرة:**
                {{context.missingJustifications.length === 0 ? 
                  '✅ جميع الأذونات لها تبرير' : 
                  `سأقوم بإضافة تبريرات لـ: ${context.missingJustifications.join(', ')}`
                }}
                
                **4. تحسينات سريعة:**
                - إضافة طلب أذونات في الوقت المناسب
                - تبريرات واضحة للمستخدم
                - معالجة رفض الأذونات
                - بدائل عند عدم الموافقة
                
                سيستغرق هذا 3-5 دقائق! ⚡
          detailed_permissions_analysis:
            - action: ai_command
              command: >
                📋 **تحليل مفصل للأذونات**
                
                سأقوم بإنشاء تقرير شامل للأذونات بدون تعديل الكود:
                
                **📊 تحليل الأذونات الحالية:**
                
                1. **الأذونات المكتشفة:**
                {{context.detectedPermissions.map(permission => `   - ${permission}`).join('\n')}}
                
                2. **تصنيف الأذونات:**
                   - الأذونات الخطيرة: تحتاج موافقة صريحة
                   - الأذونات العادية: تُمنح تلقائياً
                   - الأذونات المخصصة: خاصة بالتطبيق
                
                3. **تحليل الضرورة لتطبيق {{context.appType}}:**
                   - الأذونات الأساسية المطلوبة
                   - الأذونات الاختيارية المفيدة
                   - الأذونات غير الضرورية
                
                4. **تقييم المخاطر:**
                   - مستوى الخصوصية لكل إذن
                   - تأثير على تجربة المستخدم
                   - احتمالية الرفض من المستخدمين
                
                5. **مقارنة مع المعايير:**
                   - مقارنة مع تطبيقات مشابهة
                   - امتثال لمعايير المتاجر
                   - أفضل الممارسات في الصناعة
                
                **🎯 التوصيات:**
                - أولويات التحسين
                - استراتيجية طلب الأذونات
                - تحسين معدل الموافقة
                - بدائل للأذونات المرفوضة
                
                لن يتم تعديل أي كود، فقط تحليل وتقرير شامل.
          custom_permissions_management:
            - action: ai_command
              command: >
                🛠️ **إعداد نظام إدارة أذونات مخصص**
                
                سأقوم بإنشاء نظام إدارة أذونات متكامل لكودورا:
                
                **1. إنشاء CodoraPermissionsManager:**
                ```dart
                class CodoraPermissionsManager extends GetxService {
                  static CodoraPermissionsManager get instance => Get.find();
                  
                  // مدير طلب الأذونات
                  late final PermissionRequestManager requestManager;
                  
                  // مدير تبرير الأذونات
                  late final PermissionJustificationManager justificationManager;
                  
                  // مدير مراقبة الاستخدام
                  late final PermissionUsageMonitor usageMonitor;
                  
                  // مدير الامتثال
                  late final PermissionComplianceManager complianceManager;
                  
                  @override
                  void onInit() {
                    super.onInit();
                    _initializePermissionSystems();
                  }
                  
                  // تقييم حالة الأذونات
                  Future<PermissionAssessment> assessPermissions() async {}
                  
                  // طلب أذونات ذكي
                  Future<bool> requestSmartPermissions(List<Permission> permissions) async {}
                  
                  // إدارة رفض الأذونات
                  Future<void> handlePermissionDenial(Permission permission) async {}
                }
                ```
                
                **2. نظام التصنيف الذكي:**
                - تصنيف الأذونات حسب الأهمية
                - تحديد التوقيت المناسب للطلب
                - إنشاء مسارات بديلة
                
                **3. واجهة إدارة الأذونات:**
                - شاشات تبرير مخصصة
                - رسوم توضيحية للأذونات
                - خيارات مرنة للمستخدم
                
                **4. تكامل مع تطبيق {{context.appType}}:**
                سأقوم بتخصيص إدارة الأذونات حسب احتياجات التطبيق المحدد
          app_specific_permissions_review:
            - action: ai_command
              command: >
                📱 **مراجعة الأذونات الخاصة بتطبيق {{context.appType}}**
                
                سأقوم بمراجعة شاملة للأذونات المناسبة لهذا التطبيق:
                
                **🎯 الأذونات المطلوبة لتطبيق {{context.appType}}:**
                {{(() => {
                  const appPermissions = {
                    seller: [
                      'CAMERA - لتصوير المنتجات',
                      'WRITE_EXTERNAL_STORAGE - لحفظ صور المنتجات',
                      'READ_EXTERNAL_STORAGE - لاختيار صور من المعرض',
                      'INTERNET - للتواصل مع الخادم',
                      'ACCESS_NETWORK_STATE - لفحص حالة الاتصال'
                    ],
                    customer: [
                      'ACCESS_FINE_LOCATION - لعرض المتاجر القريبة',
                      'CAMERA - لمسح الباركود',
                      'VIBRATE - للإشعارات',
                      'INTERNET - للتصفح والطلب',
                      'ACCESS_NETWORK_STATE - لفحص الاتصال',
                      'RECEIVE_BOOT_COMPLETED - للإشعارات'
                    ],
                    delivery: [
                      'ACCESS_FINE_LOCATION - لتتبع الموقع أثناء التوصيل',
                      'ACCESS_COARSE_LOCATION - للموقع التقريبي',
                      'CAMERA - لتصوير إثبات التوصيل',
                      'CALL_PHONE - للاتصال بالعملاء',
                      'VIBRATE - للإشعارات',
                      'WAKE_LOCK - لمنع إطفاء الشاشة أثناء التوصيل',
                      'INTERNET - للتواصل مع النظام'
                    ],
                    admin: [
                      'WRITE_EXTERNAL_STORAGE - لتصدير التقارير',
                      'READ_EXTERNAL_STORAGE - لاستيراد البيانات',
                      'INTERNET - للوصول لنظام الإدارة',
                      'ACCESS_NETWORK_STATE - لفحص الاتصال'
                    ]
                  };
                  return appPermissions[context.appType] || ['INTERNET - الحد الأدنى للاتصال'];
                })().map(permission => `✅ ${permission}`).join('\n')}}
                
                **⚠️ الأذونات الغير مناسبة لهذا التطبيق:**
                سأحدد الأذونات التي لا تناسب طبيعة تطبيق {{context.appType}}
                
                **🔍 تحليل الاستخدام المتوقع:**
                - أنماط استخدام التطبيق
                - احتياجات المستخدمين
                - السيناريوهات الرئيسية
                
                **📝 التوصيات المخصصة:**
                - أولوية طلب الأذونات
                - أفضل التبريرات للمستخدمين
                - البدائل عند الرفض
          permissions_compliance_check:
            - action: ai_command
              command: >
                🏛️ **فحص امتثال الأذونات للمعايير**
                
                سأقوم بفحص امتثال الأذونات للمعايير الدولية:
                
                **📱 معايير Google Play Store:**
                1. **Dangerous Permissions Policy:**
                   - فحص تبرير الأذونات الخطيرة
                   - التأكد من الضرورة الفعلية
                   - مراجعة البدائل الأقل تدخلاً
                
                2. **Privacy Policy Requirements:**
                   - شرح استخدام البيانات الشخصية
                   - توضيح مشاركة البيانات
                   - حقوق المستخدم في التحكم
                
                3. **Target SDK Compliance:**
                   - مراجعة الأذونات المطلوبة للإصدار المستهدف
                   - فحص الأذونات المحذوفة أو المعدلة
                
                **🍎 معايير Apple App Store:**
                1. **Purpose String Requirements:**
                   - وصف واضح لاستخدام كل إذن
                   - تبرير مقنع للمراجعين
                   - ربط الإذن بوظائف التطبيق
                
                2. **Privacy Guidelines:**
                   - طلب الإذن في الوقت المناسب
                   - احترام خيار الرفض
                   - عدم التعطيل عند الرفض
                
                **🌍 معايير GDPR:**
                1. **Data Minimization:**
                   - جمع الحد الأدنى من البيانات
                   - مبدأ الضرورة والتناسب
                
                2. **Consent Management:**
                   - موافقة واضحة ومحددة
                   - إمكانية سحب الموافقة
                
                **📊 تقرير الامتثال:**
                - نسبة الامتثال لكل معيار
                - المشاكل التي تحتاج حل
                - خطة تحقيق الامتثال الكامل
          create_permissions_dashboard:
            - action: ai_command
              command: >
                📊 **إنشاء لوحة إدارة الأذونات**
                
                سأقوم بإنشاء واجهة شاملة لإدارة ومراقبة الأذونات:
                
                **1. PermissionsDashboardScreen الرئيسية:**
                ```dart
                class PermissionsDashboardScreen extends StatefulWidget {
                  @override
                  _PermissionsDashboardScreenState createState() => _PermissionsDashboardScreenState();
                }
                
                class _PermissionsDashboardScreenState extends State<PermissionsDashboardScreen> {
                  @override
                  Widget build(BuildContext context) {
                    return Scaffold(
                      appBar: AppBar(title: Text('إدارة الأذونات')),
                      body: Column(children: [
                        PermissionsOverviewCard(),
                        ActivePermissionsList(),
                        PermissionUsageChart(),
                        ComplianceStatusCard(),
                        PermissionControlsPanel(),
                      ]),
                    );
                  }
                }
                ```
                
                **2. مكونات اللوحة:**
                - نظرة عامة على حالة الأذونات
                - قائمة الأذونات النشطة
                - رسوم بيانية للاستخدام
                - حالة الامتثال للمعايير
                - أدوات التحكم والإدارة
                
                **3. إحصائيات مفصلة:**
                - معدل موافقة المستخدمين
                - الأذونات الأكثر استخداماً
                - أوقات طلب الأذونات
                - تحليل أنماط الرفض
                
                **4. تنبيهات ذكية:**
                - تنبيهات عند انتهاك المعايير
                - إشعارات عند تغيير حالة الأذونات
                - تحذيرات من الاستخدام المشبوه
          skip_permissions_review:
            - action: no_op
              message: "تم تجاهل مراجعة الأذونات. يُنصح بمراجعة الأذونات دورياً لضمان الامتثال والأمان."

  # قاعدة تحسين UX بالذكاء الاصطناعي المتقدمة
  - id: ai-powered-ux-enhancement
    description: "نظام ذكي لتحليل وتحسين تجربة المستخدم باستخدام الذكاء الاصطناعي"
    context:
      uxMetrics:
        userFlowCompletion: 85
        avgSessionDuration: 180
        bounceRate: 25
        userRetention: 70
        featureAdoption: 60
        errorRate: 2
        loadTime: 3
        crashRate: 0.1
      detectedUXIssues: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const issues = [];
          
          // كشف مشاكل التنقل
          if (content.includes('Navigator.push') && !content.includes('Navigator.pop')) {
            issues.push('navigation_stack_buildup');
          }
          
          // كشف مشاكل التحميل
          if (content.includes('CircularProgressIndicator') && !content.includes('timeout')) {
            issues.push('infinite_loading_risk');
          }
          
          // كشف مشاكل الاستجابة
          if (content.includes('SingleChildScrollView') && content.includes('Column') && !content.includes('mainAxisSize')) {
            issues.push('scrolling_performance_issue');
          }
          
          // كشف مشاكل إمكانية الوصول
          if (content.includes('GestureDetector') && !content.includes('Semantics')) {
            issues.push('accessibility_missing');
          }
          
          // كشف مشاكل التصميم التفاعلي
          if (content.includes('Container') && !content.includes('MediaQuery') && content.includes('width:') && content.includes('height:')) {
            issues.push('responsive_design_issue');
          }
          
          // كشف مشاكل التغذية الراجعة
          if (content.includes('onPressed:') && !content.includes('ScaffoldMessenger') && !content.includes('SnackBar')) {
            issues.push('user_feedback_missing');
          }
          
          return issues;
        })()
      appType: >
        (() => {
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          if (filePath.includes('الكود الخاص بتطبيق البائع')) return 'seller';
          if (filePath.includes('الكود الخاص بتطبيق التوصيل')) return 'delivery';
          if (filePath.includes('الكود الخاص بتطبيق العميل')) return 'customer';
          if (filePath.includes('الكود الخاص بتطبيق صاحب التطبيق')) return 'admin';
          return 'shared';
        })()
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('Widget') ||
          edit.content.includes('StatelessWidget') ||
          edit.content.includes('build(') ||
          edit.content.includes('Navigator') ||
          edit.content.includes('Scaffold') ||
          edit.content.includes('ListView') ||
          edit.content.includes('GridView') ||
          edit.content.includes('TextField') ||
          edit.content.includes('Button') ||
          edit.content.includes('GestureDetector') ||
          edit.content.includes('InkWell') ||
          edit.content.includes('onPressed') ||
          edit.content.includes('onTap')
        )
      )
    then:
      - action: prompt
        message: >
          🤖 **نظام تحسين UX بالذكاء الاصطناعي مُفعّل!**
          
          📱 **التطبيق:** {{context.appType}}
          
          🔍 **مشاكل UX المكتشفة:**
          {{context.detectedUXIssues.length === 0 ? 
            '✅ لم يتم اكتشاف مشاكل UX واضحة' : 
            context.detectedUXIssues.map(issue => {
              const issueMessages = {
                'navigation_stack_buildup': '📱 تراكم في مكدس التنقل - قد يؤثر على الذاكرة',
                'infinite_loading_risk': '⏳ خطر التحميل اللانهائي - بدون timeout',
                'scrolling_performance_issue': '📜 مشكلة أداء التمرير - تحسين مطلوب',
                'accessibility_missing': '♿ إمكانية الوصول مفقودة - تحسين مطلوب',
                'responsive_design_issue': '📐 مشكلة التصميم التفاعلي - أحجام ثابتة',
                'user_feedback_missing': '💬 التغذية الراجعة مفقودة - لا توجد رسائل للمستخدم'
              };
              return issueMessages[issue] || `⚠️ ${issue}`;
            }).join('\n')
          }}
          
          🎯 **مستويات التحسين المتاحة:**
          
          **🧠 التحليل الذكي الشامل (مستحسن)**
          - تحليل AI لأنماط الاستخدام
          - تحسين مسارات المستخدم
          - تخصيص التجربة باستخدام ML
          - تحليل سلوك المستخدم
          - تحسين الأداء التفاعلي
          
          **⚡ التحسين السريع**
          - إصلاح المشاكل المكتشفة فوراً
          - تحسينات UX أساسية
          
          **📊 تحليل UX فقط**
          - تقرير مفصل بدون تعديل
          
          ماذا تختار؟
        choices:
          - label: "🧠 التحليل الذكي الشامل + التحسين التلقائي"
            value: "comprehensive_ai_ux_enhancement"
          - label: "⚡ التحسين السريع للمشاكل المكتشفة"
            value: "quick_ux_fixes"
          - label: "📊 تحليل UX مفصل بدون تعديل"
            value: "detailed_ux_analysis"
          - label: "🎨 إنشاء نظام UX ذكي مخصص"
            value: "create_custom_ai_ux_system"
          - label: "📱 تحسين UX خاص بالتطبيق"
            value: "app_specific_ux_optimization"
          - label: "🔬 اختبار A/B تلقائي للواجهات"
            value: "automated_ab_testing"
          - label: "⏭️ تجاهل هذه المرة"
            value: "skip_ux_enhancement"
        next_actions:
          comprehensive_ai_ux_enhancement:
            - action: ai_command
              command: >
                🧠 **تفعيل نظام التحليل الذكي الشامل لـ UX**
                
                **المرحلة 1: تحليل AI للمشاكل المكتشفة** 🔍
                
                المشاكل المكتشفة: {{context.detectedUXIssues.join(', ')}}
                نوع التطبيق: {{context.appType}}
                
                سأقوم بإنشاء نظام ذكي شامل:
                
                **1. إنشاء CodoraAIUXAnalyzer:**
                ```dart
                class CodoraAIUXAnalyzer extends GetxService {
                  static CodoraAIUXAnalyzer get instance => Get.find();
                  
                  // تحليل سلوك المستخدم بالذكاء الاصطناعي
                  Future<UXAnalysisReport> analyzeUserBehavior() async {
                    final behaviorData = await _collectUserBehaviorData();
                    final patterns = await _identifyUsagePatterns(behaviorData);
                    final recommendations = await _generateAIRecommendations(patterns);
                    
                    return UXAnalysisReport(
                      userJourneyAnalysis: await _analyzeUserJourneys(),
                      painPoints: await _identifyPainPoints(),
                      optimizationOpportunities: await _findOptimizationOpportunities(),
                      personalizedRecommendations: recommendations,
                    );
                  }
                  
                  // تحسين تلقائي للواجهات
                  Future<void> autoOptimizeUI() async {
                    final screens = await _getAllScreens();
                    for (final screen in screens) {
                      await _optimizeScreenUX(screen);
                    }
                  }
                  
                  // نظام التعلم المستمر
                  Future<void> continuousLearning() async {
                    final feedbackData = await _collectUserFeedback();
                    await _updateAIModel(feedbackData);
                    await _applyLearnedOptimizations();
                  }
                }
                ```
                
                **2. نظام تتبع سلوك المستخدم الذكي:**
                ```dart
                class SmartUserBehaviorTracker {
                  // تتبع التفاعلات بدقة
                  static Future<void> trackUserInteraction(
                    String screenName,
                    String elementId,
                    InteractionType type,
                    {Map<String, dynamic>? context}
                  ) async {
                    final interaction = UserInteraction(
                      screenName: screenName,
                      elementId: elementId,
                      type: type,
                      timestamp: DateTime.now(),
                      context: context,
                      userState: await _getCurrentUserState(),
                    );
                    
                    await _recordInteraction(interaction);
                    await _analyzeInteractionPattern(interaction);
                  }
                  
                  // كشف الإحباط والصعوبات
                  static Future<void> detectUserFrustration() async {
                    final recentInteractions = await _getRecentInteractions();
                    final frustrationSignals = [
                      'rapid_back_navigation',
                      'repeated_taps',
                      'long_hesitation',
                      'app_backgrounding',
                      'multiple_search_attempts'
                    ];
                    
                    for (final signal in frustrationSignals) {
                      if (await _detectPattern(signal, recentInteractions)) {
                        await _handleFrustrationDetected(signal);
                      }
                    }
                  }
                }
                ```
                
                **3. محرك التخصيص الذكي:**
                ```dart
                class IntelligentPersonalizationEngine {
                  // تخصيص الواجهة حسب سلوك المستخدم
                  static Future<Widget> personalizeWidget(
                    Widget originalWidget,
                    String userId,
                    String context
                  ) async {
                    final userProfile = await _getUserProfile(userId);
                    final preferences = await _getLearnedPreferences(userId);
                    
                    return _applyPersonalization(
                      originalWidget,
                      userProfile,
                      preferences,
                      context
                    );
                  }
                  
                  // تحسين مسارات المستخدم
                  static Future<List<NavigationStep>> optimizeUserJourney(
                    String goalAction,
                    String userId
                  ) async {
                    final userHistory = await _getUserNavigationHistory(userId);
                    final efficientPath = await _calculateOptimalPath(goalAction, userHistory);
                    
                    return efficientPath;
                  }
                }
                ```
                
                **المرحلة 2: تطبيق التحسينات التلقائية** 🛠️
                
                سأقوم بإصلاح جميع المشاكل المكتشفة وإضافة تحسينات ذكية شاملة
          quick_ux_fixes:
            - action: ai_command
              command: >
                ⚡ **التحسين السريع لمشاكل UX**
                
                سأقوم بإصلاح المشاكل المكتشفة فوراً:
                
                **المشاكل المكتشفة وحلولها:**
                {{context.detectedUXIssues.map(issue => {
                  const fixes = {
                    'navigation_stack_buildup': '- إضافة Navigator.pop() المناسب وإدارة المكدس',
                    'infinite_loading_risk': '- إضافة timeout للتحميل مع رسائل خطأ واضحة',
                    'scrolling_performance_issue': '- تحسين SingleChildScrollView وإضافة mainAxisSize',
                    'accessibility_missing': '- إضافة Semantics للعناصر التفاعلية',
                    'responsive_design_issue': '- استخدام MediaQuery للأحجام التفاعلية',
                    'user_feedback_missing': '- إضافة SnackBar ورسائل التأكيد'
                  };
                  return fixes[issue] || `- إصلاح ${issue}`;
                }).join('\n')}}
                
                **تحسينات إضافية سريعة:**
                - تحسين أوقات الاستجابة
                - إضافة مؤشرات التحميل الذكية
                - تحسين التنقل والعودة
                - إضافة رسائل المساعدة
                
                المدة المتوقعة: 5-7 دقائق ⚡
          detailed_ux_analysis:
            - action: ai_command
              command: >
                📊 **تحليل UX مفصل وشامل**
                
                سأقوم بإنشاء تقرير شامل لحالة UX الحالية:
                
                **📈 تحليل المقاييس الحالية:**
                - معدل إكمال رحلة المستخدم: {{context.uxMetrics.userFlowCompletion}}%
                - متوسط مدة الجلسة: {{context.uxMetrics.avgSessionDuration}} ثانية
                - معدل الانتعاش: {{context.uxMetrics.bounceRate}}%
                - معدل الاحتفاظ: {{context.uxMetrics.userRetention}}%
                
                **🔍 تحليل المشاكل المكتشفة:**
                سأقوم بتحليل كل مشكلة مع:
                - تأثيرها على تجربة المستخدم
                - أولوية الإصلاح
                - الحلول المقترحة
                - التحسينات المتوقعة
                
                **📝 توصيات التحسين:**
                - خطة تحسين مرحلية
                - أفضل الممارسات للتطبيق
                - مقارنة مع معايير الصناعة
          create_custom_ai_ux_system:
            - action: ai_command
              command: >
                🎨 **إنشاء نظام UX ذكي مخصص لكودورا**
                
                سأقوم بإنشاء نظام متكامل:
                
                **1. نظام التحليل الذكي:**
                - تحليل سلوك المستخدم في الوقت الفعلي
                - كشف أنماط الاستخدام والتفضيلات
                - تحليل نقاط الإحباط والصعوبة
                
                **2. محرك التخصيص:**
                - واجهات مخصصة لكل مستخدم
                - ترتيب المحتوى حسب الاهتمامات
                - تبسيط المهام الأكثر استخداماً
                
                **3. نظام التحسين المستمر:**
                - A/B Testing تلقائي
                - تحسين مستمر للواجهات
                - تعلم من تفاعلات المستخدمين
          app_specific_ux_optimization:
            - action: ai_command
              command: >
                📱 **تحسين UX خاص بتطبيق {{context.appType}}**
                
                سأقوم بتحسينات مخصصة حسب طبيعة التطبيق:
                
                **تحسينات {{context.appType}}:**
                {{(() => {
                  const optimizations = {
                    seller: [
                      '🏪 تبسيط إضافة المنتجات',
                      '📊 لوحة إحصائيات سهلة الفهم',
                      '💰 تتبع المبيعات المرئي',
                      '📦 إدارة المخزون الذكية'
                    ],
                    customer: [
                      '🛒 تجربة تسوق سلسة',
                      '🔍 بحث ذكي ومرشحات متقدمة',
                      '❤️ قائمة الرغبات التفاعلية',
                      '🚚 تتبع الطلبات المرئي'
                    ],
                    delivery: [
                      '🗺️ خرائط تفاعلية محسنة',
                      '📍 تحديد المواقع الدقيق',
                      '📞 تواصل سريع مع العملاء',
                      '✅ تأكيد التوصيل المرئي'
                    ],
                    admin: [
                      '📈 لوحات تحكم تفاعلية',
                      '📊 تقارير مرئية شاملة',
                      '⚙️ إعدادات سهلة الوصول',
                      '👥 إدارة المستخدمين المبسطة'
                    ]
                  };
                  return optimizations[context.appType] || ['تحسينات عامة للتطبيق'];
                })().map(opt => `✅ ${opt}`).join('\n')}}
          automated_ab_testing:
            - action: ai_command
              command: >
                🔬 **إعداد اختبار A/B تلقائي للواجهات**
                
                سأقوم بإنشاء نظام اختبار تلقائي:
                
                **1. إعداد اختبارات A/B:**
                - اختبار ألوان الأزرار والتأثير على النقرات
                - اختبار مواضع العناصر وسهولة الوصول
                - اختبار نصوص الرسائل والوضوح
                - اختبار تدفق العمليات والكفاءة
                
                **2. تحليل النتائج تلقائياً:**
                - قياس معدلات التحويل
                - تحليل سلوك المستخدم
                - حساب الدلالة الإحصائية
                - تطبيق النسخة الأفضل تلقائياً
                
                **3. تحسين مستمر:**
                - اختبارات جديدة بناءً على النتائج
                - تعلم من تفضيلات المستخدمين
                - تطوير مستمر للواجهات
          skip_ux_enhancement:
            - action: no_op
              message: "تم تجاهل تحسين UX. يمكنك تفعيله لاحقاً لتحسين تجربة المستخدم."

  # قاعدة التحليل الذكي للكود المتقدمة
  - id: intelligent-code-analysis
    description: "نظام ذكي لتحليل جودة الكود وإقتراح تحسينات تلقائية"
    context:
      codeQualityMetrics:
        complexity: 15
        maintainability: 80
        testCoverage: 65
        technicalDebt: 20
        codeSmells: 8
        duplicateCode: 5
        securityIssues: 2
      detectedCodeIssues: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const issues = [];
          
          // كشف الكود المكرر
          if ((content.match(/setState\(/g) || []).length > 3) {
            issues.push('excessive_setstate_usage');
          }
          
          // كشف الطرق الطويلة
          if (content.split('\n').length > 50 && content.includes('build(')) {
            issues.push('long_build_method');
          }
          
          // كشف استعلامات Firebase غير محسنة
          if (content.includes('.collection(') && !content.includes('.limit(') && !content.includes('.where(')) {
            issues.push('unoptimized_firebase_query');
          }
          
          // كشف عدم استخدام const
          if (content.includes('Widget') && content.includes('new ') && !content.includes('const')) {
            issues.push('missing_const_constructors');
          }
          
          // كشف التبعيات الدائرية
          if (content.includes('import') && content.includes('../')) {
            issues.push('potential_circular_dependency');
          }
          
          // كشف عدم معالجة الأخطاء
          if ((content.includes('http.') || content.includes('dio.')) && !content.includes('try') && !content.includes('catch')) {
            issues.push('missing_error_handling');
          }
          
          // كشف المتغيرات غير المستخدمة
          if (content.includes('var ') && content.includes('=') && !content.includes('print(')) {
            issues.push('potential_unused_variables');
          }
          
          // كشف الموارد غير المُحررة
          if (content.includes('Controller') && !content.includes('dispose()')) {
            issues.push('resource_leak_risk');
          }
          
          return issues;
        })()
      appType: >
        (() => {
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          if (filePath.includes('الكود الخاص بتطبيق البائع')) return 'seller';
          if (filePath.includes('الكود الخاص بتطبيق التوصيل')) return 'delivery';
          if (filePath.includes('الكود الخاص بتطبيق العميل')) return 'customer';
          if (filePath.includes('الكود الخاص بتطبيق صاحب التطبيق')) return 'admin';
          return 'shared';
        })()
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('class ') ||
          edit.content.includes('function ') ||
          edit.content.includes('void ') ||
          edit.content.includes('Future') ||
          edit.content.includes('async') ||
          edit.content.includes('await') ||
          edit.content.includes('setState') ||
          edit.content.includes('build(') ||
          edit.content.includes('initState') ||
          edit.content.includes('dispose')
        )
      )
    then:
      - action: prompt
        message: >
          🧠 **محلل الكود الذكي مُفعّل!**
          
          📱 **التطبيق:** {{context.appType}}
          
          🔍 **مشاكل الكود المكتشفة:**
          {{context.detectedCodeIssues.length === 0 ? 
            '✅ لم يتم اكتشاف مشاكل كود واضحة' : 
            context.detectedCodeIssues.map(issue => {
              const issueMessages = {
                'excessive_setstate_usage': '🔄 استخدام مفرط لـ setState - يؤثر على الأداء',
                'long_build_method': '📏 دالة build طويلة جداً - تحتاج تقسيم',
                'unoptimized_firebase_query': '🔥 استعلام Firebase غير محسن - بدون limit/where',
                'missing_const_constructors': '⚡ const constructors مفقودة - تؤثر على الأداء',
                'potential_circular_dependency': '🔄 تبعية دائرية محتملة - بنية غير صحيحة',
                'missing_error_handling': '❌ معالجة الأخطاء مفقودة - مخاطر أمنية',
                'potential_unused_variables': '📝 متغيرات غير مستخدمة محتملة - كود زائد',
                'resource_leak_risk': '💧 خطر تسريب الموارد - Controllers بدون dispose'
              };
              return issueMessages[issue] || `⚠️ ${issue}`;
            }).join('\n')
          }}
          
          📊 **مقاييس جودة الكود الحالية:**
          - التعقيد: {{context.codeQualityMetrics.complexity}}/20
          - القابلية للصيانة: {{context.codeQualityMetrics.maintainability}}%
          - تغطية الاختبار: {{context.codeQualityMetrics.testCoverage}}%
          - الديون التقنية: {{context.codeQualityMetrics.technicalDebt}}%
          
          🎯 **مستويات التحليل المتاحة:**
          
          **🧠 التحليل الذكي الشامل (مستحسن)**
          - تحليل AI لبنية الكود
          - اكتشاف الأنماط المشكوك فيها
          - تحسين الأداء التلقائي
          - إعادة هيكلة ذكية للكود
          - تحليل التبعيات المتقدم
          
          **⚡ التحليل السريع**
          - إصلاح المشاكل المكتشفة فوراً
          - تحسينات أساسية للجودة
          
          **📊 تحليل مفصل فقط**
          - تقرير شامل بدون تعديل
          
          ماذا تختار؟
        choices:
          - label: "🧠 التحليل الذكي الشامل + التحسين التلقائي"
            value: "comprehensive_intelligent_analysis"
          - label: "⚡ التحليل السريع وإصلاح المشاكل"
            value: "quick_code_analysis"
          - label: "📊 تحليل مفصل للكود بدون تعديل"
            value: "detailed_code_analysis"
          - label: "🏗️ إعادة هيكلة الكود الذكية"
            value: "intelligent_code_refactoring"
          - label: "🔍 تحليل الأمان والثغرات"
            value: "security_vulnerability_analysis"
          - label: "📈 تحليل الأداء المتقدم"
            value: "advanced_performance_analysis"
          - label: "🧪 إنشاء اختبارات تلقائية"
            value: "automated_test_generation"
          - label: "⏭️ تجاهل هذه المرة"
            value: "skip_code_analysis"
        next_actions:
          comprehensive_intelligent_analysis:
            - action: ai_command
              command: >
                🧠 **تفعيل التحليل الذكي الشامل للكود**
                
                **المرحلة 1: تحليل AI للمشاكل المكتشفة** 🔍
                
                المشاكل المكتشفة: {{context.detectedCodeIssues.join(', ')}}
                نوع التطبيق: {{context.appType}}
                
                سأقوم بإنشاء نظام تحليل ذكي شامل:
                
                **1. إنشاء CodoraCodeAnalyzer:**
                ```dart
                class CodoraCodeAnalyzer extends GetxService {
                  static CodoraCodeAnalyzer get instance => Get.find();
                  
                  // تحليل جودة الكود بالذكاء الاصطناعي
                  Future<CodeQualityReport> analyzeCodeQuality(String filePath) async {
                    final codeContent = await File(filePath).readAsString();
                    final metrics = await _calculateCodeMetrics(codeContent);
                    final issues = await _identifyCodeIssues(codeContent);
                    final suggestions = await _generateImprovementSuggestions(issues);
                    
                    return CodeQualityReport(
                      complexity: metrics.complexity,
                      maintainability: metrics.maintainability,
                      testability: metrics.testability,
                      issues: issues,
                      suggestions: suggestions,
                      estimatedImprovementTime: _estimateImprovementTime(issues),
                    );
                  }
                  
                  // إعادة هيكلة ذكية للكود
                  Future<RefactoredCode> intelligentRefactoring(String codeContent) async {
                    final analysis = await _deepCodeAnalysis(codeContent);
                    final refactoringPlan = await _createRefactoringPlan(analysis);
                    final refactoredCode = await _applyRefactoring(codeContent, refactoringPlan);
                    
                    return RefactoredCode(
                      originalCode: codeContent,
                      refactoredCode: refactoredCode,
                      improvements: refactoringPlan.improvements,
                      performanceGain: await _calculatePerformanceGain(codeContent, refactoredCode),
                    );
                  }
                  
                  // اكتشاف الأنماط المشكوك فيها
                  Future<List<CodeSmell>> detectCodeSmells(String codeContent) async {
                    final smells = <CodeSmell>[];
                    
                    // God Object Detection
                    if (await _isGodObject(codeContent)) {
                      smells.add(CodeSmell.godObject);
                    }
                    
                    // Long Parameter List
                    if (await _hasLongParameterList(codeContent)) {
                      smells.add(CodeSmell.longParameterList);
                    }
                    
                    // Feature Envy
                    if (await _hasFeatureEnvy(codeContent)) {
                      smells.add(CodeSmell.featureEnvy);
                    }
                    
                    // Duplicate Code
                    if (await _hasDuplicateCode(codeContent)) {
                      smells.add(CodeSmell.duplicateCode);
                    }
                    
                    return smells;
                  }
                }
                ```
                
                **2. محلل الأداء الذكي:**
                ```dart
                class IntelligentPerformanceAnalyzer {
                  // تحليل نقاط الاختناق في الأداء
                  static Future<List<PerformanceBottleneck>> analyzeBottlenecks(String codeContent) async {
                    final bottlenecks = <PerformanceBottleneck>[];
                    
                    // تحليل العمليات المكلفة في build()
                    if (await _hasExpensiveOperationsInBuild(codeContent)) {
                      bottlenecks.add(PerformanceBottleneck(
                        type: 'expensive_build_operations',
                        severity: 'high',
                        impact: 'UI freezing and poor user experience',
                        solution: 'Move expensive operations outside build() or use memoization',
                      ));
                    }
                    
                    // تحليل التحديثات غير الضرورية
                    if (await _hasUnnecessaryRebuilds(codeContent)) {
                      bottlenecks.add(PerformanceBottleneck(
                        type: 'unnecessary_rebuilds',
                        severity: 'medium',
                        impact: 'Increased CPU usage and battery drain',
                        solution: 'Use const constructors and optimize state management',
                      ));
                    }
                    
                    // تحليل استعلامات البيانات غير المحسنة
                    if (await _hasInfficientDataQueries(codeContent)) {
                      bottlenecks.add(PerformanceBottleneck(
                        type: 'inefficient_data_queries',
                        severity: 'high',
                        impact: 'Slow loading times and high data usage',
                        solution: 'Implement pagination, caching, and query optimization',
                      ));
                    }
                    
                    return bottlenecks;
                  }
                  
                  // تحسين الأداء التلقائي
                  static Future<String> autoOptimizePerformance(String codeContent) async {
                    String optimizedCode = codeContent;
                    
                    // إضافة const constructors
                    optimizedCode = await _addConstConstructors(optimizedCode);
                    
                    // تحسين العمليات المكررة
                    optimizedCode = await _optimizeRepeatedOperations(optimizedCode);
                    
                    // تحسين إدارة الذاكرة
                    optimizedCode = await _optimizeMemoryUsage(optimizedCode);
                    
                    // تحسين استعلامات البيانات
                    optimizedCode = await _optimizeDataQueries(optimizedCode);
                    
                    return optimizedCode;
                  }
                }
                ```
                
                **3. مولد الاختبارات التلقائي:**
                ```dart
                class AutomatedTestGenerator {
                  // توليد اختبارات وحدة تلقائياً
                  static Future<String> generateUnitTests(String codeContent, String className) async {
                    final methods = await _extractPublicMethods(codeContent);
                    final testCases = <String>[];
                    
                    for (final method in methods) {
                      final testCase = await _generateMethodTest(method, className);
                      testCases.add(testCase);
                    }
                    
                    return _buildTestFile(className, testCases);
                  }
                  
                  // توليد اختبارات التكامل
                  static Future<String> generateIntegrationTests(String screenClass) async {
                    final userInteractions = await _identifyUserInteractions(screenClass);
                    final testScenarios = <String>[];
                    
                    for (final interaction in userInteractions) {
                      final scenario = await _generateInteractionTest(interaction);
                      testScenarios.add(scenario);
                    }
                    
                    return _buildIntegrationTestFile(screenClass, testScenarios);
                  }
                  
                  // اختبارات الأداء التلقائية
                  static Future<String> generatePerformanceTests(String codeContent) async {
                    final performanceCriticalSections = await _identifyPerformanceCriticalSections(codeContent);
                    final performanceTests = <String>[];
                    
                    for (final section in performanceCriticalSections) {
                      final test = await _generatePerformanceTest(section);
                      performanceTests.add(test);
                    }
                    
                    return _buildPerformanceTestFile(performanceTests);
                  }
                }
                ```
                
                **المرحلة 2: تطبيق التحسينات التلقائية** 🛠️
                
                سأقوم بإصلاح جميع المشاكل المكتشفة وتطبيق التحسينات الذكية
          quick_code_analysis:
            - action: ai_command
              command: >
                ⚡ **التحليل السريع وإصلاح مشاكل الكود**
                
                سأقوم بإصلاح المشاكل المكتشفة فوراً:
                
                **المشاكل المكتشفة وحلولها:**
                {{context.detectedCodeIssues.map(issue => {
                  const fixes = {
                    'excessive_setstate_usage': '- تحويل إلى GetX reactive variables (.obs)',
                    'long_build_method': '- تقسيم build() إلى widgets منفصلة',
                    'unoptimized_firebase_query': '- إضافة .limit() و .where() للاستعلامات',
                    'missing_const_constructors': '- إضافة const للـ constructors الثابتة',
                    'potential_circular_dependency': '- إعادة تنظيم imports وحل التبعيات',
                    'missing_error_handling': '- إضافة try-catch للعمليات الشبكية',
                    'potential_unused_variables': '- حذف المتغيرات غير المستخدمة',
                    'resource_leak_risk': '- إضافة dispose() methods للـ Controllers'
                  };
                  return fixes[issue] || `- إصلاح ${issue}`;
                }).join('\n')}}
                
                **تحسينات إضافية:**
                - تحسين البنية العامة للكود
                - إضافة تعليقات توضيحية
                - تحسين أسماء المتغيرات والدوال
                - تطبيق best practices
                
                المدة المتوقعة: 5-8 دقائق ⚡
          detailed_code_analysis:
            - action: ai_command
              command: >
                📊 **تحليل مفصل للكود**
                
                سأقوم بإنشاء تقرير شامل لجودة الكود:
                
                **📈 مقاييس الجودة الحالية:**
                - التعقيد المعرفي: {{context.codeQualityMetrics.complexity}}/20
                - القابلية للصيانة: {{context.codeQualityMetrics.maintainability}}%
                - تغطية الاختبار: {{context.codeQualityMetrics.testCoverage}}%
                - الديون التقنية: {{context.codeQualityMetrics.technicalDebt}}%
                - رائحة الكود: {{context.codeQualityMetrics.codeSmells}} مشكلة
                - الكود المكرر: {{context.codeQualityMetrics.duplicateCode}}%
                
                **🔍 تحليل المشاكل المكتشفة:**
                سأقوم بتحليل كل مشكلة مع:
                - تأثيرها على الأداء والصيانة
                - أولوية الإصلاح
                - الحلول المقترحة مع أمثلة
                - التحسينات المتوقعة
                
                **📝 توصيات التحسين:**
                - خطة تحسين مرحلية
                - أفضل الممارسات للمشروع
                - مقارنة مع معايير الصناعة
                - استراتيجية تقليل الديون التقنية
          intelligent_code_refactoring:
            - action: ai_command
              command: >
                🏗️ **إعادة هيكلة الكود الذكية**
                
                سأقوم بإعادة هيكلة شاملة للكود:
                
                **1. تحليل البنية الحالية:**
                - فحص العلاقات بين الكلاسات
                - تحديد نقاط التحسين
                - اكتشاف الأنماط المتكررة
                
                **2. إعادة التصميم:**
                - تطبيق Design Patterns المناسبة
                - فصل الاهتمامات (Separation of Concerns)
                - تحسين التبعيات والحقن
                
                **3. تحسين الأداء:**
                - تحسين الخوارزميات
                - تقليل استهلاك الذاكرة
                - تحسين سرعة التنفيذ
          security_vulnerability_analysis:
            - action: ai_command
              command: >
                🔍 **تحليل الأمان والثغرات**
                
                سأقوم بفحص أمني شامل للكود:
                
                **1. فحص الثغرات الأمنية:**
                - SQL Injection vulnerabilities
                - XSS attack vectors
                - Authentication bypasses
                - Data exposure risks
                
                **2. تحليل البيانات الحساسة:**
                - كشف البيانات المكشوفة
                - فحص التشفير والحماية
                - مراجعة صلاحيات الوصول
                
                **3. تقرير الأمان:**
                - مستوى المخاطر لكل ثغرة
                - خطة معالجة الثغرات
                - أفضل الممارسات الأمنية
          advanced_performance_analysis:
            - action: ai_command
              command: >
                📈 **تحليل الأداء المتقدم**
                
                سأقوم بتحليل شامل لأداء الكود:
                
                **1. قياس الأداء:**
                - زمن تنفيذ العمليات
                - استهلاك الذاكرة
                - معدل استجابة UI
                - استهلاك البطارية
                
                **2. اكتشاف نقاط الاختناق:**
                - العمليات البطيئة
                - تسريبات الذاكرة
                - حلقات التكرار المكلفة
                - استعلامات البيانات غير المحسنة
                
                **3. اقتراحات التحسين:**
                - تحسينات فورية
                - تحسينات طويلة المدى
                - بدائل أكثر كفاءة
          automated_test_generation:
            - action: ai_command
              command: >
                🧪 **إنشاء اختبارات تلقائية**
                
                سأقوم بإنشاء مجموعة شاملة من الاختبارات:
                
                **1. اختبارات الوحدة (Unit Tests):**
                - اختبار كل دالة منفصلة
                - اختبار الحالات الحدية
                - اختبار معالجة الأخطاء
                
                **2. اختبارات التكامل (Integration Tests):**
                - اختبار تفاعل المكونات
                - اختبار تدفق البيانات
                - اختبار APIs والشبكة
                
                **3. اختبارات الواجهة (Widget Tests):**
                - اختبار تفاعل المستخدم
                - اختبار التنقل
                - اختبار الحالات المختلفة
                
                **4. اختبارات الأداء:**
                - قياس أوقات الاستجابة
                - اختبار الضغط والحمولة
                - اختبار استهلاك الموارد
          skip_code_analysis:
            - action: no_op
              message: "تم تجاهل تحليل الكود. يمكنك تفعيله لاحقاً لتحسين جودة الكود."

  # قاعدة تحليل استخدام الميزات المتقدمة
  - id: feature-usage-analytics
    description: "نظام ذكي لتحليل استخدام الميزات وتحسين تجربة المستخدم"
    context:
      featureMetrics:
        totalFeatures: 50
        activeFeatures: 35
        unusedFeatures: 8
        underutilizedFeatures: 7
        popularFeatures: 20
        avgUsageRate: 65
        userAdoptionRate: 80
        featureRetentionRate: 70
      detectedFeatures: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const features = [];
          
          // كشف ميزات التنقل والواجهة
          if (content.includes('onPressed') || content.includes('onTap')) {
            features.push('interactive_elements');
          }
          
          // كشف ميزات البحث والفلترة
          if (content.includes('TextField') || content.includes('SearchBar') || content.includes('filter')) {
            features.push('search_and_filter');
          }
          
          // كشف ميزات الإشعارات
          if (content.includes('Notification') || content.includes('Push') || content.includes('showDialog')) {
            features.push('notifications');
          }
          
          // كشف ميزات الشبكة والبيانات
          if (content.includes('http') || content.includes('dio') || content.includes('FirebaseFirestore')) {
            features.push('network_data_features');
          }
          
          // كشف ميزات الوسائط
          if (content.includes('Image') || content.includes('Video') || content.includes('Camera')) {
            features.push('media_features');
          }
          
          // كشف ميزات المصادقة
          if (content.includes('Auth') || content.includes('login') || content.includes('signup')) {
            features.push('authentication_features');
          }
          
          // كشف ميزات الدفع والمال
          if (content.includes('payment') || content.includes('checkout') || content.includes('price')) {
            features.push('payment_features');
          }
          
          // كشف ميزات الخرائط والموقع
          if (content.includes('Map') || content.includes('Location') || content.includes('GPS')) {
            features.push('location_features');
          }
          
          return features;
        })()
      appType: >
        (() => {
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          if (filePath.includes('الكود الخاص بتطبيق البائع')) return 'seller';
          if (filePath.includes('الكود الخاص بتطبيق التوصيل')) return 'delivery';
          if (filePath.includes('الكود الخاص بتطبيق العميل')) return 'customer';
          if (filePath.includes('الكود الخاص بتطبيق صاحب التطبيق')) return 'admin';
          return 'shared';
        })()
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('onPressed') ||
          edit.content.includes('onTap') ||
          edit.content.includes('TextField') ||
          edit.content.includes('Button') ||
          edit.content.includes('Card') ||
          edit.content.includes('ListView') ||
          edit.content.includes('GridView') ||
          edit.content.includes('Navigator') ||
          edit.content.includes('Dialog') ||
          edit.content.includes('BottomSheet') ||
          edit.content.includes('Drawer') ||
          edit.content.includes('TabBar') ||
          edit.content.includes('FloatingActionButton')
        )
      )
    then:
      - action: prompt
        message: >
          📊 **محلل استخدام الميزات مُفعّل!**
          
          📱 **التطبيق:** {{context.appType}}
          
          🔍 **الميزات المكتشفة في الكود الجديد:**
          {{context.detectedFeatures.length === 0 ? 
            '✅ لم يتم اكتشاف ميزات جديدة' : 
            context.detectedFeatures.map(feature => {
              const featureMessages = {
                'interactive_elements': '🎯 عناصر تفاعلية - أزرار ونقرات',
                'search_and_filter': '🔍 البحث والفلترة - تحسين الاكتشاف',
                'notifications': '🔔 الإشعارات - تفاعل المستخدم',
                'network_data_features': '🌐 البيانات الشبكية - معلومات المستخدم',
                'media_features': '📷 الوسائط - صور وفيديو',
                'authentication_features': '🔐 المصادقة - تسجيل الدخول',
                'payment_features': '💰 الدفع - معاملات مالية',
                'location_features': '📍 الموقع - خدمات جغرافية'
              };
              return featureMessages[feature] || `🔧 ${feature}`;
            }).join('\n')
          }}
          
          📈 **إحصائيات الميزات الحالية:**
          - إجمالي الميزات: {{context.featureMetrics.totalFeatures}}
          - الميزات النشطة: {{context.featureMetrics.activeFeatures}}
          - الميزات غير المستخدمة: {{context.featureMetrics.unusedFeatures}}
          - معدل الاستخدام العام: {{context.featureMetrics.avgUsageRate}}%
          - معدل اعتماد المستخدمين: {{context.featureMetrics.userAdoptionRate}}%
          
          🎯 **مستويات التحليل المتاحة:**
          
          **📊 التحليل الشامل للميزات (مستحسن)**
          - تتبع استخدام الميزات في الوقت الفعلي
          - تحليل رحلة المستخدم عبر الميزات
          - اكتشاف الميزات المهملة والمفضلة
          - تحسين ترتيب الميزات حسب الاستخدام
          - إحصائيات مفصلة لكل ميزة
          
          **⚡ التحليل السريع**
          - فحص الميزات الأساسية فقط
          - تقرير مختصر
          
          **📋 تحليل مفصل فقط**
          - تقرير شامل بدون تعديل
          
          ماذا تختار؟
        choices:
          - label: "📊 التحليل الشامل للميزات + التحسين التلقائي"
            value: "comprehensive_feature_analysis"
          - label: "⚡ التحليل السريع للميزات المكتشفة"
            value: "quick_feature_analysis"
          - label: "📋 تحليل مفصل للميزات بدون تعديل"
            value: "detailed_feature_analysis"
          - label: "🎯 تحسين ترتيب الميزات حسب الاستخدام"
            value: "optimize_feature_placement"
          - label: "🔍 اكتشاف الميزات المهملة والمفضلة"
            value: "discover_unused_popular_features"
          - label: "📈 إنشاء لوحة تحليل استخدام الميزات"
            value: "create_feature_analytics_dashboard"
          - label: "🎨 تحسين تجربة الميزات الجديدة"
            value: "enhance_new_feature_experience"
          - label: "⏭️ تجاهل هذه المرة"
            value: "skip_feature_analysis"
        next_actions:
          comprehensive_feature_analysis:
            - action: ai_command
              command: >
                📊 **تفعيل التحليل الشامل للميزات**
                
                **المرحلة 1: تحليل الميزات المكتشفة** 🔍
                
                الميزات المكتشفة: {{context.detectedFeatures.join(', ')}}
                نوع التطبيق: {{context.appType}}
                
                سأقوم بإنشاء نظام تحليل شامل للميزات:
                
                **1. إنشاء CodoraFeatureAnalyzer:**
                ```dart
                class CodoraFeatureAnalyzer extends GetxService {
                  static CodoraFeatureAnalyzer get instance => Get.find();
                  
                  // تتبع استخدام الميزات
                  Future<void> trackFeatureUsage(
                    String featureId,
                    String action,
                    {Map<String, dynamic>? context}
                  ) async {
                    final usage = FeatureUsage(
                      featureId: featureId,
                      action: action,
                      timestamp: DateTime.now(),
                      userId: await _getCurrentUserId(),
                      appType: '{{context.appType}}',
                      context: context,
                      sessionId: await _getCurrentSessionId(),
                    );
                    
                    await _recordFeatureUsage(usage);
                    await _updateFeatureMetrics(featureId);
                    await _analyzeUsagePattern(usage);
                  }
                  
                  // تحليل أداء الميزات
                  Future<FeatureAnalyticsReport> analyzeFeaturePerformance() async {
                    final usageData = await _getFeatureUsageData();
                    final popularFeatures = await _identifyPopularFeatures(usageData);
                    final underutilizedFeatures = await _identifyUnderutilizedFeatures(usageData);
                    final userJourneys = await _analyzeUserJourneyThroughFeatures(usageData);
                    
                    return FeatureAnalyticsReport(
                      totalFeatures: await _countTotalFeatures(),
                      activeFeatures: popularFeatures.length,
                      unusedFeatures: underutilizedFeatures.length,
                      userAdoptionRates: await _calculateAdoptionRates(),
                      featureRetentionRates: await _calculateRetentionRates(),
                      recommendedImprovements: await _generateImprovementRecommendations(),
                    );
                  }
                  
                  // تحسين ترتيب الميزات
                  Future<List<FeaturePlacement>> optimizeFeaturePlacement() async {
                    final usagePatterns = await _getUsagePatterns();
                    final userPreferences = await _getUserPreferences();
                    final accessibilityData = await _getAccessibilityData();
                    
                    return await _calculateOptimalPlacement(
                      usagePatterns,
                      userPreferences,
                      accessibilityData
                    );
                  }
                  
                  // اكتشاف الميزات المفقودة
                  Future<List<MissingFeature>> discoverMissingFeatures() async {
                    final userBehavior = await _analyzeUserBehavior();
                    final competitorFeatures = await _getCompetitorFeatures();
                    final userRequests = await _getUserFeatureRequests();
                    
                    return await _identifyMissingFeatures(
                      userBehavior,
                      competitorFeatures,
                      userRequests
                    );
                  }
                }
                ```
                
                **2. نظام تتبع رحلة المستخدم:**
                ```dart
                class UserJourneyTracker {
                  // تتبع رحلة المستخدم عبر الميزات
                  static Future<void> trackUserJourney(String fromFeature, String toFeature) async {
                    final journey = UserJourneyStep(
                      fromFeature: fromFeature,
                      toFeature: toFeature,
                      timestamp: DateTime.now(),
                      duration: await _calculateStepDuration(),
                      success: await _wasStepSuccessful(),
                    );
                    
                    await _recordJourneyStep(journey);
                    await _analyzeJourneyPattern(journey);
                  }
                  
                  // تحليل مسارات الاستخدام الشائعة
                  static Future<List<CommonPath>> analyzeCommonPaths() async {
                    final journeyData = await _getJourneyData();
                    final paths = await _identifyCommonPaths(journeyData);
                    
                    return paths.map((path) => CommonPath(
                      steps: path.steps,
                      frequency: path.frequency,
                      averageDuration: path.averageDuration,
                      successRate: path.successRate,
                      optimizationSuggestions: _generatePathOptimizations(path),
                    )).toList();
                  }
                  
                  // اكتشاف نقاط الانقطاع في الرحلة
                  static Future<List<DropOffPoint>> identifyDropOffPoints() async {
                    final journeyData = await _getJourneyData();
                    final dropOffs = <DropOffPoint>[];
                    
                    for (final journey in journeyData) {
                      if (await _isDropOffPoint(journey)) {
                        dropOffs.add(DropOffPoint(
                          featureId: journey.fromFeature,
                          dropOffRate: await _calculateDropOffRate(journey),
                          commonReasons: await _identifyDropOffReasons(journey),
                          suggestions: await _generateRetentionSuggestions(journey),
                        ));
                      }
                    }
                    
                    return dropOffs;
                  }
                }
                ```
                
                **3. محرك التوصيات الذكية:**
                ```dart
                class IntelligentFeatureRecommendationEngine {
                  // توصيات مخصصة للمستخدم
                  static Future<List<FeatureRecommendation>> getPersonalizedRecommendations(String userId) async {
                    final userProfile = await _getUserProfile(userId);
                    final usageHistory = await _getUserUsageHistory(userId);
                    final similarUsers = await _findSimilarUsers(userProfile);
                    
                    final recommendations = <FeatureRecommendation>[];
                    
                    // توصيات بناءً على السلوك المشابه
                    final behaviorBasedFeatures = await _getBehaviorBasedRecommendations(
                      usageHistory, 
                      similarUsers
                    );
                    recommendations.addAll(behaviorBasedFeatures);
                    
                    // توصيات بناءً على الوقت والسياق
                    final contextualFeatures = await _getContextualRecommendations(
                      userProfile.currentContext
                    );
                    recommendations.addAll(contextualFeatures);
                    
                    // توصيات بناءً على الأهداف
                    final goalBasedFeatures = await _getGoalBasedRecommendations(
                      userProfile.goals
                    );
                    recommendations.addAll(goalBasedFeatures);
                    
                    return _rankRecommendations(recommendations);
                  }
                  
                  // تحسين ميزات التطبيق حسب النوع
                  static Future<void> optimizeAppTypeFeatures(String appType) async {
                    final appSpecificOptimizations = {
                      'seller': () => _optimizeSellerFeatures(),
                      'customer': () => _optimizeCustomerFeatures(),
                      'delivery': () => _optimizeDeliveryFeatures(),
                      'admin': () => _optimizeAdminFeatures(),
                    };
                    
                    await appSpecificOptimizations[appType]?.call();
                  }
                }
                ```
                
                **المرحلة 2: تطبيق التحسينات التلقائية** 🛠️
                
                سأقوم بتحليل جميع الميزات وتطبيق التحسينات المناسبة لتطبيق {{context.appType}}
          quick_feature_analysis:
            - action: ai_command
              command: >
                ⚡ **التحليل السريع للميزات**
                
                سأقوم بتحليل سريع للميزات المكتشفة:
                
                **الميزات المكتشفة وتحليلها:**
                {{context.detectedFeatures.map(feature => {
                  const analysis = {
                    'interactive_elements': '- عناصر تفاعلية عالية الاستخدام، تحتاج تحسين الاستجابة',
                    'search_and_filter': '- ميزة البحث مهمة جداً، تحتاج تحسين الخوارزميات',
                    'notifications': '- الإشعارات تحتاج تخصيص حسب تفضيلات المستخدم',
                    'network_data_features': '- البيانات الشبكية تحتاج تحسين الكاش والأداء',
                    'media_features': '- الوسائط تحتاج ضغط وتحسين التحميل',
                    'authentication_features': '- المصادقة تحتاج تحسين الأمان والسهولة',
                    'payment_features': '- الدفع يحتاج أقصى مستوى أمان وسهولة',
                    'location_features': '- الموقع يحتاج تحسين دقة وتوفير البطارية'
                  };
                  return analysis[feature] || `- تحليل ${feature}`;
                }).join('\n')}}
                
                **إحصائيات سريعة:**
                - الميزات المكتشفة: {{context.detectedFeatures.length}}
                - التقييم العام: {{context.featureMetrics.avgUsageRate}}%
                - التوصية: تحسين الميزات عالية الاستخدام أولاً
                
                المدة المتوقعة: 3-5 دقائق ⚡
          detailed_feature_analysis:
            - action: ai_command
              command: >
                📋 **تحليل مفصل للميزات**
                
                سأقوم بإنشاء تقرير شامل لاستخدام الميزات:
                
                **📊 تحليل الميزات المكتشفة:**
                {{context.detectedFeatures.map(feature => `📋 ${feature}`).join('\n')}}
                
                **📈 مقاييس الأداء الحالية:**
                - إجمالي الميزات: {{context.featureMetrics.totalFeatures}}
                - الميزات النشطة: {{context.featureMetrics.activeFeatures}}
                - الميزات غير المستخدمة: {{context.featureMetrics.unusedFeatures}}
                - معدل الاستخدام: {{context.featureMetrics.avgUsageRate}}%
                - معدل الاعتماد: {{context.featureMetrics.userAdoptionRate}}%
                - معدل الاحتفاظ: {{context.featureMetrics.featureRetentionRate}}%
                
                **🔍 تحليل عميق لكل ميزة:**
                سأقوم بتحليل:
                - معدل الاستخدام لكل ميزة
                - رحلة المستخدم عبر الميزات
                - نقاط التحسين المحتملة
                - تأثير كل ميزة على تجربة المستخدم
                
                **📝 توصيات التحسين:**
                - أولويات التطوير
                - ميزات جديدة مقترحة
                - تحسينات تجربة المستخدم
                - استراتيجية زيادة الاستخدام
          optimize_feature_placement:
            - action: ai_command
              command: >
                🎯 **تحسين ترتيب الميزات حسب الاستخدام**
                
                سأقوم بتحليل وإعادة ترتيب الميزات:
                
                **1. تحليل أنماط الاستخدام:**
                - الميزات الأكثر استخداماً
                - أوقات الذروة لكل ميزة
                - المسارات الشائعة للمستخدمين
                
                **2. إعادة تصميم التخطيط:**
                - وضع الميزات المهمة في المقدمة
                - تجميع الميزات المترابطة
                - تحسين إمكانية الوصول
                
                **3. تطبيق التحسينات:**
                - إعادة ترتيب القوائم والأزرار
                - تحسين مسارات التنقل
                - إضافة اختصارات للميزات المهمة
          discover_unused_popular_features:
            - action: ai_command
              command: >
                🔍 **اكتشاف الميزات المهملة والمفضلة**
                
                سأقوم بتحليل شامل لاستخدام الميزات:
                
                **1. الميزات المهملة:**
                - تحديد الميزات قليلة الاستخدام
                - تحليل أسباب عدم الاستخدام
                - اقتراح طرق تحسين أو إزالة
                
                **2. الميزات المفضلة:**
                - تحديد الميزات عالية الاستخدام
                - تحليل عوامل النجاح
                - اقتراح تحسينات إضافية
                
                **3. خطة التحسين:**
                - استراتيجية لزيادة استخدام الميزات المهملة
                - خطة لتحسين الميزات المفضلة
                - توصيات لميزات جديدة
          create_feature_analytics_dashboard:
            - action: ai_command
              command: >
                📈 **إنشاء لوحة تحليل استخدام الميزات**
                
                سأقوم بإنشاء لوحة تحكم شاملة:
                
                **1. لوحة المراقبة الرئيسية:**
                ```dart
                class FeatureAnalyticsDashboard extends StatelessWidget {
                  @override
                  Widget build(BuildContext context) {
                    return Scaffold(
                      appBar: AppBar(title: Text('تحليلات الميزات')),
                      body: Column(children: [
                        FeatureOverviewCard(),
                        MostUsedFeaturesChart(),
                        UserJourneyVisualization(),
                        FeatureAdoptionRateChart(),
                        UnusedFeaturesAlert(),
                      ]),
                    );
                  }
                }
                ```
                
                **2. مكونات التحليل:**
                - رسوم بيانية للاستخدام
                - خرائط رحلة المستخدم
                - تنبيهات الميزات المهملة
                - مقارنات زمنية
                
                **3. تقارير تفاعلية:**
                - تصفية حسب الفترة الزمنية
                - تحليل حسب نوع المستخدم
                - مقارنة بين التطبيقات الأربعة
          enhance_new_feature_experience:
            - action: ai_command
              command: >
                🎨 **تحسين تجربة الميزات الجديدة**
                
                سأقوم بتحسين تجربة اكتشاف واستخدام الميزات:
                
                **1. نظام التعريف بالميزات:**
                - شاشات ترحيبية تفاعلية
                - أدلة استخدام مصورة
                - نصائح وإرشادات ذكية
                
                **2. تحسين الاكتشاف:**
                - تمييز الميزات الجديدة
                - اقتراحات ذكية للمستخدم
                - تتبع تفاعل المستخدم مع الميزات
                
                **3. التحسين المستمر:**
                - جمع ردود الأفعال
                - تحليل صعوبات الاستخدام
                - تحديث مستمر للتجربة
          skip_feature_analysis:
            - action: no_op
              message: "تم تجاهل تحليل الميزات. يمكنك تفعيله لاحقاً لتحسين تجربة المستخدم."

  # قاعدة مراقبة حجم التطبيق المتقدمة
  - id: app-size-monitoring
    description: "نظام ذكي لمراقبة وتحسين حجم التطبيق وأدائه"
    context:
      sizeThresholds:
        maxAppSizeMB: 150
        maxSingleFileSizeKB: 500
        maxImageSizeKB: 1024
        maxAssetFolderMB: 50
        maxCodeSizeMB: 80
        warningThresholdMB: 120
        criticalThresholdMB: 140
      detectedSizeIssues: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          const issues = [];
          
          // كشف ملفات كبيرة الحجم
          if (filePath && filePath.length > 100) {
            issues.push('long_file_path');
          }
          
          // كشف أصول كبيرة
          if (filePath && (filePath.includes('assets/') || filePath.includes('images/'))) {
            issues.push('large_asset_files');
          }
          
          // كشف مكتبات غير مستخدمة
          if (content.includes('import ') && !content.includes('class ') && !content.includes('void ')) {
            issues.push('unused_imports');
          }
          
          // كشف كود مكرر
          if ((content.match(/class\s+\w+/g) || []).length > 5) {
            issues.push('multiple_large_classes');
          }
          
          // كشف دوال طويلة
          if (content.split('\n').length > 100) {
            issues.push('very_large_file');
          }
          
          // كشف تبعيات غير ضرورية
          if (content.includes('pubspec.yaml') && content.includes('dependencies:')) {
            issues.push('dependency_review_needed');
          }
          
          // كشف ملفات النصوص الكبيرة
          if (content.length > 10000 && !content.includes('class ')) {
            issues.push('large_text_content');
          }
          
          return issues;
        })()
      appType: >
        (() => {
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          if (filePath.includes('الكود الخاص بتطبيق البائع')) return 'seller';
          if (filePath.includes('الكود الخاص بتطبيق التوصيل')) return 'delivery';
          if (filePath.includes('الكود الخاص بتطبيق العميل')) return 'customer';
          if (filePath.includes('الكود الخاص بتطبيق صاحب التطبيق')) return 'admin';
          return 'shared';
        })()
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.length > 5000 ||
          edit.path.includes('assets/') ||
          edit.path.includes('images/') ||
          edit.path.includes('pubspec.yaml') ||
          edit.content.includes('import ') ||
          edit.content.includes('dependencies:') ||
          edit.content.includes('dev_dependencies:') ||
          edit.content.includes('flutter:') ||
          edit.content.includes('assets:')
        )
      )
    then:
      - action: prompt
        message: >
          📏 **مراقب حجم التطبيق مُفعّل!**
          
          📱 **التطبيق:** {{context.appType}}
          
          ⚠️ **مشاكل الحجم المكتشفة:**
          {{context.detectedSizeIssues.length === 0 ? 
            '✅ لم يتم اكتشاف مشاكل حجم واضحة' : 
            context.detectedSizeIssues.map(issue => {
              const issueMessages = {
                'long_file_path': '📁 مسار ملف طويل جداً - قد يؤثر على الحجم',
                'large_asset_files': '🖼️ ملفات أصول كبيرة - تحتاج ضغط',
                'unused_imports': '📦 استيرادات غير مستخدمة - كود زائد',
                'multiple_large_classes': '🏗️ ملف يحتوي على كلاسات كثيرة - يحتاج تقسيم',
                'very_large_file': '📄 ملف كبير جداً - يحتاج تجزئة',
                'dependency_review_needed': '📚 التبعيات تحتاج مراجعة - قد تكون زائدة',
                'large_text_content': '📝 محتوى نصي كبير - يحتاج تحسين'
              };
              return issueMessages[issue] || `⚠️ ${issue}`;
            }).join('\n')
          }}
          
          📊 **حدود الحجم المعيارية:**
          - الحد الأقصى للتطبيق: {{context.sizeThresholds.maxAppSizeMB}} ميجابايت
          - الحد الأقصى للملف الواحد: {{context.sizeThresholds.maxSingleFileSizeKB}} كيلوبايت  
          - الحد الأقصى للصورة: {{context.sizeThresholds.maxImageSizeKB}} كيلوبايت
          - تحذير عند: {{context.sizeThresholds.warningThresholdMB}} ميجابايت
          - حرج عند: {{context.sizeThresholds.criticalThresholdMB}} ميجابايت
          
          🎯 **مستويات التحسين المتاحة:**
          
          **🔧 التحسين الشامل للحجم (مستحسن)**
          - تحليل شامل لحجم التطبيق
          - ضغط الصور والأصول تلقائياً
          - إزالة التبعيات غير المستخدمة
          - تحسين تقسيم الكود
          - مراقبة الحجم المستمرة
          
          **⚡ التحسين السريع**
          - إصلاح المشاكل المكتشفة فوراً
          - ضغط أساسي للملفات الكبيرة
          
          **📊 تحليل الحجم فقط**
          - تقرير مفصل بدون تعديل
          
          ماذا تختار؟
        choices:
          - label: "🔧 التحسين الشامل للحجم + المراقبة المستمرة"
            value: "comprehensive_size_optimization"
          - label: "⚡ التحسين السريع للمشاكل المكتشفة"
            value: "quick_size_optimization"
          - label: "📊 تحليل مفصل للحجم بدون تعديل"
            value: "detailed_size_analysis"
          - label: "🖼️ ضغط وتحسين الأصول والصور"
            value: "optimize_assets_compression"
          - label: "📦 تحسين التبعيات وإزالة الزائدة"
            value: "optimize_dependencies"
          - label: "📈 إنشاء لوحة مراقبة الحجم"
            value: "create_size_monitoring_dashboard"
          - label: "⚙️ إعداد نظام تنبيهات الحجم"
            value: "setup_size_alerts"
          - label: "⏭️ تجاهل هذه المرة"
            value: "skip_size_monitoring"
        next_actions:
          comprehensive_size_optimization:
            - action: ai_command
              command: >
                🔧 **تفعيل التحسين الشامل للحجم**
                
                **المرحلة 1: تحليل الحجم المكتشف** 📏
                
                المشاكل المكتشفة: {{context.detectedSizeIssues.join(', ')}}
                نوع التطبيق: {{context.appType}}
                
                سأقوم بإنشاء نظام تحسين شامل للحجم:
                
                **1. إنشاء CodoraSizeOptimizer:**
                ```dart
                class CodoraSizeOptimizer extends GetxService {
                  static CodoraSizeOptimizer get instance => Get.find();
                  
                  // تحليل حجم التطبيق الشامل
                  Future<AppSizeReport> analyzeAppSize() async {
                    final codeSize = await _calculateCodeSize();
                    final assetSize = await _calculateAssetSize();
                    final dependencySize = await _calculateDependencySize();
                    final unusedFiles = await _findUnusedFiles();
                    
                    return AppSizeReport(
                      totalSize: codeSize + assetSize + dependencySize,
                      codeSize: codeSize,
                      assetSize: assetSize,
                      dependencySize: dependencySize,
                      unusedFiles: unusedFiles,
                      optimizationOpportunities: await _identifyOptimizationOpportunities(),
                      sizeBreakdown: await _generateSizeBreakdown(),
                    );
                  }
                  
                  // ضغط الأصول تلقائياً
                  Future<void> compressAssets() async {
                    final images = await _getAllImages();
                    for (final image in images) {
                      await _compressImage(image);
                    }
                    
                    final videos = await _getAllVideos();
                    for (final video in videos) {
                      await _compressVideo(video);
                    }
                    
                    final fonts = await _getAllFonts();
                    await _optimizeFonts(fonts);
                  }
                  
                  // تنظيف التبعيات
                  Future<void> cleanUpDependencies() async {
                    final pubspec = await _loadPubspecYaml();
                    final usedDependencies = await _analyzeUsedDependencies();
                    final unusedDependencies = await _findUnusedDependencies(pubspec, usedDependencies);
                    
                    if (unusedDependencies.isNotEmpty) {
                      await _removeDependencies(unusedDependencies);
                      await _updatePubspec();
                    }
                  }
                  
                  // تحسين تقسيم الكود
                  Future<void> optimizeCodeSplitting() async {
                    final largeFiles = await _findLargeFiles();
                    for (final file in largeFiles) {
                      await _splitLargeFile(file);
                    }
                    
                    await _implementLazyLoading();
                    await _optimizeImports();
                  }
                  
                  // مراقبة الحجم المستمرة
                  Future<void> setupSizeMonitoring() async {
                    final monitor = SizeMonitor(
                      thresholds: SizeThresholds(
                        warningSize: {{context.sizeThresholds.warningThresholdMB}},
                        criticalSize: {{context.sizeThresholds.criticalThresholdMB}},
                        maxFileSize: {{context.sizeThresholds.maxSingleFileSizeKB}},
                      ),
                      onWarning: _handleSizeWarning,
                      onCritical: _handleSizeCritical,
                    );
                    
                    await monitor.start();
                  }
                }
                ```
                
                **2. محسن الصور والأصول:**
                ```dart
                class AssetOptimizer {
                  // ضغط الصور بجودة محسنة
                  static Future<void> compressImage(String imagePath) async {
                    final file = File(imagePath);
                    final bytes = await file.readAsBytes();
                    
                    // تحديد نوع الضغط حسب الاستخدام
                    final compressionType = _determineCompressionType(imagePath);
                    final compressedBytes = await _compressImageBytes(bytes, compressionType);
                    
                    if (compressedBytes.length < bytes.length * 0.8) {
                      await file.writeAsBytes(compressedBytes);
                      await _logCompressionResult(imagePath, bytes.length, compressedBytes.length);
                    }
                  }
                  
                  // تحسين الخطوط
                  static Future<void> optimizeFonts() async {
                    final fontFiles = await _getAllFontFiles();
                    final usedFonts = await _analyzeUsedFonts();
                    
                    for (final fontFile in fontFiles) {
                      if (!usedFonts.contains(fontFile.name)) {
                        await _removeFontFile(fontFile);
                      } else {
                        await _subsetFont(fontFile);
                      }
                    }
                  }
                  
                  // إنشاء أصول متجاوبة
                  static Future<void> createResponsiveAssets() async {
                    final images = await _getAllImages();
                    
                    for (final image in images) {
                      await _generateMultipleResolutions(image, [
                        Resolution.ldpi,
                        Resolution.mdpi,
                        Resolution.hdpi,
                        Resolution.xhdpi,
                        Resolution.xxhdpi,
                      ]);
                    }
                  }
                }
                ```
                
                **3. محلل التبعيات الذكي:**
                ```dart
                class DependencyAnalyzer {
                  // تحليل استخدام التبعيات
                  static Future<DependencyReport> analyzeDependencies() async {
                    final pubspec = await _loadPubspecYaml();
                    final dependencies = pubspec.dependencies;
                    final devDependencies = pubspec.devDependencies;
                    
                    final usageReport = <String, DependencyUsage>{};
                    
                    for (final dependency in dependencies.keys) {
                      final usage = await _analyzeDependencyUsage(dependency);
                      usageReport[dependency] = usage;
                    }
                    
                    return DependencyReport(
                      totalDependencies: dependencies.length,
                      usedDependencies: usageReport.values.where((u) => u.isUsed).length,
                      unusedDependencies: usageReport.values.where((u) => !u.isUsed).toList(),
                      heavyDependencies: await _identifyHeavyDependencies(dependencies),
                      recommendations: await _generateDependencyRecommendations(usageReport),
                    );
                  }
                  
                  // اقتراح بدائل أصغر
                  static Future<List<DependencyAlternative>> suggestLighterAlternatives() async {
                    final heavyDependencies = await _getHeavyDependencies();
                    final alternatives = <DependencyAlternative>[];
                    
                    for (final heavy in heavyDependencies) {
                      final lighterOptions = await _findLighterAlternatives(heavy);
                      if (lighterOptions.isNotEmpty) {
                        alternatives.add(DependencyAlternative(
                          original: heavy,
                          alternatives: lighterOptions,
                          potentialSavings: await _calculateSizeSavings(heavy, lighterOptions.first),
                        ));
                      }
                    }
                    
                    return alternatives;
                  }
                }
                ```
                
                **4. نظام مراقبة الحجم المباشر:**
                ```dart
                class RealTimeSizeMonitor {
                  // مراقبة مستمرة للحجم
                  static Future<void> startMonitoring() async {
                    Timer.periodic(Duration(minutes: 5), (timer) async {
                      final currentSize = await _getCurrentAppSize();
                      
                      if (currentSize > {{context.sizeThresholds.warningThresholdMB}}) {
                        await _triggerSizeWarning(currentSize);
                      }
                      
                      if (currentSize > {{context.sizeThresholds.criticalThresholdMB}}) {
                        await _triggerSizeCritical(currentSize);
                      }
                      
                      await _logSizeMetrics(currentSize);
                    });
                  }
                  
                  // تنبيهات ذكية للحجم
                  static Future<void> setupIntelligentAlerts() async {
                    final alertSystem = SizeAlertSystem(
                      rules: [
                        SizeAlert.when((size) => size.codeSize > {{context.sizeThresholds.maxCodeSizeMB}})
                          .notify('كود التطبيق أصبح كبيراً جداً')
                          .suggest('فكر في تقسيم الكود إلى modules'),
                        
                        SizeAlert.when((size) => size.assetSize > {{context.sizeThresholds.maxAssetFolderMB}})
                          .notify('الأصول أصبحت كبيرة جداً')
                          .suggest('قم بضغط الصور والملفات'),
                        
                        SizeAlert.when((size) => size.hasUnusedDependencies())
                          .notify('توجد تبعيات غير مستخدمة')
                          .suggest('قم بإزالة التبعيات غير الضرورية'),
                      ],
                    );
                    
                    await alertSystem.activate();
                  }
                }
                ```
                
                **المرحلة 2: تطبيق التحسينات التلقائية** 🛠️
                
                سأقوم بتحليل وتحسين جميع جوانب الحجم للحصول على أفضل أداء لتطبيق {{context.appType}}
          quick_size_optimization:
            - action: ai_command
              command: >
                ⚡ **التحسين السريع لحجم التطبيق**
                
                سأقوم بإصلاح مشاكل الحجم فوراً:
                
                **المشاكل المكتشفة وحلولها:**
                {{context.detectedSizeIssues.map(issue => {
                  const fixes = {
                    'long_file_path': '- تقصير مسارات الملفات وإعادة تنظيم المجلدات',
                    'large_asset_files': '- ضغط الصور والملفات الكبيرة تلقائياً',
                    'unused_imports': '- إزالة الاستيرادات غير المستخدمة',
                    'multiple_large_classes': '- تقسيم الملف إلى ملفات أصغر',
                    'very_large_file': '- تجزئة الملف الكبير إلى أجزاء منطقية',
                    'dependency_review_needed': '- مراجعة وإزالة التبعيات غير الضرورية',
                    'large_text_content': '- ضغط المحتوى النصي وتحسينه'
                  };
                  return fixes[issue] || `- إصلاح ${issue}`;
                }).join('\n')}}
                
                **تحسينات سريعة إضافية:**
                - ضغط الصور بجودة مناسبة
                - إزالة الكود المكرر
                - تحسين الاستيرادات
                - ضغط ملفات الخطوط
                
                المدة المتوقعة: 5-7 دقائق ⚡
          detailed_size_analysis:
            - action: ai_command
              command: >
                📊 **تحليل مفصل لحجم التطبيق**
                
                سأقوم بإنشاء تقرير شامل لحجم التطبيق:
                
                **📈 تحليل الحجم الحالي:**
                - الحد الأقصى المسموح: {{context.sizeThresholds.maxAppSizeMB}} ميجابايت
                - تحذير عند: {{context.sizeThresholds.warningThresholdMB}} ميجابايت
                - حرج عند: {{context.sizeThresholds.criticalThresholdMB}} ميجابايت
                
                **🔍 تفكيك الحجم:**
                سأقوم بتحليل:
                - حجم الكود المصدري
                - حجم الأصول والصور
                - حجم التبعيات
                - حجم الخطوط والملفات الإضافية
                
                **📋 تحليل المشاكل المكتشفة:**
                {{context.detectedSizeIssues.map(issue => `📋 ${issue}`).join('\n')}}
                
                **📝 توصيات التحسين:**
                - أولويات التحسين
                - إمكانيات توفير المساحة
                - أفضل الممارسات للحجم
                - خطة تحسين طويلة المدى
          optimize_assets_compression:
            - action: ai_command
              command: >
                🖼️ **ضغط وتحسين الأصول والصور**
                
                سأقوم بتحسين شامل للأصول:
                
                **1. ضغط الصور:**
                - تحليل جميع الصور في المشروع
                - ضغط بجودة محسنة حسب الاستخدام
                - تحويل إلى تنسيقات أصغر (WebP, AVIF)
                - إنشاء أحجام متعددة للشاشات المختلفة
                
                **2. تحسين الخطوط:**
                - إزالة الخطوط غير المستخدمة
                - ضغط ملفات الخطوط
                - استخدام Google Fonts عند الإمكان
                
                **3. تحسين الأصول الأخرى:**
                - ضغط ملفات JSON
                - تحسين ملفات SVG
                - ضغط ملفات الصوت والفيديو
                
                **4. التحسين التلقائي:**
                - إعداد pipeline لضغط الأصول تلقائياً
                - مراقبة حجم الأصول الجديدة
                - تنبيهات عند إضافة ملفات كبيرة
          optimize_dependencies:
            - action: ai_command
              command: >
                📦 **تحسين التبعيات وإزالة الزائدة**
                
                سأقوم بتحليل وتحسين التبعيات:
                
                **1. تحليل الاستخدام:**
                - فحص جميع التبعيات في pubspec.yaml
                - تحديد التبعيات المستخدمة فعلياً
                - اكتشاف التبعيات غير المستخدمة
                
                **2. البحث عن بدائل:**
                - البحث عن بدائل أصغر حجماً
                - مقارنة الوظائف والأداء
                - تقدير توفير الحجم
                
                **3. التحسين:**
                - إزالة التبعيات غير المستخدمة
                - استبدال التبعيات الكبيرة ببدائل أصغر
                - دمج التبعيات المتشابهة
                
                **4. المراقبة:**
                - تتبع حجم التبعيات الجديدة
                - تنبيهات عند إضافة تبعيات كبيرة
                - مراجعة دورية للتبعيات
          create_size_monitoring_dashboard:
            - action: ai_command
              command: >
                📈 **إنشاء لوحة مراقبة الحجم**
                
                سأقوم بإنشاء لوحة تحكم شاملة لمراقبة الحجم:
                
                **1. لوحة المراقبة الرئيسية:**
                ```dart
                class SizeMonitoringDashboard extends StatelessWidget {
                  @override
                  Widget build(BuildContext context) {
                    return Scaffold(
                      appBar: AppBar(title: Text('مراقبة حجم التطبيق')),
                      body: Column(children: [
                        CurrentSizeOverview(),
                        SizeBreakdownChart(),
                        SizeTrendsGraph(),
                        OptimizationOpportunities(),
                        SizeAlertsPanel(),
                      ]),
                    );
                  }
                }
                ```
                
                **2. مكونات المراقبة:**
                - رسوم بيانية لتطور الحجم
                - تفكيك الحجم حسب المكونات
                - تنبيهات الحجم المباشرة
                - إحصائيات الضغط والتحسين
                
                **3. تقارير تفصيلية:**
                - تقارير يومية/أسبوعية
                - مقارنة مع الإصدارات السابقة
                - تتبع نمو الحجم مع الوقت
                - توصيات التحسين المخصصة
          setup_size_alerts:
            - action: ai_command
              command: >
                ⚙️ **إعداد نظام تنبيهات الحجم**
                
                سأقوم بإنشاء نظام تنبيهات ذكي:
                
                **1. تنبيهات تلقائية:**
                - تنبيه عند تجاوز {{context.sizeThresholds.warningThresholdMB}} ميجابايت
                - تنبيه حرج عند {{context.sizeThresholds.criticalThresholdMB}} ميجابايت
                - تنبيه عند إضافة ملفات كبيرة (> {{context.sizeThresholds.maxSingleFileSizeKB}} كيلوبايت)
                
                **2. تنبيهات ذكية:**
                - تنبيه عند زيادة الحجم بنسبة معينة
                - تنبيه عند اكتشاف تبعيات غير مستخدمة
                - تنبيه عند إضافة صور غير محسنة
                
                **3. إجراءات تلقائية:**
                - ضغط الملفات تلقائياً عند الحاجة
                - إزالة الملفات المؤقتة
                - تنظيف ذاكرة التخزين المؤقت
                
                **4. التكامل:**
                - إشعارات push للمطورين
                - تقارير عبر البريد الإلكتروني
                - تكامل مع أنظمة CI/CD
          skip_size_monitoring:
            - action: no_op
              message: "تم تجاهل مراقبة حجم التطبيق. يمكنك تفعيلها لاحقاً لضمان الأداء الأمثل."

  # قاعدة الترجمة الذكية المتقدمة
  - id: intelligent-translation-system
    description: "نظام ترجمة ذكي متقدم لدعم التعدد اللغوي في تطبيقات كودورا"
    context:
      supportedLanguages: ["ar", "en", "fr", "tr", "de", "es", "it", "ru", "zh", "ja"]
      translationMetrics:
        totalKeys: 500
        translatedKeys: 450
        missingTranslations: 50
        accuracyRate: 95
        contextualAccuracy: 88
        userSatisfaction: 92
      detectedTranslationIssues: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const issues = [];
          
          // كشف النصوص المكتوبة مباشرة بدلاً من استخدام الترجمة
          if (content.includes('Text(\'') && !content.includes('tr(') && !content.includes('S.of(')) {
            issues.push('hardcoded_text_found');
          }
          
          // كشف النصوص العربية والإنجليزية المختلطة
          if (/[a-zA-Z].*[ء-ي]|[ء-ي].*[a-zA-Z]/.test(content)) {
            issues.push('mixed_language_text');
          }
          
          // كشف استخدام أرقام عربية وإنجليزية معاً
          if (/[0-9].*[٠-٩]|[٠-٩].*[0-9]/.test(content)) {
            issues.push('mixed_number_systems');
          }
          
          // كشف اتجاه النص غير الصحيح
          if (content.includes('TextDirection') && !content.includes('Directionality')) {
            issues.push('text_direction_issues');
          }
          
          // كشف ملفات الترجمة غير المكتملة
          if (content.includes('.arb') || content.includes('l10n')) {
            issues.push('translation_files_detected');
          }
          
          // كشف استخدام خطوط غير متوافقة مع العربية
          if (content.includes('fontFamily') && !content.includes('Cairo') && !content.includes('Tajawal')) {
            issues.push('arabic_font_compatibility');
          }
          
          return issues;
        })()
      appType: >
        (() => {
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          if (filePath.includes('الكود الخاص بتطبيق البائع')) return 'seller';
          if (filePath.includes('الكود الخاص بتطبيق التوصيل')) return 'delivery';
          if (filePath.includes('الكود الخاص بتطبيق العميل')) return 'customer';
          if (filePath.includes('الكود الخاص بتطبيق صاحب التطبيق')) return 'admin';
          return 'shared';
        })()
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('Text(') ||
          edit.content.includes('String ') ||
          edit.content.includes('AppBar(') ||
          edit.content.includes('title:') ||
          edit.content.includes('hintText') ||
          edit.content.includes('labelText') ||
          edit.content.includes('message') ||
          edit.content.includes('.arb') ||
          edit.content.includes('l10n') ||
          edit.content.includes('intl') ||
          edit.content.includes('Localizations')
        )
      )
    then:
      - action: prompt
        message: >
          🌍 **نظام الترجمة الذكية مُفعّل!**
          
          📱 **التطبيق:** {{context.appType}}
          
          🔍 **مشاكل الترجمة المكتشفة:**
          {{context.detectedTranslationIssues.length === 0 ? 
            '✅ لم يتم اكتشاف مشاكل ترجمة واضحة' : 
            context.detectedTranslationIssues.map(issue => {
              const issueMessages = {
                'hardcoded_text_found': '📝 نصوص مكتوبة مباشرة - تحتاج استخدام نظام الترجمة',
                'mixed_language_text': '🔤 نصوص مختلطة عربي/إنجليزي - تحتاج تنظيم',
                'mixed_number_systems': '🔢 أرقام مختلطة عربية/إنجليزية - تحتاج توحيد',
                'text_direction_issues': '↔️ مشاكل في اتجاه النص - تحتاج إصلاح',
                'translation_files_detected': '📄 ملفات ترجمة مكتشفة - تحتاج مراجعة',
                'arabic_font_compatibility': '🎨 خطوط غير متوافقة مع العربية - تحتاج تحديث'
              };
              return issueMessages[issue] || `⚠️ ${issue}`;
            }).join('\n')
          }}
          
          📊 **إحصائيات الترجمة الحالية:**
          - اللغات المدعومة: {{context.supportedLanguages.length}}
          - مفاتيح الترجمة: {{context.translationMetrics.totalKeys}}
          - الترجمات المكتملة: {{context.translationMetrics.translatedKeys}}
          - الترجمات المفقودة: {{context.translationMetrics.missingTranslations}}
          - معدل الدقة: {{context.translationMetrics.accuracyRate}}%
          
          🎯 **مستويات الترجمة المتاحة:**
          
          **🌍 النظام الشامل للترجمة (مستحسن)**
          - ترجمة ذكية تلقائية لجميع النصوص
          - دعم 10+ لغات مع السياق الثقافي
          - تحسين تلقائي لاتجاه النص والخطوط
          - نظام إدارة ترجمات متقدم
          - ترجمة تفاعلية حسب سلوك المستخدم
          
          **⚡ الترجمة السريعة**
          - إصلاح المشاكل المكتشفة فوراً
          - ترجمة أساسية للنصوص الجديدة
          
          **📊 تحليل الترجمة فقط**
          - تقرير مفصل بدون تعديل
          
          ماذا تختار؟
        choices:
          - label: "🌍 النظام الشامل للترجمة + الذكاء الاصطناعي"
            value: "comprehensive_intelligent_translation"
          - label: "⚡ الترجمة السريعة للمشاكل المكتشفة"
            value: "quick_translation_fixes"
          - label: "📊 تحليل الترجمة مفصل بدون تعديل"
            value: "detailed_translation_analysis"
          - label: "🔄 إعداد نظام ترجمة تلقائي متقدم"
            value: "setup_automated_translation_system"
          - label: "🎨 تحسين التوطين والثقافة المحلية"
            value: "enhance_localization_culture"
          - label: "📱 تحسين ترجمة خاص بالتطبيق"
            value: "app_specific_translation_optimization"
          - label: "🧪 اختبار جودة الترجمة والسياق"
            value: "translation_quality_testing"
          - label: "⏭️ تجاهل هذه المرة"
            value: "skip_translation_system"
        next_actions:
          comprehensive_intelligent_translation:
            - action: ai_command
              command: >
                🌍 **تفعيل النظام الشامل للترجمة الذكية**
                
                **المرحلة 1: تحليل الترجمة المكتشفة** 🔍
                
                المشاكل المكتشفة: {{context.detectedTranslationIssues.join(', ')}}
                نوع التطبيق: {{context.appType}}
                اللغات المدعومة: {{context.supportedLanguages.join(', ')}}
                
                سأقوم بإنشاء نظام ترجمة ذكي شامل:
                
                **1. إنشاء CodoraIntelligentTranslation:**
                ```dart
                class CodoraIntelligentTranslation extends GetxService {
                  static CodoraIntelligentTranslation get instance => Get.find();
                  
                  // ترجمة ذكية تلقائية
                  Future<String> smartTranslate(
                    String key,
                    String fallbackText, {
                    String? context,
                    Map<String, dynamic>? variables,
                  }) async {
                    final locale = Get.locale?.languageCode ?? 'ar';
                    final contextualTranslation = await _getContextualTranslation(key, locale, context);
                    
                    if (contextualTranslation != null) return contextualTranslation;
                    
                    // ترجمة تلقائية باستخدام AI
                    final aiTranslation = await _generateAITranslation(fallbackText, locale, context);
                    await _cacheTranslation(key, locale, aiTranslation);
                    
                    return aiTranslation;
                  }
                  
                  // كشف وإصلاح النصوص المكتوبة مباشرة
                  Future<void> detectAndFixHardcodedTexts() async {
                    final dartFiles = await _getAllDartFiles();
                    for (final file in dartFiles) {
                      final fixedContent = await _replaceHardcodedTexts(file);
                      if (fixedContent != null) {
                        await file.writeAsString(fixedContent);
                      }
                    }
                  }
                  
                  // نظام الترجمة التفاعلية
                  Future<String> adaptiveTranslate(String key, {UserProfile? userProfile}) async {
                    final userLanguage = userProfile?.preferredLanguage ?? 'ar';
                    final userCulture = userProfile?.culturalContext ?? 'arabic';
                    final formalityLevel = userProfile?.formalityPreference ?? 'moderate';
                    
                    return await _getAdaptiveTranslation(key, userLanguage, userCulture, formalityLevel);
                  }
                  
                  // تحسين الترجمة باستخدام سياق المستخدم
                  Future<void> optimizeTranslationsForUser(String userId) async {
                    final userBehavior = await _getUserBehaviorData(userId);
                    final preferredTerms = await _analyzeUserPreferredTerms(userBehavior);
                    
                    await _customizeTranslationsForUser(userId, preferredTerms);
                  }
                }
                ```
                
                **2. نظام إدارة الترجمات المتقدم:**
                ```dart
                class AdvancedTranslationManager {
                  // إدارة ملفات الترجمة التلقائية
                  static Future<void> manageTranslationFiles() async {
                    final languages = {{context.supportedLanguages}};
                    
                    for (final language in languages) {
                      final arbFile = File('lib/l10n/app_$language.arb');
                      await _ensureTranslationFileExists(arbFile, language);
                      await _validateTranslationCompleteness(arbFile);
                      await _optimizeTranslationKeys(arbFile);
                    }
                  }
                  
                  // ترجمة تلقائية للمفاتيح المفقودة
                  static Future<void> autoTranslateMissingKeys() async {
                    final missingTranslations = await _findMissingTranslations();
                    
                    for (final missing in missingTranslations) {
                      final baseTranslation = await _getBaseTranslation(missing.key, 'ar');
                      final autoTranslation = await _generateHighQualityTranslation(
                        baseTranslation,
                        missing.targetLanguage,
                        missing.context
                      );
                      
                      await _addTranslationToFile(missing.targetLanguage, missing.key, autoTranslation);
                    }
                  }
                  
                  // تحسين جودة الترجمة
                  static Future<void> improveTranslationQuality() async {
                    final allTranslations = await _getAllTranslations();
                    
                    for (final translation in allTranslations) {
                      final qualityScore = await _assessTranslationQuality(translation);
                      
                      if (qualityScore < 0.8) {
                        final improvedTranslation = await _improveTranslation(translation);
                        await _updateTranslation(translation.key, improvedTranslation);
                      }
                    }
                  }
                }
                ```
                
                **3. محرك التوطين الذكي:**
                ```dart
                class IntelligentLocalizationEngine {
                  // تحسين اتجاه النص تلقائياً
                  static Widget smartDirectionalText(String text, {TextStyle? style}) {
                    final isRTL = _isRTLText(text);
                    final direction = isRTL ? TextDirection.rtl : TextDirection.ltr;
                    
                    return Directionality(
                      textDirection: direction,
                      child: Text(
                        text,
                        style: style?.copyWith(
                          fontFamily: isRTL ? 'Cairo' : 'Roboto',
                        ),
                        textAlign: isRTL ? TextAlign.right : TextAlign.left,
                      ),
                    );
                  }
                  
                  // تنسيق التواريخ والأرقام حسب اللغة
                  static String formatCulturalData(dynamic data, String locale) {
                    if (data is DateTime) {
                      return _formatDateForLocale(data, locale);
                    } else if (data is num) {
                      return _formatNumberForLocale(data, locale);
                    } else if (data is String && _isPhoneNumber(data)) {
                      return _formatPhoneForLocale(data, locale);
                    }
                    return data.toString();
                  }
                  
                  // تحسين الخطوط للغات المختلفة
                  static TextStyle getOptimalFontForLanguage(String language, TextStyle base) {
                    final fontMapping = {
                      'ar': 'Cairo',
                      'en': 'Roboto',
                      'fr': 'Roboto',
                      'tr': 'Roboto',
                      'de': 'Roboto',
                      'zh': 'NotoSansCJK',
                      'ja': 'NotoSansCJK',
                      'ru': 'Roboto',
                    };
                    
                    return base.copyWith(
                      fontFamily: fontMapping[language] ?? 'Roboto',
                      height: language == 'ar' ? 1.6 : 1.4, // تحسين المسافات للعربية
                    );
                  }
                }
                ```
                
                **المرحلة 2: تطبيق التحسينات التلقائية** 🛠️
                
                سأقوم بتحليل وتحسين جميع النصوص وتطبيق أفضل ممارسات الترجمة لتطبيق {{context.appType}}
          quick_translation_fixes:
            - action: ai_command
              command: >
                ⚡ **الترجمة السريعة للمشاكل**
                
                سأقوم بإصلاح مشاكل الترجمة فوراً:
                
                **المشاكل المكتشفة وحلولها:**
                {{context.detectedTranslationIssues.map(issue => {
                  const fixes = {
                    'hardcoded_text_found': '- تحويل النصوص المكتوبة مباشرة إلى مفاتيح ترجمة',
                    'mixed_language_text': '- فصل النصوص العربية والإنجليزية وتنظيمها',
                    'mixed_number_systems': '- توحيد نظام الأرقام حسب اللغة المختارة',
                    'text_direction_issues': '- إصلاح اتجاه النص تلقائياً RTL/LTR',
                    'translation_files_detected': '- مراجعة وتحديث ملفات الترجمة .arb',
                    'arabic_font_compatibility': '- تحديث الخطوط لدعم العربية بشكل أفضل'
                  };
                  return fixes[issue] || `- إصلاح ${issue}`;
                }).join('\n')}}
                
                **تحسينات سريعة:**
                - إضافة الترجمات المفقودة للنصوص الجديدة
                - تحسين تنسيق النصوص العربية
                - إصلاح اتجاه النص تلقائياً
                - تحديث الخطوط للدعم الأفضل
                
                المدة المتوقعة: 5-8 دقائق ⚡
          skip_translation_system:
            - action: no_op
              message: "تم تجاهل نظام الترجمة. يمكنك تفعيله لاحقاً لدعم التعدد اللغوي."

  # قاعدة تحسين الخطوط العربية المتقدمة
  - id: arabic-typography-enhancement
    description: "نظام متقدم لتحسين الخطوط العربية والتيبوجرافي في تطبيقات كودورا"
    context:
      arabicFontMetrics:
        supportedFonts: ["Cairo", "Tajawal", "Amiri", "Noto Sans Arabic", "IBM Plex Sans Arabic"]
        readabilityScore: 85
        fontLoadingTime: 120
        arabicTextCoverage: 98
        kashidaSupport: true
        ligatureSupport: true
        diacriticSupport: true
      detectedTypographyIssues: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const issues = [];
          
          // كشف استخدام خطوط غير متوافقة مع العربية
          if (content.includes('fontFamily') && !content.match(/Cairo|Tajawal|Amiri|Noto|IBM/)) {
            issues.push('incompatible_arabic_font');
          }
          
          // كشف النصوص العربية بدون تحسين المسافات
          if (/[ء-ي]/.test(content) && content.includes('Text(') && !content.includes('height:')) {
            issues.push('arabic_text_spacing_issues');
          }
          
          // كشف استخدام أحجام خطوط غير مناسبة للعربية
          if (content.includes('fontSize') && content.match(/fontSize:\s*([89]|1[0-1])\b/)) {
            issues.push('small_arabic_font_size');
          }
          
          // كشف عدم دعم الكشيدة والتشكيل
          if (/[ء-ي]/.test(content) && !content.includes('textAlign') && !content.includes('TextAlign.justify')) {
            issues.push('missing_kashida_support');
          }
          
          // كشف النصوص المختلطة بدون معالجة خاصة
          if (/[ء-ي].*[a-zA-Z]|[a-zA-Z].*[ء-ي]/.test(content)) {
            issues.push('mixed_text_typography');
          }
          
          // كشف عدم استخدام أوزان خطوط مناسبة للعربية
          if (content.includes('fontWeight') && content.includes('FontWeight.w100')) {
            issues.push('light_weight_arabic_issue');
          }
          
          // كشف مشاكل في تنسيق النصوص الطويلة
          if (content.includes('maxLines') && !content.includes('overflow') && /[ء-ي]/.test(content)) {
            issues.push('arabic_text_overflow_issues');
          }
          
          return issues;
        })()
      appType: >
        (() => {
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          if (filePath.includes('الكود الخاص بتطبيق البائع')) return 'seller';
          if (filePath.includes('الكود الخاص بتطبيق التوصيل')) return 'delivery';
          if (filePath.includes('الكود الخاص بتطبيق العميل')) return 'customer';
          if (filePath.includes('الكود الخاص بتطبيق صاحب التطبيق')) return 'admin';
          return 'shared';
        })()
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('Text(') ||
          edit.content.includes('TextStyle') ||
          edit.content.includes('fontFamily') ||
          edit.content.includes('fontSize') ||
          edit.content.includes('fontWeight') ||
          edit.content.includes('AppBar(') ||
          edit.content.includes('title:') ||
          edit.content.includes('Theme') ||
          edit.content.match(/[ء-ي]/) ||
          edit.content.includes('Arabic') ||
          edit.content.includes('RTL')
        )
      )
    then:
      - action: prompt
        message: >
          🎨 **محسن الخطوط العربية مُفعّل!**
          
          📱 **التطبيق:** {{context.appType}}
          
          🔍 **مشاكل التيبوجرافي المكتشفة:**
          {{context.detectedTypographyIssues.length === 0 ? 
            '✅ لم يتم اكتشاف مشاكل خطوط واضحة' : 
            context.detectedTypographyIssues.map(issue => {
              const issueMessages = {
                'incompatible_arabic_font': '🔤 خط غير متوافق مع العربية - تحتاج استبدال',
                'arabic_text_spacing_issues': '📏 مشاكل في المسافات للنص العربي - تحتاج تحسين',
                'small_arabic_font_size': '🔍 حجم خط صغير للعربية - تحتاج تكبير',
                'missing_kashida_support': '📐 دعم الكشيدة والمحاذاة مفقود - تحتاج تفعيل',
                'mixed_text_typography': '🔀 نصوص مختلطة بدون معالجة - تحتاج تنسيق',
                'light_weight_arabic_issue': '💡 وزن خط خفيف غير مناسب للعربية - تحتاج تثقيل',
                'arabic_text_overflow_issues': '📜 مشاكل في تدفق النص العربي - تحتاج معالجة'
              };
              return issueMessages[issue] || `⚠️ ${issue}`;
            }).join('\n')
          }}
          
          📊 **مقاييس الخطوط العربية الحالية:**
          - الخطوط المدعومة: {{context.arabicFontMetrics.supportedFonts.length}}
          - معدل القابلية للقراءة: {{context.arabicFontMetrics.readabilityScore}}%
          - وقت تحميل الخطوط: {{context.arabicFontMetrics.fontLoadingTime}}ms
          - تغطية النصوص العربية: {{context.arabicFontMetrics.arabicTextCoverage}}%
          - دعم الكشيدة: {{context.arabicFontMetrics.kashidaSupport ? '✅' : '❌'}}
          - دعم التشكيل: {{context.arabicFontMetrics.diacriticSupport ? '✅' : '❌'}}
          
          🎯 **مستويات التحسين المتاحة:**
          
          **🎨 النظام الشامل للخطوط العربية (مستحسن)**
          - تحسين تلقائي لجميع النصوص العربية
          - دعم متقدم للكشيدة والتشكيل والربط
          - تحسين القابلية للقراءة والجمالية
          - تحسين الأداء وأوقات التحميل
          - دعم الخطوط المتجاوبة حسب الجهاز
          
          **⚡ التحسين السريع**
          - إصلاح المشاكل المكتشفة فوراً
          - تحديث الخطوط الأساسية
          
          **📊 تحليل الخطوط فقط**
          - تقرير مفصل بدون تعديل
          
          ماذا تختار؟
        choices:
          - label: "🎨 النظام الشامل للخطوط العربية + الذكاء الاصطناعي"
            value: "comprehensive_arabic_typography"
          - label: "⚡ التحسين السريع للخطوط المكتشفة"
            value: "quick_typography_fixes"
          - label: "📊 تحليل مفصل للخطوط بدون تعديل"
            value: "detailed_typography_analysis"
          - label: "🔤 إعداد نظام خطوط عربية متقدم"
            value: "setup_advanced_arabic_fonts"
          - label: "📐 تحسين الكشيدة والمحاذاة والتشكيل"
            value: "enhance_kashida_alignment"
          - label: "📱 تحسين الخطوط حسب نوع التطبيق"
            value: "app_specific_typography"
          - label: "⚡ تحسين أداء تحميل الخطوط"
            value: "optimize_font_performance"
          - label: "⏭️ تجاهل هذه المرة"
            value: "skip_typography_enhancement"
        next_actions:
          comprehensive_arabic_typography:
            - action: ai_command
              command: >
                🎨 **تفعيل النظام الشامل للخطوط العربية**
                
                **المرحلة 1: تحليل الخطوط المكتشفة** 🔍
                
                المشاكل المكتشفة: {{context.detectedTypographyIssues.join(', ')}}
                نوع التطبيق: {{context.appType}}
                الخطوط المدعومة: {{context.arabicFontMetrics.supportedFonts.join(', ')}}
                
                سأقوم بإنشاء نظام خطوط عربية شامل:
                
                **1. إنشاء CodoraArabicTypography:**
                ```dart
                class CodoraArabicTypography extends GetxService {
                  static CodoraArabicTypography get instance => Get.find();
                  
                  // تحسين النص العربي تلقائياً
                  static TextStyle enhanceArabicText(TextStyle base, {
                    ArabicTextType? textType,
                    ReadabilityLevel? readability,
                  }) {
                    final textTypeSettings = _getTextTypeSettings(textType ?? ArabicTextType.body);
                    final readabilitySettings = _getReadabilitySettings(readability ?? ReadabilityLevel.high);
                    
                    return base.copyWith(
                      fontFamily: textTypeSettings.fontFamily,
                      fontSize: _adjustFontSizeForArabic(base.fontSize ?? 14),
                      height: _getOptimalLineHeight(textTypeSettings.fontFamily),
                      fontWeight: _adjustFontWeightForArabic(base.fontWeight ?? FontWeight.normal),
                      letterSpacing: _getOptimalLetterSpacing(textTypeSettings.fontFamily),
                      wordSpacing: _getOptimalWordSpacing(),
                    );
                  }
                  
                  // نظام الخطوط الذكي
                  static String selectOptimalFont({
                    required ArabicTextContext context,
                    required DeviceType deviceType,
                    required ReadabilityRequirement requirement,
                  }) {
                    final fontScores = <String, double>{};
                    
                    for (final font in _getAvailableFonts()) {
                      double score = 0;
                      score += _evaluateFontForContext(font, context) * 0.4;
                      score += _evaluateFontForDevice(font, deviceType) * 0.3;
                      score += _evaluateFontReadability(font, requirement) * 0.3;
                      fontScores[font] = score;
                    }
                    
                    return fontScores.entries.reduce((a, b) => a.value > b.value ? a : b).key;
                  }
                  
                  // تحسين الكشيدة والتشكيل
                  static Widget enhancedArabicText(
                    String text, {
                    TextStyle? style,
                    bool enableKashida = true,
                    bool enableDiacritics = true,
                    bool enableLigatures = true,
                  }) {
                    final processedText = _processArabicText(
                      text,
                      kashida: enableKashida,
                      diacritics: enableDiacritics,
                      ligatures: enableLigatures,
                    );
                    
                    return Text(
                      processedText,
                      style: enhanceArabicText(style ?? const TextStyle()),
                      textAlign: TextAlign.justify,
                      textDirection: TextDirection.rtl,
                    );
                  }
                  
                  // نظام الخطوط المتجاوبة
                  static TextStyle responsiveArabicFont(
                    double screenWidth,
                    ArabicTextType textType,
                  ) {
                    final baseSize = _getBaseFontSize(textType);
                    final scaleFactor = _calculateScaleFactor(screenWidth);
                    final responsiveSize = baseSize * scaleFactor;
                    
                    return TextStyle(
                      fontFamily: _getResponsiveFont(screenWidth),
                      fontSize: responsiveSize,
                      height: _getResponsiveLineHeight(screenWidth),
                      fontWeight: _getResponsiveFontWeight(textType, screenWidth),
                    );
                  }
                }
                ```
                
                **2. محرك التحسين التلقائي للنصوص:**
                ```dart
                class ArabicTextOptimizer {
                  // تحسين تلقائي لجميع النصوص العربية
                  static Future<void> optimizeAllArabicTexts() async {
                    final dartFiles = await _getAllDartFiles();
                    
                    for (final file in dartFiles) {
                      String content = await file.readAsString();
                      String optimizedContent = content;
                      
                      // تحسين Text widgets
                      optimizedContent = _optimizeTextWidgets(optimizedContent);
                      
                      // تحسين TextStyle definitions
                      optimizedContent = _optimizeTextStyles(optimizedContent);
                      
                      // تحسين Theme definitions
                      optimizedContent = _optimizeThemeData(optimizedContent);
                      
                      if (optimizedContent != content) {
                        await file.writeAsString(optimizedContent);
                      }
                    }
                  }
                  
                  // كشف وإصلاح مشاكل الخطوط
                  static String fixArabicFontIssues(String code) {
                    String fixedCode = code;
                    
                    // إصلاح الخطوط غير المتوافقة
                    fixedCode = fixedCode.replaceAllMapped(
                      RegExp(r'fontFamily:\s*[\'"]([^\'"]*)[\'"]'),
                      (match) {
                        final font = match.group(1)!;
                        if (!_isArabicCompatible(font)) {
                          return 'fontFamily: \'Cairo\'';
                        }
                        return match.group(0)!;
                      },
                    );
                    
                    // إصلاح أحجام الخطوط الصغيرة
                    fixedCode = fixedCode.replaceAllMapped(
                      RegExp(r'fontSize:\s*([89]|1[0-1])\b'),
                      (match) => 'fontSize: 14',
                    );
                    
                    // إضافة line height للنصوص العربية
                    fixedCode = _addLineHeightToArabicTexts(fixedCode);
                    
                    return fixedCode;
                  }
                  
                  // تحسين الأداء للخطوط
                  static Future<void> optimizeFontPerformance() async {
                    // تحسين تحميل الخطوط
                    await _preloadArabicFonts();
                    
                    // ضغط ملفات الخطوط
                    await _compressFontFiles();
                    
                    // إنشاء خطوط فرعية للأحرف المستخدمة فقط
                    await _createFontSubsets();
                  }
                }
                ```
                
                **3. نظام التشكيل والكشيدة المتقدم:**
                ```dart
                class AdvancedArabicTextProcessor {
                  // معالج التشكيل الذكي
                  static String processArabicDiacritics(String text, {
                    DiacriticLevel level = DiacriticLevel.essential,
                  }) {
                    switch (level) {
                      case DiacriticLevel.none:
                        return _removeDiacritics(text);
                      case DiacriticLevel.essential:
                        return _addEssentialDiacritics(text);
                      case DiacriticLevel.full:
                        return _addFullDiacritics(text);
                    }
                  }
                  
                  // معالج الكشيدة التلقائي
                  static String processKashida(String text, double containerWidth) {
                    final words = text.split(' ');
                    final processedWords = <String>[];
                    
                    for (final word in words) {
                      if (_shouldApplyKashida(word, containerWidth)) {
                        processedWords.add(_applySmartKashida(word));
                      } else {
                        processedWords.add(word);
                      }
                    }
                    
                    return processedWords.join(' ');
                  }
                  
                  // معالج الربط والليجيتشر
                  static String processArabicLigatures(String text) {
                    final ligatureMap = _getArabicLigatures();
                    String processedText = text;
                    
                    for (final entry in ligatureMap.entries) {
                      processedText = processedText.replaceAll(entry.key, entry.value);
                    }
                    
                    return processedText;
                  }
                  
                  // تحسين النصوص المختلطة
                  static Widget mixedLanguageText(
                    String text, {
                    TextStyle? arabicStyle,
                    TextStyle? latinStyle,
                  }) {
                    final segments = _segmentMixedText(text);
                    final spans = <InlineSpan>[];
                    
                    for (final segment in segments) {
                      final style = segment.isArabic 
                        ? (arabicStyle ?? _getDefaultArabicStyle())
                        : (latinStyle ?? _getDefaultLatinStyle());
                      
                      spans.add(TextSpan(
                        text: segment.text,
                        style: style,
                      ));
                    }
                    
                    return RichText(
                      text: TextSpan(children: spans),
                      textDirection: TextDirection.rtl,
                    );
                  }
                }
                ```
                
                **المرحلة 2: تطبيق التحسينات التلقائية** 🛠️
                
                سأقوم بتحليل وتحسين جميع الخطوط والنصوص العربية لتطبيق {{context.appType}}
          quick_typography_fixes:
            - action: ai_command
              command: >
                ⚡ **التحسين السريع للخطوط العربية**
                
                سأقوم بإصلاح مشاكل الخطوط فوراً:
                
                **المشاكل المكتشفة وحلولها:**
                {{context.detectedTypographyIssues.map(issue => {
                  const fixes = {
                    'incompatible_arabic_font': '- استبدال الخطوط بـ Cairo أو Tajawal المتوافقة',
                    'arabic_text_spacing_issues': '- إضافة line height مناسب للنصوص العربية',
                    'small_arabic_font_size': '- زيادة حجم الخط إلى 14px كحد أدنى',
                    'missing_kashida_support': '- إضافة TextAlign.justify ودعم الكشيدة',
                    'mixed_text_typography': '- معالجة النصوص المختلطة بخطوط منفصلة',
                    'light_weight_arabic_issue': '- تحويل FontWeight إلى normal أو أثقل',
                    'arabic_text_overflow_issues': '- إضافة معالجة overflow للنصوص الطويلة'
                  };
                  return fixes[issue] || `- إصلاح ${issue}`;
                }).join('\n')}}
                
                **تحسينات سريعة:**
                - تحديث جميع الخطوط للتوافق مع العربية
                - تحسين المسافات والتنسيق
                - إضافة دعم الكشيدة الأساسي
                - تحسين قابلية القراءة
                
                المدة المتوقعة: 4-6 دقائق ⚡
          skip_typography_enhancement:
            - action: no_op
              message: "تم تجاهل تحسين الخطوط العربية. يمكنك تفعيله لاحقاً لتحسين جودة النصوص."

  # قاعدة الاختبار التلقائي المتقدمة
  - id: intelligent-automated-testing
    description: "نظام اختبار تلقائي ذكي وشامل لضمان جودة تطبيقات كودورا"
    context:
      testMetrics:
        totalTests: 1200
        passingTests: 1150
        failingTests: 50
        codeCoverage: 85
        testExecutionTime: 45
        automationRate: 90
        bugDetectionRate: 95
        testMaintainability: 88
      detectedTestingIssues: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const issues = [];
          
          // كشف ملفات بدون اختبارات
          if (content.includes('class ') && content.includes('Widget') && !content.includes('test(')) {
            issues.push('missing_widget_tests');
          }
          
          // كشف دوال بدون اختبارات
          if (content.includes('Future<') && content.includes('async') && !content.includes('testWidgets')) {
            issues.push('missing_async_function_tests');
          }
          
          // كشف API calls بدون اختبارات
          if ((content.includes('http.') || content.includes('dio.')) && !content.includes('mockito')) {
            issues.push('missing_api_tests');
          }
          
          // كشف Firebase operations بدون اختبارات
          if (content.includes('FirebaseFirestore') && !content.includes('fake_cloud_firestore')) {
            issues.push('missing_firebase_tests');
          }
          
          // كشف State management بدون اختبارات
          if (content.includes('GetxController') && !content.includes('Get.testMode')) {
            issues.push('missing_state_tests');
          }
          
          // كشف اختبارات قديمة أو معطلة
          if (content.includes('skip:') || content.includes('// TODO: test')) {
            issues.push('disabled_outdated_tests');
          }
          
          // كشف اختبارات بطيئة
          if (content.includes('setUp') && !content.includes('timeout')) {
            issues.push('slow_test_execution');
          }
          
          return issues;
        })()
      appType: >
        (() => {
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          if (filePath.includes('الكود الخاص بتطبيق البائع')) return 'seller';
          if (filePath.includes('الكود الخاص بتطبيق التوصيل')) return 'delivery';
          if (filePath.includes('الكود الخاص بتطبيق العميل')) return 'customer';
          if (filePath.includes('الكود الخاص بتطبيق صاحب التطبيق')) return 'admin';
          return 'shared';
        })()
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('class ') ||
          edit.content.includes('Widget') ||
          edit.content.includes('Future<') ||
          edit.content.includes('async') ||
          edit.content.includes('GetxController') ||
          edit.content.includes('http.') ||
          edit.content.includes('dio.') ||
          edit.content.includes('FirebaseFirestore') ||
          edit.content.includes('test(') ||
          edit.content.includes('testWidgets') ||
          edit.path.includes('test/') ||
          edit.path.includes('_test.dart')
        )
      )
    then:
      - action: prompt
        message: >
          🧪 **نظام الاختبار التلقائي الذكي مُفعّل!**
          
          📱 **التطبيق:** {{context.appType}}
          
          ⚠️ **مشاكل الاختبار المكتشفة:**
          {{context.detectedTestingIssues.length === 0 ? 
            '✅ لم يتم اكتشاف مشاكل اختبار واضحة' : 
            context.detectedTestingIssues.map(issue => {
              const issueMessages = {
                'missing_widget_tests': '🎨 اختبارات الـ Widgets مفقودة - ضرورية للواجهة',
                'missing_async_function_tests': '⏱️ اختبارات الدوال غير المتزامنة مفقودة',
                'missing_api_tests': '🌐 اختبارات API مفقودة - مخاطر عالية',
                'missing_firebase_tests': '🔥 اختبارات Firebase مفقودة - البيانات معرضة للخطر',
                'missing_state_tests': '🔄 اختبارات إدارة الحالة مفقودة',
                'disabled_outdated_tests': '❌ اختبارات معطلة أو قديمة',
                'slow_test_execution': '🐌 اختبارات بطيئة التنفيذ'
              };
              return issueMessages[issue] || `⚠️ ${issue}`;
            }).join('\n')
          }}
          
          📊 **مقاييس الاختبار الحالية:**
          - إجمالي الاختبارات: {{context.testMetrics.totalTests}}
          - الاختبارات الناجحة: {{context.testMetrics.passingTests}}
          - الاختبارات الفاشلة: {{context.testMetrics.failingTests}}
          - تغطية الكود: {{context.testMetrics.codeCoverage}}%
          - معدل الأتمتة: {{context.testMetrics.automationRate}}%
          
          🎯 **مستويات الاختبار المتاحة:**
          
          **🧪 نظام الاختبار الشامل (مستحسن)**
          - إنشاء اختبارات تلقائية لجميع المكونات
          - اختبارات الوحدة والتكامل والواجهة
          - اختبارات الأداء والضغط
          - اختبارات الأمان والتوافق
          - مراقبة مستمرة للاختبارات
          
          **⚡ الاختبار السريع**
          - إنشاء اختبارات أساسية فقط
          - تغطية المكونات الحيوية
          
          **📊 تحليل الاختبارات فقط**
          - تقرير مفصل بدون إنشاء اختبارات
          
          ماذا تختار؟
        choices:
          - label: "🧪 نظام الاختبار الشامل + الإنشاء التلقائي"
            value: "comprehensive_testing_system"
          - label: "⚡ الاختبار السريع للمكونات الأساسية"
            value: "quick_testing_setup"
          - label: "📊 تحليل مفصل للاختبارات الحالية"
            value: "detailed_testing_analysis"
          - label: "🎨 إنشاء اختبارات الواجهة التلقائية"
            value: "automated_ui_testing"
          - label: "🌐 إنشاء اختبارات API والشبكة"
            value: "api_network_testing"
          - label: "🔥 إنشاء اختبارات Firebase"
            value: "firebase_testing_setup"
          - label: "📈 إعداد مراقبة الاختبارات المستمرة"
            value: "continuous_testing_monitoring"
          - label: "⏭️ تجاهل هذه المرة"
            value: "skip_testing_setup"
        next_actions:
          comprehensive_testing_system:
            - action: ai_command
              command: >
                🧪 **تفعيل نظام الاختبار الشامل**
                
                **المرحلة 1: تحليل مشاكل الاختبار المكتشفة** 🔍
                
                المشاكل المكتشفة: {{context.detectedTestingIssues.join(', ')}}
                نوع التطبيق: {{context.appType}}
                
                سأقوم بإنشاء نظام اختبار شامل ومتقدم:
                
                **1. إنشاء CodoraTestingFramework:**
                ```dart
                class CodoraTestingFramework {
                  static final CodoraTestingFramework _instance = CodoraTestingFramework._internal();
                  factory CodoraTestingFramework() => _instance;
                  CodoraTestingFramework._internal();
                  
                  // إدارة إعداد الاختبارات
                  Future<void> setupTestEnvironment() async {
                    await _initializeTestDatabase();
                    await _setupMockServices();
                    await _configureTestWidgets();
                    await _initializeTestData();
                  }
                  
                  // إنشاء اختبارات تلقائية
                  Future<void> generateAutomatedTests(String filePath) async {
                    final codeAnalysis = await _analyzeCodeStructure(filePath);
                    
                    // إنشاء اختبارات الوحدة
                    if (codeAnalysis.hasClasses) {
                      await _generateUnitTests(codeAnalysis.classes);
                    }
                    
                    // إنشاء اختبارات الواجهة
                    if (codeAnalysis.hasWidgets) {
                      await _generateWidgetTests(codeAnalysis.widgets);
                    }
                    
                    // إنشاء اختبارات التكامل
                    if (codeAnalysis.hasAsyncOperations) {
                      await _generateIntegrationTests(codeAnalysis.asyncOperations);
                    }
                  }
                  
                  // تشغيل الاختبارات الذكية
                  Future<TestResults> runIntelligentTests() async {
                    final testSuite = await _buildTestSuite();
                    final parallelRunner = ParallelTestRunner(
                      maxConcurrency: 4,
                      priorityOrder: TestPriority.criticalFirst,
                    );
                    
                    return await parallelRunner.execute(testSuite);
                  }
                  
                  // مراقبة صحة الاختبارات
                  Future<void> monitorTestHealth() async {
                    final healthMetrics = await _calculateTestHealth();
                    if (healthMetrics.coverage < 80) {
                      await _suggestAdditionalTests();
                    }
                    if (healthMetrics.hasFlakeyTests) {
                      await _fixFlakeyTests();
                    }
                  }
                }
                ```
                
                **المرحلة 2: تطبيق الاختبارات التلقائية** 🛠️
                
                سأقوم بإنشاء وتشغيل اختبارات شاملة لتطبيق {{context.appType}}
          quick_testing_setup:
            - action: ai_command
              command: >
                ⚡ **إعداد الاختبارات السريعة**
                
                سأقوم بإنشاء اختبارات أساسية للمكونات الحيوية
          skip_testing_setup:
            - action: no_op
              message: "تم تجاهل إعداد الاختبارات التلقائية. يُنصح بشدة بتطبيق الاختبارات لضمان جودة التطبيق."

  # قاعدة اختبار التوافق المتقدمة
  - id: intelligent-compatibility-testing
    description: "نظام اختبار توافق ذكي للأجهزة والمنصات وإصدارات النظام"
    context:
      compatibilityMetrics:
        testedDevices: 85
        supportedOSVersions: ["Android 8+", "iOS 12+"]
        screenSizes: ["320x568", "375x667", "414x896", "768x1024", "1024x768"]
        browserCompatibility: 95
        performanceAcrossDevices: 88
        accessibilityCompliance: 92
      detectedCompatibilityIssues: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const issues = [];
          
          // كشف استخدام APIs قديمة أو مهجورة
          if (content.includes('deprecated') || content.match(/flutter[_-]driver|url_launcher[<].*1\./)) {
            issues.push('deprecated_apis_usage');
          }
          
          // كشف مشاكل في الأحجام الثابتة
          if (content.includes('width:') && content.match(/width:\s*\d{3,}/)) {
            issues.push('fixed_size_elements');
          }
          
          // كشف عدم دعم إمكانية الوصول
          if (content.includes('Widget') && !content.includes('Semantics') && !content.includes('semanticsLabel')) {
            issues.push('accessibility_support_missing');
          }
          
          // كشف مشاكل في الأنظمة القديمة
          if (content.includes('minSdkVersion') && content.match(/minSdkVersion\s*[12][0-9]/)) {
            issues.push('old_android_support_issues');
          }
          
          // كشف مشاكل في الخطوط للشاشات المختلفة
          if (content.includes('fontSize') && !content.includes('MediaQuery') && !content.includes('textScaleFactor')) {
            issues.push('font_scaling_issues');
          }
          
          // كشف استخدام platform-specific code بدون فحص
          if ((content.includes('Platform.isAndroid') || content.includes('Platform.isIOS')) && !content.includes('kIsWeb')) {
            issues.push('platform_specific_code_issues');
          }
          
          // كشف مشاكل في الشبكة للأنظمة المختلفة
          if (content.includes('http') && !content.includes('certificate') && !content.includes('SecurityContext')) {
            issues.push('network_security_compatibility');
          }
          
          return issues;
        })()
      appType: >
        (() => {
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          if (filePath.includes('الكود الخاص بتطبيق البائع')) return 'seller';
          if (filePath.includes('الكود الخاص بتطبيق التوصيل')) return 'delivery';
          if (filePath.includes('الكود الخاص بتطبيق العميل')) return 'customer';
          if (filePath.includes('الكود الخاص بتطبيق صاحب التطبيق')) return 'admin';
          return 'shared';
        })()
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('Widget') ||
          edit.content.includes('Platform.') ||
          edit.content.includes('MediaQuery') ||
          edit.content.includes('devicePixelRatio') ||
          edit.content.includes('orientation') ||
          edit.content.includes('size') ||
          edit.content.includes('width') ||
          edit.content.includes('height') ||
          edit.content.includes('minSdkVersion') ||
          edit.content.includes('targetSdkVersion') ||
          edit.content.includes('deprecated') ||
          edit.content.includes('Semantics') ||
          edit.path.includes('android/') ||
          edit.path.includes('ios/') ||
          edit.path.includes('web/')
        )
      )
    then:
      - action: prompt
        message: >
          🔧 **نظام اختبار التوافق الذكي مُفعّل!**
          
          📱 **التطبيق:** {{context.appType}}
          
          ⚠️ **مشاكل التوافق المكتشفة:**
          {{context.detectedCompatibilityIssues.length === 0 ? 
            '✅ لم يتم اكتشاف مشاكل توافق واضحة' : 
            context.detectedCompatibilityIssues.map(issue => {
              const issueMessages = {
                'deprecated_apis_usage': '📱 استخدام APIs مهجورة - تحتاج تحديث',
                'fixed_size_elements': '📏 عناصر بأحجام ثابتة - مشاكل في الشاشات المختلفة',
                'accessibility_support_missing': '♿ دعم إمكانية الوصول مفقود',
                'old_android_support_issues': '🤖 مشاكل دعم Android القديم',
                'font_scaling_issues': '🔤 مشاكل تكبير الخطوط للمستخدمين',
                'platform_specific_code_issues': '⚙️ كود خاص بمنصة بدون فحص شامل',
                'network_security_compatibility': '🔒 مشاكل أمان الشبكة عبر المنصات'
              };
              return issueMessages[issue] || `⚠️ ${issue}`;
            }).join('\n')
          }}
          
          📊 **مقاييس التوافق الحالية:**
          - الأجهزة المختبرة: {{context.compatibilityMetrics.testedDevices}}
          - إصدارات النظام المدعومة: {{context.compatibilityMetrics.supportedOSVersions.join(', ')}}
          - أحجام الشاشات: {{context.compatibilityMetrics.screenSizes.length}}
          - توافق المتصفحات: {{context.compatibilityMetrics.browserCompatibility}}%
          - الأداء عبر الأجهزة: {{context.compatibilityMetrics.performanceAcrossDevices}}%
          
          🎯 **مستويات اختبار التوافق المتاحة:**
          
          **🔧 نظام التوافق الشامل (مستحسن)**
          - اختبار شامل للأجهزة والأنظمة
          - فحص إمكانية الوصول والمعايير
          - اختبار الأداء عبر المنصات
          - دعم الشاشات والاتجاهات المختلفة
          - اختبار الشبكة والأمان
          
          **⚡ اختبار التوافق السريع**
          - فحص المشاكل الحرجة فقط
          - اختبار الأجهزة الشائعة
          
          **📊 تحليل التوافق فقط**
          - تقرير مفصل بدون إصلاح
          
          ماذا تختار؟
        choices:
          - label: "🔧 نظام التوافق الشامل + الإصلاح التلقائي"
            value: "comprehensive_compatibility_testing"
          - label: "⚡ اختبار التوافق السريع للمشاكل الحرجة"
            value: "quick_compatibility_fixes"
          - label: "📊 تحليل مفصل للتوافق بدون إصلاح"
            value: "detailed_compatibility_analysis"
          - label: "📱 اختبار توافق الأجهزة والشاشات"
            value: "device_screen_compatibility"
          - label: "♿ فحص وتحسين إمكانية الوصول"
            value: "accessibility_compliance_check"
          - label: "🌐 اختبار التوافق عبر المنصات"
            value: "cross_platform_compatibility"
          - label: "🔒 فحص الأمان والشبكة عبر الأنظمة"
            value: "security_network_compatibility"
          - label: "⏭️ تجاهل هذه المرة"
            value: "skip_compatibility_testing"
        next_actions:
          comprehensive_compatibility_testing:
            - action: ai_command
              command: >
                🔧 **تفعيل نظام التوافق الشامل**
                
                **المرحلة 1: تحليل مشاكل التوافق المكتشفة** 🔍
                
                المشاكل المكتشفة: {{context.detectedCompatibilityIssues.join(', ')}}
                نوع التطبيق: {{context.appType}}
                
                سأقوم بإنشاء نظام توافق شامل ومتقدم:
                
                **1. إنشاء CodoraCompatibilityFramework:**
                ```dart
                class CodoraCompatibilityFramework extends GetxService {
                  static CodoraCompatibilityFramework get instance => Get.find();
                  
                  // إدارة توافق الأجهزة
                  Future<CompatibilityReport> checkDeviceCompatibility() async {
                    final deviceInfo = await _getDeviceInfo();
                    final issues = <CompatibilityIssue>[];
                    
                    // فحص إصدار النظام
                    if (!_isOSVersionSupported(deviceInfo.osVersion)) {
                      issues.add(CompatibilityIssue.unsupportedOSVersion);
                    }
                    
                    // فحص مواصفات الجهاز
                    if (!_areDeviceSpecsAdequate(deviceInfo.specs)) {
                      issues.add(CompatibilityIssue.inadequateSpecs);
                    }
                    
                    // فحص الشاشة والكثافة
                    if (!_isScreenSizeSupported(deviceInfo.screenSize)) {
                      issues.add(CompatibilityIssue.unsupportedScreenSize);
                    }
                    
                    return CompatibilityReport(
                      deviceInfo: deviceInfo,
                      issues: issues,
                      overallScore: _calculateCompatibilityScore(issues),
                      recommendations: _generateRecommendations(issues),
                    );
                  }
                  
                  // نظام التكيف التلقائي
                  Widget adaptiveWidget(Widget child) {
                    return LayoutBuilder(
                      builder: (context, constraints) {
                        final adaptations = _getDeviceAdaptations(constraints);
                        
                        return AdaptiveContainer(
                          adaptations: adaptations,
                          child: child,
                        );
                      },
                    );
                  }
                  
                  // فحص إمكانية الوصول
                  Future<AccessibilityReport> checkAccessibility() async {
                    final accessibilityFeatures = await _getAccessibilityFeatures();
                    final issues = <AccessibilityIssue>[];
                    
                    // فحص التباين
                    if (!_isContrastAdequate()) {
                      issues.add(AccessibilityIssue.lowContrast);
                    }
                    
                    // فحص أحجام الخطوط
                    if (!_areFontSizesAccessible()) {
                      issues.add(AccessibilityIssue.inadequateFontSizes);
                    }
                    
                    // فحص التسميات الوصفية
                    if (!_areSemanticLabelsPresent()) {
                      issues.add(AccessibilityIssue.missingSemanticLabels);
                    }
                    
                    return AccessibilityReport(
                      issues: issues,
                      complianceScore: _calculateAccessibilityScore(issues),
                      improvements: _suggestAccessibilityImprovements(issues),
                    );
                  }
                }
                ```
                
                **المرحلة 2: تطبيق إصلاحات التوافق** 🛠️
                
                سأقوم بإصلاح جميع مشاكل التوافق لتطبيق {{context.appType}}
          quick_compatibility_fixes:
            - action: ai_command
              command: >
                ⚡ **إصلاح سريع لمشاكل التوافق**
                
                سأقوم بإصلاح المشاكل الحرجة فوراً
          skip_compatibility_testing:
            - action: no_op
              message: "تم تجاهل اختبار التوافق. يُنصح بتطبيقه لضمان عمل التطبيق على جميع الأجهزة."

  # قاعدة تحسين ASO المتقدمة
  - id: intelligent-aso-optimization
    description: "نظام تحسين متقدم لمتاجر التطبيقات ASO مع الذكاء الاصطناعي"
    context:
      asoMetrics:
        currentRanking: 45
        keywordRankings: {organic: 35, paid: 12}
        downloadRate: 850
        conversionRate: 12.5
        userRetention: 68
        reviewRating: 4.2
        competitorAnalysis: {topCompetitors: 8, marketShare: 15}
      detectedASOIssues: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          const issues = [];
          
          // كشف مشاكل في ملفات الميتاداتا
          if (filePath.includes('pubspec.yaml')) {
            if (content.includes('description:') && content.match(/description:\s*(.{0,50}|.{200,})/)) {
              issues.push('app_description_length_issues');
            }
            if (!content.includes('homepage:') || !content.includes('repository:')) {
              issues.push('missing_metadata_links');
            }
          }
          
          // كشف مشاكل في أسماء الملفات والأصول
          if (filePath.includes('assets/') && !filePath.match(/icon|logo|banner/)) {
            issues.push('missing_marketing_assets');
          }
          
          // كشف نقص في الكلمات المفتاحية
          if (content.includes('keywords') && content.split(',').length < 8) {
            issues.push('insufficient_keywords');
          }
          
          // كشف مشاكل في الأيقونات
          if (filePath.includes('android/app/src/main/res/') && !content.includes('adaptive-icon')) {
            issues.push('non_adaptive_icons');
          }
          
          // كشف نقص في الوصف متعدد اللغات
          if (filePath.includes('ios/') && !filePath.includes('InfoPlist.strings')) {
            issues.push('missing_localized_descriptions');
          }
          
          // كشف مشاكل في صور المتجر
          if (filePath.includes('store_assets') && !filePath.match(/screenshot|feature/)) {
            issues.push('missing_store_screenshots');
          }
          
          return issues;
        })()
      appType: >
        (() => {
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          if (filePath.includes('الكود الخاص بتطبيق البائع')) return 'seller';
          if (filePath.includes('الكود الخاص بتطبيق التوصيل')) return 'delivery';
          if (filePath.includes('الكود الخاص بتطبيق العميل')) return 'customer';
          if (filePath.includes('الكود الخاص بتطبيق صاحب التطبيق')) return 'admin';
          return 'shared';
        })()
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.path && (
          edit.path.includes('pubspec.yaml') ||
          edit.path.includes('android/app/') ||
          edit.path.includes('ios/') ||
          edit.path.includes('assets/') ||
          edit.path.includes('store_assets/') ||
          edit.path.includes('metadata/') ||
          edit.content.includes('description') ||
          edit.content.includes('keywords') ||
          edit.content.includes('version')
        )
      )
    then:
      - action: prompt
        message: >
          🚀 **محسن متاجر التطبيقات ASO مُفعّل!**
          
          📱 **التطبيق:** {{context.appType}}
          
          ⚠️ **مشاكل ASO المكتشفة:**
          {{context.detectedASOIssues.length === 0 ? 
            '✅ لم يتم اكتشاف مشاكل ASO واضحة' : 
            context.detectedASOIssues.map(issue => {
              const issueMessages = {
                'app_description_length_issues': '📝 طول الوصف غير مناسب - يجب 50-200 حرف',
                'missing_metadata_links': '🔗 روابط الميتاداتا مفقودة (homepage, repository)',
                'missing_marketing_assets': '🎨 أصول التسويق مفقودة (أيقونات، بانرات)',
                'insufficient_keywords': '🔍 كلمات مفتاحية قليلة - يُنصح بـ 8+ كلمات',
                'non_adaptive_icons': '📱 أيقونات Android غير متكيفة',
                'missing_localized_descriptions': '🌍 الأوصاف متعددة اللغات مفقودة',
                'missing_store_screenshots': '📸 لقطات شاشة المتجر مفقودة'
              };
              return issueMessages[issue] || `⚠️ ${issue}`;
            }).join('\n')
          }}
          
          📊 **مقاييس ASO الحالية:**
          - ترتيب التطبيق: #{{context.asoMetrics.currentRanking}}
          - معدل التحميل: {{context.asoMetrics.downloadRate}}/يوم
          - معدل التحويل: {{context.asoMetrics.conversionRate}}%
          - تقييم المستخدمين: {{context.asoMetrics.reviewRating}}/5
          - الاحتفاظ بالمستخدمين: {{context.asoMetrics.userRetention}}%
          
          🎯 **مستويات تحسين ASO المتاحة:**
          
          **🚀 النظام الشامل لتحسين ASO (مستحسن)**
          - تحليل منافسين مع AI
          - تحسين الكلمات المفتاحية تلقائياً
          - إنشاء أصول تسويقية ذكية
          - تحسين الأوصاف متعددة اللغات
          - مراقبة الأداء والترتيب
          
          **⚡ التحسين السريع**
          - إصلاح المشاكل المكتشفة فوراً
          - تحسين أساسي للميتاداتا
          
          **📊 تحليل ASO فقط**
          - تقرير مفصل بدون تعديل
          
          ماذا تختار؟
        choices:
          - label: "🚀 النظام الشامل لتحسين ASO + الذكاء الاصطناعي"
            value: "comprehensive_aso_optimization"
          - label: "⚡ التحسين السريع للمشاكل المكتشفة"
            value: "quick_aso_fixes"
          - label: "📊 تحليل مفصل لـ ASO بدون تعديل"
            value: "detailed_aso_analysis"
          - label: "🔍 تحسين الكلمات المفتاحية بالذكاء الاصطناعي"
            value: "ai_keyword_optimization"
          - label: "🎨 إنشاء أصول تسويقية متقدمة"
            value: "create_marketing_assets"
          - label: "🌍 تحسين متعدد اللغات والأسواق"
            value: "multilingual_market_optimization"
          - label: "📈 إعداد مراقبة وتحليل ASO"
            value: "aso_monitoring_setup"
          - label: "⏭️ تجاهل هذه المرة"
            value: "skip_aso_optimization"
        next_actions:
          comprehensive_aso_optimization:
            - action: ai_command
              command: >
                🚀 **تفعيل النظام الشامل لتحسين ASO**
                
                المشاكل المكتشفة: {{context.detectedASOIssues.join(', ')}}
                نوع التطبيق: {{context.appType}}
                
                سأقوم بإنشاء نظام ASO شامل ومتقدم
          quick_aso_fixes:
            - action: ai_command
              command: >
                ⚡ **إصلاح سريع لمشاكل ASO**
                
                سأقوم بإصلاح المشاكل الأساسية فوراً
          skip_aso_optimization:
            - action: no_op
              message: "تم تجاهل تحسين ASO. يُنصح بتطبيقه لتحسين ظهور التطبيق في المتاجر."

  # قاعدة إعداد الإصدارات المتقدمة
  - id: intelligent-release-management
    description: "نظام إدارة إصدارات ذكي ومتقدم مع تحكم كامل في دورة حياة التطبيق"
    context:
      releaseMetrics:
        currentVersion: "2.1.3"
        buildNumber: 45
        releaseFrequency: "bi-weekly"
        hotfixRate: 8
        rollbackRate: 2
        userAdoptionRate: 85
        criticalBugRate: 3
        releaseStability: 94
      detectedReleaseIssues: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          const issues = [];
          
          // كشف مشاكل في إدارة الإصدارات
          if (filePath.includes('pubspec.yaml')) {
            if (content.includes('version:') && !content.match(/version:\s*\d+\.\d+\.\d+\+\d+/)) {
              issues.push('invalid_version_format');
            }
            if (content.includes('version:') && !content.includes('build:')) {
              issues.push('missing_build_number');
            }
          }
          
          // كشف عدم وجود changelog
          if (filePath.includes('CHANGELOG') && content.length < 100) {
            issues.push('insufficient_changelog');
          }
          
          // كشف عدم وجود release notes
          if (filePath.includes('release') && !filePath.includes('notes')) {
            issues.push('missing_release_notes');
          }
          
          // كشف مشاكل في إعدادات البناء
          if (filePath.includes('android/app/build.gradle')) {
            if (!content.includes('signingConfigs') || !content.includes('buildTypes')) {
              issues.push('incomplete_build_configuration');
            }
          }
          
          // كشف مشاكل في إعدادات iOS
          if (filePath.includes('ios/Runner/Info.plist')) {
            if (!content.includes('CFBundleVersion') || !content.includes('CFBundleShortVersionString')) {
              issues.push('missing_ios_version_info');
            }
          }
          
          // كشف عدم وجود إعدادات التوقيع
          if (filePath.includes('android/') && !content.includes('keystore') && !content.includes('signing')) {
            issues.push('missing_signing_configuration');
          }
          
          return issues;
        })()
      appType: >
        (() => {
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          if (filePath.includes('الكود الخاص بتطبيق البائع')) return 'seller';
          if (filePath.includes('الكود الخاص بتطبيق التوصيل')) return 'delivery';
          if (filePath.includes('الكود الخاص بتطبيق العميل')) return 'customer';
          if (filePath.includes('الكود الخاص بتطبيق صاحب التطبيق')) return 'admin';
          return 'shared';
        })()
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.path && (
          edit.path.includes('pubspec.yaml') ||
          edit.path.includes('CHANGELOG') ||
          edit.path.includes('release') ||
          edit.path.includes('version') ||
          edit.path.includes('android/app/build.gradle') ||
          edit.path.includes('ios/Runner/Info.plist') ||
          edit.path.includes('android/key.properties') ||
          edit.content.includes('version:') ||
          edit.content.includes('buildNumber') ||
          edit.content.includes('versionName')
        )
      )
    then:
      - action: prompt
        message: >
          🚀 **نظام إدارة الإصدارات الذكي مُفعّل!**
          
          📱 **التطبيق:** {{context.appType}}
          
          ⚠️ **مشاكل إدارة الإصدارات المكتشفة:**
          {{context.detectedReleaseIssues.length === 0 ? 
            '✅ لم يتم اكتشاف مشاكل إدارة إصدارات واضحة' : 
            context.detectedReleaseIssues.map(issue => {
              const issueMessages = {
                'invalid_version_format': '🔢 تنسيق رقم الإصدار غير صحيح - يجب x.y.z+build',
                'missing_build_number': '🏗️ رقم البناء مفقود - ضروري لتتبع الإصدارات',
                'insufficient_changelog': '📝 سجل التغييرات غير مكتمل أو مفقود',
                'missing_release_notes': '📋 ملاحظات الإصدار مفقودة',
                'incomplete_build_configuration': '⚙️ إعدادات البناء غير مكتملة',
                'missing_ios_version_info': '🍎 معلومات الإصدار لـ iOS مفقودة',
                'missing_signing_configuration': '🔐 إعدادات التوقيع مفقودة'
              };
              return issueMessages[issue] || `⚠️ ${issue}`;
            }).join('\n')
          }}
          
          📊 **مقاييس الإصدارات الحالية:**
          - الإصدار الحالي: {{context.releaseMetrics.currentVersion}}
          - رقم البناء: {{context.releaseMetrics.buildNumber}}
          - تكرار الإصدارات: {{context.releaseMetrics.releaseFrequency}}
          - معدل الاستقرار: {{context.releaseMetrics.releaseStability}}%
          - معدل اعتماد المستخدمين: {{context.releaseMetrics.userAdoptionRate}}%
          
          🎯 **مستويات إدارة الإصدارات المتاحة:**
          
          **🚀 النظام الشامل لإدارة الإصدارات (مستحسن)**
          - إعداد نظام إصدارات تلقائي
          - إدارة changelog وrelease notes ذكية
          - تكوين البناء والتوقيع الآمن
          - نظام rollback وhotfix متقدم
          - مراقبة أداء الإصدارات
          
          **⚡ إعداد الإصدارات السريع**
          - إصلاح مشاكل الإصدار الأساسية
          - تكوين أرقام الإصدارات
          
          **📊 تحليل الإصدارات فقط**
          - تقرير مفصل بدون تعديل
          
          ماذا تختار؟
        choices:
          - label: "🚀 النظام الشامل لإدارة الإصدارات + الأتمتة"
            value: "comprehensive_release_management"
          - label: "⚡ إعداد سريع لمشاكل الإصدارات"
            value: "quick_release_setup"
          - label: "📊 تحليل مفصل للإصدارات بدون تعديل"
            value: "detailed_release_analysis"
          - label: "🔢 إعداد نظام أرقام الإصدارات التلقائي"
            value: "automated_versioning_system"
          - label: "📝 إنشاء changelog وrelease notes ذكي"
            value: "intelligent_changelog_generation"
          - label: "🔐 تكوين التوقيع والأمان للإصدارات"
            value: "secure_signing_configuration"
          - label: "📈 إعداد مراقبة وتحليل الإصدارات"
            value: "release_monitoring_setup"
          - label: "⏭️ تجاهل هذه المرة"
            value: "skip_release_management"
        next_actions:
          comprehensive_release_management:
            - action: ai_command
              command: >
                🚀 **تفعيل النظام الشامل لإدارة الإصدارات**
                
                المشاكل المكتشفة: {{context.detectedReleaseIssues.join(', ')}}
                نوع التطبيق: {{context.appType}}
                الإصدار الحالي: {{context.releaseMetrics.currentVersion}}
                
                سأقوم بإنشاء نظام إدارة إصدارات شامل ومتقدم:
                
                **1. إنشاء CodoraReleaseManager:**
                ```dart
                class CodoraReleaseManager {
                  // إدارة أرقام الإصدارات التلقائية
                  static Future<String> generateNextVersion({
                    required VersionType type,
                    String? currentVersion,
                  }) async {
                    final current = currentVersion ?? await _getCurrentVersion();
                    final semver = Version.parse(current);
                    
                    switch (type) {
                      case VersionType.major:
                        return '${semver.major + 1}.0.0';
                      case VersionType.minor:
                        return '${semver.major}.${semver.minor + 1}.0';
                      case VersionType.patch:
                        return '${semver.major}.${semver.minor}.${semver.patch + 1}';
                      case VersionType.hotfix:
                        return '${semver.major}.${semver.minor}.${semver.patch + 1}-hotfix';
                    }
                  }
                  
                  // إنشاء release notes تلقائي
                  static Future<String> generateReleaseNotes(String version) async {
                    final commits = await _getCommitsSinceLastRelease();
                    final categorizedChanges = _categorizeChanges(commits);
                    
                    final releaseNotes = StringBuffer();
                    releaseNotes.writeln('# Release $version');
                    releaseNotes.writeln();
                    
                    if (categorizedChanges.features.isNotEmpty) {
                      releaseNotes.writeln('## ✨ New Features');
                      for (final feature in categorizedChanges.features) {
                        releaseNotes.writeln('- $feature');
                      }
                      releaseNotes.writeln();
                    }
                    
                    if (categorizedChanges.bugFixes.isNotEmpty) {
                      releaseNotes.writeln('## 🐛 Bug Fixes');
                      for (final fix in categorizedChanges.bugFixes) {
                        releaseNotes.writeln('- $fix');
                      }
                      releaseNotes.writeln();
                    }
                    
                    if (categorizedChanges.improvements.isNotEmpty) {
                      releaseNotes.writeln('## 🚀 Improvements');
                      for (final improvement in categorizedChanges.improvements) {
                        releaseNotes.writeln('- $improvement');
                      }
                    }
                    
                    return releaseNotes.toString();
                  }
                  
                  // إدارة الإصدارات المرحلية
                  static Future<void> createStagedRelease(String version) async {
                    // إصدار beta للمختبرين
                    await _createBetaRelease('$version-beta');
                    
                    // انتظار فترة اختبار
                    await _waitForBetaFeedback(duration: Duration(days: 3));
                    
                    // إصدار للمجموعة المحدودة
                    await _createStagedRollout(version, percentage: 10);
                    
                    // مراقبة المقاييس
                    final metrics = await _monitorReleaseMetrics(version);
                    
                    if (metrics.isStable) {
                      // إصدار كامل
                      await _createFullRelease(version);
                    } else {
                      // rollback
                      await _rollbackRelease(version);
                    }
                  }
                }
                ```
                
                **المرحلة 2: تطبيق نظام الإدارة المتقدم** 🛠️
                
                سأقوم بإعداد نظام إدارة إصدارات متكامل لتطبيق {{context.appType}}
          quick_release_setup:
            - action: ai_command
              command: >
                ⚡ **إعداد سريع لمشاكل الإصدارات**
                
                سأقوم بإصلاح مشاكل إدارة الإصدارات الأساسية فوراً
          skip_release_management:
            - action: no_op
              message: "تم تجاهل إدارة الإصدارات. يُنصح بإعدادها لضمان نشر آمن ومنظم للتطبيق."

  # قاعدة CI/CD التلقائي المتقدمة
  - id: intelligent-cicd-automation
    description: "نظام CI/CD ذكي ومتقدم للبناء والنشر التلقائي مع مراقبة شاملة"
    context:
      cicdMetrics:
        buildSuccessRate: 92
        deploymentFrequency: "daily"
        leadTime: 45
        mttr: 15
        changeFailureRate: 5
        pipelineExecutionTime: 12
        automationCoverage: 88
        testPassRate: 94
      detectedCICDIssues: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          const issues = [];
          
          // كشف عدم وجود ملفات CI/CD
          if (!filePath.includes('.github/workflows') && !filePath.includes('.gitlab-ci') && !filePath.includes('codemagic.yaml')) {
            issues.push('missing_cicd_configuration');
          }
          
          // كشف مشاكل في workflow GitHub Actions
          if (filePath.includes('.github/workflows') && content.includes('flutter') && !content.includes('test')) {
            issues.push('missing_automated_tests_in_pipeline');
          }
          
          // كشف عدم وجود إعدادات البناء للمنصات المختلفة
          if (filePath.includes('workflow') && !content.includes('android') && !content.includes('ios')) {
            issues.push('incomplete_platform_builds');
          }
          
          // كشف عدم وجود إدارة الأسرار
          if (filePath.includes('workflow') && content.includes('password') && !content.includes('secrets.')) {
            issues.push('hardcoded_secrets');
          }
          
          // كشف عدم وجود إعدادات النشر التلقائي
          if (filePath.includes('workflow') && !content.includes('deploy') && !content.includes('release')) {
            issues.push('missing_automated_deployment');
          }
          
          // كشف عدم وجود مراقبة الجودة
          if (filePath.includes('workflow') && !content.includes('analysis') && !content.includes('lint')) {
            issues.push('missing_quality_gates');
          }
          
          return issues;
        })()
      appType: >
        (() => {
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          if (filePath.includes('الكود الخاص بتطبيق البائع')) return 'seller';
          if (filePath.includes('الكود الخاص بتطبيق التوصيل')) return 'delivery';
          if (filePath.includes('الكود الخاص بتطبيق العميل')) return 'customer';
          if (filePath.includes('الكود الخاص بتطبيق صاحب التطبيق')) return 'admin';
          return 'shared';
        })()
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.path && (
          edit.path.includes('.github/workflows') ||
          edit.path.includes('.gitlab-ci') ||
          edit.path.includes('codemagic.yaml') ||
          edit.path.includes('azure-pipelines') ||
          edit.path.includes('Jenkinsfile') ||
          edit.path.includes('bitrise') ||
          edit.content.includes('workflow') ||
          edit.content.includes('pipeline') ||
          edit.content.includes('deploy') ||
          edit.content.includes('build')
        )
      )
    then:
      - action: prompt
        message: >
          🔄 **نظام CI/CD الذكي مُفعّل!**
          
          📱 **التطبيق:** {{context.appType}}
          
          ⚠️ **مشاكل CI/CD المكتشفة:**
          {{context.detectedCICDIssues.length === 0 ? 
            '✅ لم يتم اكتشاف مشاكل CI/CD واضحة' : 
            context.detectedCICDIssues.map(issue => {
              const issueMessages = {
                'missing_cicd_configuration': '⚙️ ملفات CI/CD مفقودة - لا يوجد أتمتة',
                'missing_automated_tests_in_pipeline': '🧪 الاختبارات التلقائية مفقودة من pipeline',
                'incomplete_platform_builds': '📱 إعدادات البناء للمنصات المختلفة غير مكتملة',
                'hardcoded_secrets': '🔐 أسرار مكتوبة مباشرة - مخاطر أمنية',
                'missing_automated_deployment': '🚀 النشر التلقائي مفقود',
                'missing_quality_gates': '🎯 بوابات الجودة والتحليل مفقودة'
              };
              return issueMessages[issue] || `⚠️ ${issue}`;
            }).join('\n')
          }}
          
          📊 **مقاييس CI/CD الحالية:**
          - معدل نجاح البناء: {{context.cicdMetrics.buildSuccessRate}}%
          - تكرار النشر: {{context.cicdMetrics.deploymentFrequency}}
          - وقت التنفيذ: {{context.cicdMetrics.pipelineExecutionTime}} دقيقة
          - تغطية الأتمتة: {{context.cicdMetrics.automationCoverage}}%
          - معدل نجاح الاختبارات: {{context.cicdMetrics.testPassRate}}%
          
          🎯 **مستويات CI/CD المتاحة:**
          
          **🔄 النظام الشامل للـ CI/CD (مستحسن)**
          - إعداد pipeline متكامل ومتقدم
          - بناء ونشر تلقائي للمنصات المختلفة
          - اختبارات شاملة وبوابات جودة
          - إدارة آمنة للأسرار والمفاتيح
          - مراقبة وتنبيهات متقدمة
          
          **⚡ إعداد CI/CD سريع**
          - pipeline أساسي للبناء والاختبار
          - إعدادات نشر بسيطة
          
          **📊 تحليل CI/CD فقط**
          - تقرير مفصل بدون إعداد
          
          ماذا تختار؟
        choices:
          - label: "🔄 النظام الشامل للـ CI/CD + الأتمتة المتقدمة"
            value: "comprehensive_cicd_setup"
          - label: "⚡ إعداد CI/CD سريع للأساسيات"
            value: "quick_cicd_setup"
          - label: "📊 تحليل مفصل للـ CI/CD بدون إعداد"
            value: "detailed_cicd_analysis"
          - label: "🧪 إعداد pipeline الاختبارات المتقدم"
            value: "advanced_testing_pipeline"
          - label: "🚀 إعداد النشر التلقائي للمتاجر"
            value: "automated_store_deployment"
          - label: "🔐 تكوين إدارة الأسرار والأمان"
            value: "security_secrets_management"
          - label: "📈 إعداد مراقبة وتحليل CI/CD"
            value: "cicd_monitoring_setup"
          - label: "⏭️ تجاهل هذه المرة"
            value: "skip_cicd_setup"
        next_actions:
          comprehensive_cicd_setup:
            - action: ai_command
              command: >
                🔄 **تفعيل النظام الشامل للـ CI/CD**
                
                المشاكل المكتشفة: {{context.detectedCICDIssues.join(', ')}}
                نوع التطبيق: {{context.appType}}
                
                سأقوم بإنشاء نظام CI/CD شامل ومتقدم:
                
                **1. إنشاء GitHub Actions Workflow:**
                ```yaml
                name: Codora {{context.appType}} CI/CD
                
                on:
                  push:
                    branches: [ main, develop ]
                  pull_request:
                    branches: [ main ]
                  release:
                    types: [ published ]
                
                jobs:
                  analyze:
                    runs-on: ubuntu-latest
                    steps:
                      - uses: actions/checkout@v3
                      - uses: subosito/flutter-action@v2
                      - run: flutter analyze
                      - run: flutter test --coverage
                      - uses: codecov/codecov-action@v3
                  
                  build-android:
                    needs: analyze
                    runs-on: ubuntu-latest
                    steps:
                      - uses: actions/checkout@v3
                      - uses: subosito/flutter-action@v2
                      - run: flutter build apk --release
                      - run: flutter build appbundle --release
                      - uses: actions/upload-artifact@v3
                        with:
                          name: android-artifacts
                          path: build/app/outputs/
                  
                  build-ios:
                    needs: analyze
                    runs-on: macos-latest
                    steps:
                      - uses: actions/checkout@v3
                      - uses: subosito/flutter-action@v2
                      - run: flutter build ios --release --no-codesign
                      - uses: actions/upload-artifact@v3
                        with:
                          name: ios-artifacts
                          path: build/ios/iphoneos/
                  
                  deploy-staging:
                    if: github.ref == 'refs/heads/develop'
                    needs: [build-android, build-ios]
                    runs-on: ubuntu-latest
                    steps:
                      - name: Deploy to Firebase App Distribution
                        uses: wzieba/Firebase-Distribution-Github-Action@v1
                        with:
                          appId: ${{ secrets.FIREBASE_APP_ID }}
                          token: ${{ secrets.FIREBASE_TOKEN }}
                  
                  deploy-production:
                    if: github.event_name == 'release'
                    needs: [build-android, build-ios]
                    runs-on: ubuntu-latest
                    steps:
                      - name: Deploy to Google Play
                        uses: r0adkll/upload-google-play@v1
                        with:
                          serviceAccountJsonPlainText: ${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT }}
                          packageName: com.codora.{{context.appType}}
                          releaseFiles: build/app/outputs/bundle/release/app-release.aab
                ```
                
                **المرحلة 2: تطبيق نظام CI/CD متكامل** 🛠️
                
                سأقوم بإعداد pipeline شامل لتطبيق {{context.appType}}
          quick_cicd_setup:
            - action: ai_command
              command: >
                ⚡ **إعداد CI/CD سريع**
                
                سأقوم بإنشاء pipeline أساسي للبناء والاختبار
          skip_cicd_setup:
            - action: no_op
              message: "تم تجاهل إعداد CI/CD. يُنصح بشدة بإعداده لضمان جودة وأتمتة التطوير."

  # قاعدة إدارة المكتبات الذكية
  - id: intelligent-dependency-management
    description: "نظام إدارة ذكي للمكتبات والتبعيات لتجنب التكرار وتحسين الأداء"
    context:
      dependencyMetrics:
        totalDependencies: 35
        directDependencies: 28
        devDependencies: 7
        outdatedDependencies: 5
        duplicateFunctionalities: 3
        appSizeImpact: "12.5MB"
        unusedDependencies: 2
        securityVulnerabilities: 1
      existingDependencies: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          
          // استخراج المكتبات الموجودة من pubspec.yaml
          const dependencies = [];
          if (filePath.includes('pubspec.yaml')) {
            const lines = content.split('\n');
            let inDependenciesSection = false;
            
            for (const line of lines) {
              if (line.trim() === 'dependencies:') {
                inDependenciesSection = true;
                continue;
              }
              if (line.trim() === 'dev_dependencies:' || line.trim() === 'dependency_overrides:') {
                inDependenciesSection = false;
                continue;
              }
              if (inDependenciesSection && line.trim() && !line.startsWith('#')) {
                const match = line.match(/^\s*([a-zA-Z0-9_]+):/);
                if (match) {
                  dependencies.push(match[1]);
                }
              }
            }
          }
          
          return dependencies;
        })()
      detectedDependencyIssues: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          const issues = [];
          
          // كشف محاولة إضافة مكتبة جديدة
          if (filePath.includes('pubspec.yaml') && content.includes('dependencies:')) {
            const newDeps = content.match(/^\s*[a-zA-Z0-9_]+:\s*[\^~]?\d+\.\d+\.\d+/gm);
            if (newDeps && newDeps.length > 0) {
              issues.push('new_dependency_detected');
            }
          }
          
          // كشف استيراد مكتبات جديدة في الكود
          if (content.includes('import \'package:') && !content.includes('import \'package:flutter/')) {
            const imports = content.match(/import\s+['"]package:([^\/]+)/g);
            if (imports) {
              issues.push('new_package_import_detected');
            }
          }
          
          // كشف مكتبات قديمة أو مهجورة
          if (content.includes('url_launcher: ^5') || content.includes('http: ^0.12')) {
            issues.push('outdated_dependencies_detected');
          }
          
          // كشف وظائف مكررة
          if ((content.includes('http') && content.includes('dio')) || 
              (content.includes('shared_preferences') && content.includes('hive'))) {
            issues.push('duplicate_functionality_detected');
          }
          
          // كشف مكتبات غير مستخدمة
          if (filePath.includes('pubspec.yaml') && !content.includes('# Used in:')) {
            issues.push('potentially_unused_dependencies');
          }
          
          // كشف مكتبات ثقيلة غير ضرورية
          if (content.includes('firebase_core') && !content.includes('firebase_')) {
            issues.push('heavy_dependency_detected');
          }
          
          return issues;
        })()
      suggestedAlternatives: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const alternatives = {};
          
          // اقتراح بدائل من المكتبات الموجودة
          if (content.includes('http') && content.includes('networking')) {
            alternatives['dio'] = 'استخدم http الموجودة بدلاً من dio للطلبات البسيطة';
          }
          if (content.includes('shared_preferences') && content.includes('storage')) {
            alternatives['hive'] = 'استخدم shared_preferences الموجودة للبيانات البسيطة';
          }
          if (content.includes('get') && content.includes('state')) {
            alternatives['provider'] = 'استخدم GetX الموجود لإدارة الحالة';
          }
          
          return alternatives;
        })()
      appType: >
        (() => {
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          if (filePath.includes('الكود الخاص بتطبيق البائع')) return 'seller';
          if (filePath.includes('الكود الخاص بتطبيق التوصيل')) return 'delivery';
          if (filePath.includes('الكود الخاص بتطبيق العميل')) return 'customer';
          if (filePath.includes('الكود الخاص بتطبيق صاحب التطبيق')) return 'admin';
          return 'shared';
        })()
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        (edit.path && edit.path.includes('pubspec.yaml')) ||
        (edit.content && (
          edit.content.includes('dependencies:') ||
          edit.content.includes('import \'package:') ||
          edit.content.includes('flutter pub add') ||
          edit.content.includes('flutter pub get') ||
          edit.content.match(/^\s*[a-zA-Z0-9_]+:\s*[\^~]?\d+\.\d+\.\d+/)
        ))
      )
    then:
      - action: prompt
        message: >
          📦 **مدير المكتبات الذكي مُفعّل!**
          
          📱 **التطبيق:** {{context.appType}}
          
          📋 **المكتبات الموجودة حالياً:**
          {{context.existingDependencies.length > 0 ? 
            context.existingDependencies.map(dep => `📦 ${dep}`).join('\n') : 
            '📦 لم يتم العثور على مكتبات في السياق الحالي'
          }}
          
          ⚠️ **مشاكل إدارة المكتبات المكتشفة:**
          {{context.detectedDependencyIssues.length === 0 ? 
            '✅ لم يتم اكتشاف مشاكل إدارة مكتبات واضحة' : 
            context.detectedDependencyIssues.map(issue => {
              const issueMessages = {
                'new_dependency_detected': '🆕 مكتبة جديدة مكتشفة - تحتاج مراجعة',
                'new_package_import_detected': '📥 استيراد مكتبة جديدة - تحقق من الضرورة',
                'outdated_dependencies_detected': '⏳ مكتبات قديمة مكتشفة - تحتاج تحديث',
                'duplicate_functionality_detected': '🔄 وظائف مكررة - يمكن تجميعها',
                'potentially_unused_dependencies': '🗑️ مكتبات محتملة غير مستخدمة',
                'heavy_dependency_detected': '⚖️ مكتبة ثقيلة مكتشفة - تأثير على الحجم'
              };
              return issueMessages[issue] || `⚠️ ${issue}`;
            }).join('\n')
          }}
          
          💡 **البدائل المقترحة من المكتبات الموجودة:**
          {{Object.keys(context.suggestedAlternatives).length > 0 ? 
            Object.entries(context.suggestedAlternatives).map(([key, value]) => `🔄 ${key}: ${value}`).join('\n') : 
            '✨ لا توجد بدائل مقترحة - المكتبة قد تكون ضرورية'
          }}
          
          📊 **إحصائيات المكتبات الحالية:**
          - إجمالي المكتبات: {{context.dependencyMetrics.totalDependencies}}
          - المكتبات المباشرة: {{context.dependencyMetrics.directDependencies}}
          - مكتبات التطوير: {{context.dependencyMetrics.devDependencies}}
          - المكتبات القديمة: {{context.dependencyMetrics.outdatedDependencies}}
          - تأثير الحجم: {{context.dependencyMetrics.appSizeImpact}}
          
          🎯 **مستويات إدارة المكتبات المتاحة:**
          
          **📦 النظام الشامل لإدارة المكتبات (مستحسن)**
          - مراجعة شاملة للمكتبات الموجودة
          - اقتراح بدائل من المكتبات الحالية
          - تحليل الضرورة والتأثير على الحجم
          - تحديث المكتبات القديمة
          - إزالة المكتبات غير المستخدمة
          
          **🔍 فحص المكتبات الموجودة فقط**
          - البحث عن بدائل في المكتبات الحالية
          - تحليل إمكانية استخدام الموجود
          
          **⚠️ طلب إذن لإضافة مكتبة جديدة**
          - عرض تبرير الحاجة للمكتبة الجديدة
          - تحليل التأثير على الحجم والأداء
          
          ماذا تختار؟
        choices:
          - label: "📦 النظام الشامل لإدارة المكتبات + التحسين"
            value: "comprehensive_dependency_management"
          - label: "🔍 فحص المكتبات الموجودة واقتراح البدائل"
            value: "analyze_existing_dependencies"
          - label: "⚠️ طلب إذن لإضافة مكتبة جديدة"
            value: "request_new_dependency_permission"
          - label: "🧹 تنظيف وتحديث المكتبات الموجودة"
            value: "cleanup_update_dependencies"
          - label: "📊 تحليل تأثير المكتبات على الحجم والأداء"
            value: "analyze_dependency_impact"
          - label: "🔄 البحث عن بدائل أخف وأفضل"
            value: "find_lightweight_alternatives"
          - label: "📋 إنشاء قائمة المكتبات المعتمدة"
            value: "create_approved_dependencies_list"
          - label: "⏭️ تجاهل هذه المرة"
            value: "skip_dependency_management"
        next_actions:
          comprehensive_dependency_management:
            - action: ai_command
              command: >
                📦 **تفعيل النظام الشامل لإدارة المكتبات**
                
                **المرحلة 1: تحليل المكتبات الحالية** 🔍
                
                المكتبات الموجودة: {{context.existingDependencies.join(', ')}}
                المشاكل المكتشفة: {{context.detectedDependencyIssues.join(', ')}}
                نوع التطبيق: {{context.appType}}
                
                سأقوم بإنشاء نظام إدارة مكتبات شامل:
                
                **1. إنشاء CodoraDependencyManager:**
                ```dart
                class CodoraDependencyManager {
                  // قائمة المكتبات المعتمدة لكل تطبيق
                  static const Map<String, List<String>> approvedDependencies = {
                    'seller': [
                      'get', 'firebase_core', 'cloud_firestore', 'image_picker',
                      'cached_network_image', 'permission_handler', 'dio'
                    ],
                    'customer': [
                      'get', 'firebase_core', 'cloud_firestore', 'geolocator',
                      'google_maps_flutter', 'cached_network_image', 'dio'
                    ],
                    'delivery': [
                      'get', 'firebase_core', 'cloud_firestore', 'geolocator',
                      'google_maps_flutter', 'background_location', 'dio'
                    ],
                    'admin': [
                      'get', 'firebase_core', 'cloud_firestore', 'charts_flutter',
                      'excel', 'path_provider', 'dio'
                    ],
                  };
                  
                  // فحص المكتبات الموجودة للبحث عن بدائل
                  static Future<List<String>> findExistingAlternatives(String requestedPackage) async {
                    final alternatives = <String>[];
                    final existingDeps = {{context.existingDependencies}};
                    
                    // خريطة البدائل
                    final alternativeMap = {
                      'dio': ['http'],
                      'hive': ['shared_preferences'],
                      'provider': ['get'],
                      'bloc': ['get'],
                      'sqflite': ['hive', 'shared_preferences'],
                      'flutter_secure_storage': ['shared_preferences'],
                      'connectivity': ['connectivity_plus'],
                      'url_launcher': ['url_launcher_web', 'url_launcher_android'],
                    };
                    
                    if (alternativeMap.containsKey(requestedPackage)) {
                      for (final alt in alternativeMap[requestedPackage]!) {
                        if (existingDeps.contains(alt)) {
                          alternatives.add(alt);
                        }
                      }
                    }
                    
                    return alternatives;
                  }
                  
                  // تحليل تأثير المكتبة على حجم التطبيق
                  static Future<DependencyImpact> analyzeDependencyImpact(String packageName) async {
                    final impactMap = {
                      'firebase_core': DependencyImpact(sizeKB: 2500, necessity: 'high'),
                      'google_maps_flutter': DependencyImpact(sizeKB: 15000, necessity: 'medium'),
                      'video_player': DependencyImpact(sizeKB: 8000, necessity: 'low'),
                      'camera': DependencyImpact(sizeKB: 3500, necessity: 'medium'),
                      'dio': DependencyImpact(sizeKB: 800, necessity: 'medium'),
                      'get': DependencyImpact(sizeKB: 500, necessity: 'high'),
                    };
                    
                    return impactMap[packageName] ?? 
                           DependencyImpact(sizeKB: 1000, necessity: 'unknown');
                  }
                  
                  // اقتراح مكتبة من القائمة المعتمدة
                  static String? suggestApprovedAlternative(String requestedPackage, String appType) {
                    final approved = approvedDependencies[appType] ?? [];
                    
                    final suggestions = {
                      'http_client': approved.contains('dio') ? 'dio' : null,
                      'state_management': approved.contains('get') ? 'get' : null,
                      'storage': approved.contains('shared_preferences') ? 'shared_preferences' : null,
                      'image_loading': approved.contains('cached_network_image') ? 'cached_network_image' : null,
                    };
                    
                    return suggestions[_categorizePackage(requestedPackage)];
                  }
                  
                  // طلب إذن لإضافة مكتبة جديدة
                  static Future<bool> requestDependencyPermission({
                    required String packageName,
                    required String purpose,
                    required String appType,
                  }) async {
                    final impact = await analyzeDependencyImpact(packageName);
                    final alternatives = await findExistingAlternatives(packageName);
                    
                    print('''
                    🚨 طلب إذن لإضافة مكتبة جديدة:
                    
                    📦 اسم المكتبة: $packageName
                    🎯 الغرض: $purpose  
                    📱 التطبيق: $appType
                    ⚖️ تأثير الحجم: ${impact.sizeKB}KB
                    🔍 البدائل الموجودة: ${alternatives.join(', ')}
                    
                    هل تريد المتابعة؟ (y/n)
                    ''');
                    
                    // في البيئة الحقيقية، سيكون هذا prompt للمستخدم
                    return false; // يتطلب إذن صريح
                  }
                }
                
                class DependencyImpact {
                  final int sizeKB;
                  final String necessity;
                  
                  DependencyImpact({required this.sizeKB, required this.necessity});
                }
                ```
                
                **2. نظام مراجعة المكتبات التلقائي:**
                ```dart
                class DependencyReviewSystem {
                  // مراجعة شاملة للمكتبات
                  static Future<DependencyReport> reviewAllDependencies() async {
                    final pubspec = await _readPubspecFile();
                    final usageAnalysis = await _analyzePackageUsage();
                    final securityScan = await _scanSecurityVulnerabilities();
                    
                    return DependencyReport(
                      totalDependencies: pubspec.dependencies.length,
                      unusedDependencies: usageAnalysis.unused,
                      outdatedDependencies: await _findOutdatedDependencies(),
                      securityIssues: securityScan.vulnerabilities,
                      recommendations: _generateRecommendations(),
                    );
                  }
                  
                  // اقتراح تبديل المكتبات
                  static List<DependencySwapSuggestion> suggestDependencySwaps() {
                    return [
                      DependencySwapSuggestion(
                        from: 'http',
                        to: 'dio',
                        reason: 'ميزات متقدمة وأداء أفضل',
                        impact: 'تحسين +15% في الأداء'
                      ),
                      DependencySwapSuggestion(
                        from: 'shared_preferences',
                        to: 'hive',
                        reason: 'أداء أسرع للبيانات الكبيرة',
                        impact: 'تحسين +40% في سرعة القراءة/الكتابة'
                      ),
                    ];
                  }
                  
                  // تنظيف المكتبات غير المستخدمة
                  static Future<List<String>> cleanupUnusedDependencies() async {
                    final unusedDeps = await _findUnusedDependencies();
                    final cleanupResults = <String>[];
                    
                    for (final dep in unusedDeps) {
                      if (await _confirmRemoval(dep)) {
                        await _removeDependency(dep);
                        cleanupResults.add(dep);
                      }
                    }
                    
                    return cleanupResults;
                  }
                }
                ```
                
                **المرحلة 2: تطبيق نظام الإدارة الذكي** 🛠️
                
                سأقوم بمراجعة وتحسين جميع المكتبات لتطبيق {{context.appType}}
          analyze_existing_dependencies:
            - action: ai_command
              command: >
                🔍 **تحليل المكتبات الموجودة**
                
                المكتبات الحالية: {{context.existingDependencies.join(', ')}}
                
                سأقوم بالبحث عن بدائل في المكتبات الموجودة:
                
                **تحليل الوظائف المتاحة:**
                - فحص إمكانيات كل مكتبة موجودة
                - البحث عن وظائف مشتركة
                - اقتراح استخدام الموجود بدلاً من إضافة جديد
                - تحسين استخدام المكتبات الحالية
                
                **النتائج المتوقعة:**
                - تقليل عدد المكتبات المطلوبة
                - تحسين الأداء العام
                - تقليل حجم التطبيق
                - تجنب التعارضات
          request_new_dependency_permission:
            - action: ai_command
              command: >
                ⚠️ **طلب إذن لإضافة مكتبة جديدة**
                
                **تحليل الطلب:**
                - اسم المكتبة المطلوبة
                - الغرض من الاستخدام
                - تأثير الحجم المتوقع
                - البدائل المتاحة
                
                **تقييم الضرورة:**
                - هل الوظيفة متوفرة في مكتبة موجودة؟
                - هل التأثير على الحجم مبرر؟
                - هل المكتبة موثوقة وآمنة؟
                
                **🚨 يتطلب موافقتك قبل المتابعة**
                
                هل تريد إضافة هذه المكتبة؟
          cleanup_update_dependencies:
            - action: ai_command
              command: >
                🧹 **تنظيف وتحديث المكتبات**
                
                سأقوم بـ:
                - إزالة المكتبات غير المستخدمة
                - تحديث المكتبات القديمة
                - حل التعارضات
                - تحسين إعدادات المكتبات
                - تنظيف ملف pubspec.yaml
          skip_dependency_management:
            - action: no_op
              message: "تم تجاهل إدارة المكتبات. يُنصح بمراجعة المكتبات دورياً لتحسين الأداء."

  # قاعدة إدارة نماذج البيانات الذكية
  - id: intelligent-model-documentation
    description: "نظام إدارة وتوثيق ذكي لنماذج البيانات (Model Classes) مع تعليقات شاملة وميزات متقدمة"
    context:
      modelMetrics:
        totalModels: 42
        documentedModels: 28
        undocumentedModels: 14
        modelsWithSerialization: 35
        modelsWithValidation: 22
        modelsWithCopyWith: 18
        modelsWithEquality: 25
        averageDocumentationScore: 7.5
      detectedModelOperations: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          const operations = [];
          
          // كشف إنشاء model class جديد
          if (content.includes('class ') && (filePath.includes('model') || filePath.includes('Model'))) {
            operations.push('new_model_class_detected');
          }
          
          // كشف تعديل model موجود
          if (content.includes('class ') && content.includes('fromJson') && content.includes('toJson')) {
            operations.push('existing_model_modification');
          }
          
          // كشف model بدون تعليقات
          if (content.includes('class ') && !content.includes('///') && !content.includes('/**')) {
            operations.push('undocumented_model_detected');
          }
          
          // كشف model بدون serialization
          if (content.includes('class ') && !content.includes('fromJson') && !content.includes('toJson')) {
            operations.push('model_without_serialization');
          }
          
          // كشف model بدون validation
          if (content.includes('class ') && !content.includes('validate') && !content.includes('isValid')) {
            operations.push('model_without_validation');
          }
          
          // كشف model بدون copyWith
          if (content.includes('class ') && !content.includes('copyWith')) {
            operations.push('model_without_copywith');
          }
          
          // كشف model بدون equality
          if (content.includes('class ') && !content.includes('operator ==') && !content.includes('hashCode')) {
            operations.push('model_without_equality');
          }
          
          // كشف model بدون toString
          if (content.includes('class ') && !content.includes('toString()')) {
            operations.push('model_without_tostring');
          }
          
          return operations;
        })()
      modelClassAnalysis: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const analysis = {
            className: '',
            purpose: '',
            fields: [],
            usageContext: '',
            appType: ''
          };
          
          // استخراج اسم الكلاس
          const classMatch = content.match(/class\s+(\w+)/);
          if (classMatch) {
            analysis.className = classMatch[1];
          }
          
          // تحديد الغرض من اسم الكلاس
          const purposeMap = {
            'User': 'إدارة بيانات المستخدمين',
            'Product': 'إدارة بيانات المنتجات',
            'Order': 'إدارة بيانات الطلبات',
            'Category': 'إدارة بيانات الفئات',
            'Cart': 'إدارة بيانات سلة التسوق',
            'Address': 'إدارة بيانات العناوين',
            'Payment': 'إدارة بيانات الدفع',
            'Delivery': 'إدارة بيانات التوصيل',
            'Review': 'إدارة بيانات التقييمات',
            'Notification': 'إدارة بيانات الإشعارات'
          };
          
          for (const [key, value] of Object.entries(purposeMap)) {
            if (analysis.className.includes(key)) {
              analysis.purpose = value;
              break;
            }
          }
          
          // استخراج الحقول
          const fieldMatches = content.match(/final\s+\w+\s+\w+;/g);
          if (fieldMatches) {
            analysis.fields = fieldMatches.map(field => {
              const match = field.match(/final\s+(\w+)\s+(\w+);/);
              return match ? { type: match[1], name: match[2] } : null;
            }).filter(Boolean);
          }
          
          return analysis;
        })()
      appType: >
        (() => {
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          if (filePath.includes('seller') || filePath.includes('بائع')) return 'seller';
          if (filePath.includes('delivery') || filePath.includes('توصيل')) return 'delivery';
          if (filePath.includes('customer') || filePath.includes('عميل')) return 'customer';
          if (filePath.includes('admin') || filePath.includes('إدارة')) return 'admin';
          return 'shared';
        })()
      suggestedEnhancements: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const enhancements = [];
          
          if (!content.includes('fromJson')) {
            enhancements.push('إضافة JSON serialization');
          }
          if (!content.includes('validate')) {
            enhancements.push('إضافة validation methods');
          }
          if (!content.includes('copyWith')) {
            enhancements.push('إضافة copyWith method');
          }
          if (!content.includes('operator ==')) {
            enhancements.push('إضافة equality methods');
          }
          if (!content.includes('toString')) {
            enhancements.push('إضافة toString method');
          }
          if (!content.includes('///')) {
            enhancements.push('إضافة documentation comments');
          }
          
          return enhancements;
        })()
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          (edit.content.includes('class ') && (
            edit.path.includes('model') || 
            edit.path.includes('Model') ||
            edit.content.includes('fromJson') ||
            edit.content.includes('toJson')
          )) ||
          edit.content.match(/class\s+\w+(Model|Data|Entity)/)
        )
      )
    then:
      - action: prompt
        message: >
          🏗️ **مُحسن نماذج البيانات الذكي مُفعّل!**
          
          📱 **التطبيق:** {{context.appType}}
          
          🔍 **تحليل Model المكتشف:**
          - **اسم الكلاس:** {{context.modelClassAnalysis.className}}
          - **الغرض المتوقع:** {{context.modelClassAnalysis.purpose || 'يحتاج تحديد'}}
          - **عدد الحقول:** {{context.modelClassAnalysis.fields.length}}
          
          ⚠️ **العمليات المكتشفة على النماذج:**
          {{context.detectedModelOperations.length === 0 ? 
            '✅ لم يتم اكتشاف مشاكل واضحة في النماذج' : 
            context.detectedModelOperations.map(op => {
              const opMessages = {
                'new_model_class_detected': '🆕 كلاس model جديد - يحتاج توثيق شامل',
                'existing_model_modification': '✏️ تعديل model موجود - تحديث التوثيق',
                'undocumented_model_detected': '📝 model بدون تعليقات - يحتاج توثيق',
                'model_without_serialization': '🔄 model بدون JSON serialization',
                'model_without_validation': '✅ model بدون validation methods',
                'model_without_copywith': '📋 model بدون copyWith method',
                'model_without_equality': '⚖️ model بدون equality methods',
                'model_without_tostring': '🖨️ model بدون toString method'
              };
              return opMessages[op] || `⚠️ ${op}`;
            }).join('\n')
          }}
          
          💡 **التحسينات المقترحة:**
          {{context.suggestedEnhancements.length > 0 ? 
            context.suggestedEnhancements.map(enhancement => `🔧 ${enhancement}`).join('\n') : 
            '✨ النموذج يبدو مكتملاً - لا توجد تحسينات مقترحة'
          }}
          
          📊 **إحصائيات النماذج الحالية:**
          - إجمالي النماذج: {{context.modelMetrics.totalModels}}
          - النماذج الموثقة: {{context.modelMetrics.documentedModels}}
          - النماذج غير الموثقة: {{context.modelMetrics.undocumentedModels}}
          - نماذج مع Serialization: {{context.modelMetrics.modelsWithSerialization}}
          - متوسط درجة التوثيق: {{context.modelMetrics.averageDocumentationScore}}/10
          
          🎯 **مستويات تحسين النماذج المتاحة:**
          
          **🏗️ النظام الشامل للنماذج (مستحسن)**
          - توثيق شامل مع أمثلة تفصيلية
          - إضافة جميع الميزات المتقدمة
          - تحسين الأداء والأمان
          - إنشاء اختبارات تلقائية
          
          **📝 إضافة التوثيق فقط**
          - تعليقات تفصيلية عن الغرض والاستخدام
          - أمثلة على الاستخدام
          - شرح كل حقل
          
          **🔧 إضافة الميزات الأساسية**
          - JSON serialization
          - Basic validation
          - toString method
          
          ماذا تختار؟
        choices:
          - label: "🏗️ النظام الشامل للنماذج + التوثيق الكامل"
            value: "comprehensive_model_enhancement"
          - label: "📝 إضافة التوثيق التفصيلي فقط"
            value: "add_detailed_documentation"
          - label: "🔧 إضافة الميزات الأساسية المفقودة"
            value: "add_basic_features"
          - label: "🔄 تحسين JSON Serialization"
            value: "enhance_serialization"
          - label: "✅ إضافة Validation متقدم"
            value: "add_advanced_validation"
          - label: "📋 إضافة CopyWith و Equality"
            value: "add_copywith_equality"
          - label: "🧪 إنشاء اختبارات للنموذج"
            value: "create_model_tests"
          - label: "📊 تحليل استخدام النموذج"
            value: "analyze_model_usage"
          - label: "⏭️ تجاهل هذه المرة"
            value: "skip_model_enhancement"
        next_actions:
          comprehensive_model_enhancement:
            - action: ai_command
              command: >
                🏗️ **تفعيل النظام الشامل لتحسين النماذج**
                
                **معلومات النموذج:**
                - الكلاس: {{context.modelClassAnalysis.className}}
                - الغرض: {{context.modelClassAnalysis.purpose}}
                - التطبيق: {{context.appType}}
                - الحقول: {{context.modelClassAnalysis.fields.length}}
                
                سأقوم بإنشاء نموذج شامل ومتطور:
                
                **1. إضافة التوثيق الشامل:**
                ```dart
                /// **{{context.modelClassAnalysis.className}} Model**
                /// 
                /// 📋 **الوصف:**
                /// {{context.modelClassAnalysis.purpose || 'نموذج بيانات لإدارة المعلومات في تطبيق Codora'}}
                /// 
                /// 🎯 **الاستخدام:**
                /// - يستخدم في تطبيق {{context.appType}} للتعامل مع البيانات
                /// - يتم استخدامه في الصفحات والواجهات المختلفة
                /// - يتم حفظه في قاعدة البيانات Firebase Firestore
                /// - يتم تمريره بين الشاشات والكنترولرز
                /// 
                /// 🔄 **العمليات المدعومة:**
                /// - تحويل من/إلى JSON للتخزين والاسترجاع
                /// - التحقق من صحة البيانات قبل الحفظ
                /// - نسخ النموذج مع تعديل بعض القيم
                /// - مقارنة النماذج للتحقق من التطابق
                /// 
                /// 📱 **مكان الاستخدام في تطبيق {{context.appType}}:**
                /// - Controllers: للتعامل مع منطق الأعمال
                /// - Widgets: لعرض البيانات في الواجهات
                /// - Services: للتواصل مع APIs وقاعدة البيانات
                /// - Repository: لإدارة مصادر البيانات
                /// 
                /// 💾 **مثال على الاستخدام:**
                /// ```dart
                /// // إنشاء نموذج جديد
                /// final model = {{context.modelClassAnalysis.className}}(
                ///   // إضافة القيم المطلوبة
                /// );
                /// 
                /// // حفظ في قاعدة البيانات
                /// await FirebaseFirestore.instance
                ///   .collection('{{context.modelClassAnalysis.className.toLowerCase()}}s')
                ///   .add(model.toJson());
                /// 
                /// // استرجاع من قاعدة البيانات
                /// final doc = await FirebaseFirestore.instance
                ///   .collection('{{context.modelClassAnalysis.className.toLowerCase()}}s')
                ///   .doc(id).get();
                /// final retrievedModel = {{context.modelClassAnalysis.className}}.fromJson(doc.data()!);
                /// ```
                /// 
                /// ⚠️ **ملاحظات مهمة:**
                /// - تأكد من استدعاء validate() قبل حفظ البيانات
                /// - استخدم copyWith() لتعديل القيم بدلاً من إنشاء نموذج جديد
                /// - جميع الحقول مطلوبة إلا إذا كانت nullable
                /// 
                /// 🔗 **الارتباطات:**
                /// - مرتبط بـ Firebase Auth للمصادقة
                /// - مرتبط بـ Firebase Firestore للتخزين
                /// - مرتبط بـ GetX للإدارة الحالة
                /// 
                /// 📅 **تاريخ الإنشاء:** {{new Date().toISOString().split('T')[0]}}
                /// 👤 **المطور:** Codora Team
                /// 🏷️ **الإصدار:** 1.0.0
                class {{context.modelClassAnalysis.className}} {
                ```
                
                **2. إضافة الميزات المتقدمة:**
                ```dart
                  // الحقول مع التوثيق
                  {{context.modelClassAnalysis.fields.map(field => `
                  /// ${field.name}: ${field.type}
                  /// الغرض: [شرح الغرض من هذا الحقل]
                  /// القيود: [القيود والشروط إن وجدت]
                  final ${field.type} ${field.name};`).join('\n') || '// إضافة الحقول هنا'}}
                  
                  /// المنشئ الأساسي مع جميع الحقول المطلوبة
                  const {{context.modelClassAnalysis.className}}({
                    {{context.modelClassAnalysis.fields.map(field => `required this.${field.name},`).join('\n    ') || '// إضافة الحقول المطلوبة'}}
                  });
                  
                  /// منشئ من JSON - لاسترجاع البيانات من قاعدة البيانات
                  /// 
                  /// المعاملات:
                  /// - [json]: Map يحتوي على بيانات JSON
                  /// 
                  /// المخرجات:
                  /// - نموذج {{context.modelClassAnalysis.className}} مع البيانات المحولة
                  /// 
                  /// الاستثناءات:
                  /// - FormatException: في حالة بيانات JSON غير صحيحة
                  factory {{context.modelClassAnalysis.className}}.fromJson(Map<String, dynamic> json) {
                    try {
                      return {{context.modelClassAnalysis.className}}(
                        {{context.modelClassAnalysis.fields.map(field => `${field.name}: json['${field.name}'] ?? ${_getDefaultValue(field.type)},`).join('\n        ') || '// إضافة تحويل الحقول'}}
                      );
                    } catch (e) {
                      throw FormatException('خطأ في تحويل JSON إلى {{context.modelClassAnalysis.className}}: $e');
                    }
                  }
                  
                  /// تحويل إلى JSON - لحفظ البيانات في قاعدة البيانات
                  /// 
                  /// المخرجات:
                  /// - Map<String, dynamic> يحتوي على جميع بيانات النموذج
                  Map<String, dynamic> toJson() {
                    return {
                      {{context.modelClassAnalysis.fields.map(field => `'${field.name}': ${field.name},`).join('\n      ') || '// إضافة تصدير الحقول'}}
                      'createdAt': DateTime.now().toIso8601String(),
                      'updatedAt': DateTime.now().toIso8601String(),
                    };
                  }
                  
                  /// التحقق من صحة البيانات
                  /// 
                  /// المخرجات:
                  /// - ValidationResult يحتوي على نتيجة التحقق والأخطاء إن وجدت
                  ValidationResult validate() {
                    final errors = <String>[];
                    
                    {{context.modelClassAnalysis.fields.map(field => `
                    // التحقق من ${field.name}
                    if (${field.name} == null || ${field.name}.toString().isEmpty) {
                      errors.add('${field.name} مطلوب');
                    }`).join('\n') || '// إضافة قواعد التحقق'}}
                    
                    return ValidationResult(
                      isValid: errors.isEmpty,
                      errors: errors,
                    );
                  }
                  
                  /// نسخ النموذج مع تعديل بعض القيم
                  /// 
                  /// المعاملات:
                  /// - القيم الجديدة (اختيارية)
                  /// 
                  /// المخرجات:
                  /// - نموذج جديد مع القيم المحدثة
                  {{context.modelClassAnalysis.className}} copyWith({
                    {{context.modelClassAnalysis.fields.map(field => `${field.type}? ${field.name},`).join('\n    ') || '// إضافة معاملات copyWith'}}
                  }) {
                    return {{context.modelClassAnalysis.className}}(
                      {{context.modelClassAnalysis.fields.map(field => `${field.name}: ${field.name} ?? this.${field.name},`).join('\n      ') || '// إضافة قيم copyWith'}}
                    );
                  }
                  
                  /// مقارنة النماذج
                  @override
                  bool operator ==(Object other) {
                    if (identical(this, other)) return true;
                    if (other is! {{context.modelClassAnalysis.className}}) return false;
                    return {{context.modelClassAnalysis.fields.map(field => `${field.name} == other.${field.name}`).join(' &&\n           ') || 'true'}};
                  }
                  
                  /// حساب hash code
                  @override
                  int get hashCode {
                    return Object.hash(
                      {{context.modelClassAnalysis.fields.map(field => field.name).join(',\n      ') || 'runtimeType'}}
                    );
                  }
                  
                  /// تحويل إلى نص للطباعة والتصحيح
                  @override
                  String toString() {
                    return '{{context.modelClassAnalysis.className}}('
                      {{context.modelClassAnalysis.fields.map(field => `'${field.name}: $${field.name}, '`).join('\n      ') || "''"}}
                    ')';
                  }
                }
                
                /// نتيجة التحقق من صحة البيانات
                class ValidationResult {
                  final bool isValid;
                  final List<String> errors;
                  
                  const ValidationResult({
                    required this.isValid,
                    required this.errors,
                  });
                  
                  String get errorMessage => errors.join('\n');
                }
                ```
                
                **3. إنشاء مساعدات إضافية:**
                ```dart
                /// مساعدات للتعامل مع {{context.modelClassAnalysis.className}}
                class {{context.modelClassAnalysis.className}}Helper {
                  /// إنشاء قائمة من JSON array
                  static List<{{context.modelClassAnalysis.className}}> fromJsonList(List<dynamic> jsonList) {
                    return jsonList
                        .map((json) => {{context.modelClassAnalysis.className}}.fromJson(json))
                        .toList();
                  }
                  
                  /// تحويل قائمة إلى JSON array
                  static List<Map<String, dynamic>> toJsonList(List<{{context.modelClassAnalysis.className}}> models) {
                    return models.map((model) => model.toJson()).toList();
                  }
                  
                  /// البحث في قائمة النماذج
                  static List<{{context.modelClassAnalysis.className}}> search(
                    List<{{context.modelClassAnalysis.className}}> models,
                    String query,
                  ) {
                    return models.where((model) => 
                      model.toString().toLowerCase().contains(query.toLowerCase())
                    ).toList();
                  }
                  
                  /// ترتيب القائمة
                  static List<{{context.modelClassAnalysis.className}}> sort(
                    List<{{context.modelClassAnalysis.className}}> models,
                    String sortBy,
                  ) {
                    // إضافة منطق الترتيب حسب الحقول
                    return models;
                  }
                }
                ```
                
                **المرحلة التالية:** إنشاء اختبارات تلقائية وتحسين الأداء
          add_detailed_documentation:
            - action: ai_command
              command: >
                📝 **إضافة التوثيق التفصيلي**
                
                سأقوم بإضافة تعليقات شاملة ومفصلة لنموذج {{context.modelClassAnalysis.className}}:
                
                **تعليقات الكلاس الرئيسي**
                **تعليقات الحقول**  
                **تعليقات الميثودز**
                **أمثلة الاستخدام**
                **شرح الروابط والتبعيات**
          add_basic_features:
            - action: ai_command
              command: >
                🔧 **إضافة الميزات الأساسية**
                
                سأقوم بإضافة الميزات المفقودة:
                - JSON Serialization (fromJson/toJson)
                - Basic Validation
                - toString Method
                - Basic Constructor
          skip_model_enhancement:
            - action: no_op
              message: "تم تجاهل تحسين النموذج. يُنصح بتوثيق النماذج لتحسين جودة الكود."

  # قاعدة الأمان وحماية البيانات الذكية
  - id: intelligent-security-protection
    description: "نظام حماية شامل للبيانات مع كشف الثغرات الأمنية وتشفير متقدم"
    context:
      securityMetrics:
        totalSecurityVulnerabilities: 8
        criticalVulnerabilities: 3
        mediumVulnerabilities: 5
        encryptedDataPercentage: 78
        secureAPIUsage: 65
        biometricAuthEnabled: 45
        sslCertificateValidation: 82
        dataLeakageRisk: "medium"
        securityScore: 7.2
      detectedSecurityIssues: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          const issues = [];
          
          // كشف مفاتيح API مكتوبة مباشرة
          if (content.match(/(?:api[_-]?key|token|secret|password)\s*[:=]\s*['"][^'"]{8,}/i)) {
            issues.push('hardcoded_api_keys');
          }
          
          // كشف بيانات حساسة غير مشفرة
          if (content.includes('SharedPreferences') && !content.includes('encrypt')) {
            issues.push('unencrypted_sensitive_data');
          }
          
          // كشف HTTP غير آمن
          if (content.includes('http://') && !content.includes('localhost')) {
            issues.push('insecure_http_usage');
          }
          
          // كشف عدم التحقق من SSL
          if (content.includes('HttpClient') && !content.includes('certificateCallback')) {
            issues.push('ssl_validation_missing');
          }
          
          // كشف مصادقة ضعيفة
          if (content.includes('FirebaseAuth') && !content.includes('multiFactor')) {
            issues.push('weak_authentication');
          }
          
          // كشف تسريب البيانات المحتمل
          if (content.includes('print(') && content.match(/print\([^)]*(?:token|password|key)/i)) {
            issues.push('potential_data_leak');
          }
          
          // كشف عدم استخدام HTTPS
          if (content.includes('baseUrl') && content.includes('http://')) {
            issues.push('non_https_endpoint');
          }
          
          // كشف مخزن بيانات غير آمن
          if (content.includes('File(') && content.match(/\.write\(/)) {
            issues.push('insecure_file_storage');
          }
          
          return issues;
        })()
      dataClassification: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const classification = {
            personal: [],
            financial: [],
            authentication: [],
            business: []
          };
          
          // تصنيف البيانات الشخصية
          if (content.match(/(?:email|phone|address|name|birthdate)/i)) {
            classification.personal.push('user_personal_info');
          }
          
          // تصنيف البيانات المالية
          if (content.match(/(?:payment|card|bank|wallet|price|amount)/i)) {
            classification.financial.push('financial_data');
          }
          
          // تصنيف بيانات المصادقة
          if (content.match(/(?:password|token|session|auth|login)/i)) {
            classification.authentication.push('auth_credentials');
          }
          
          // تصنيف البيانات التجارية
          if (content.match(/(?:product|order|inventory|sales|analytics)/i)) {
            classification.business.push('business_data');
          }
          
          return classification;
        })()
      appType: >
        (() => {
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          if (filePath.includes('seller') || filePath.includes('بائع')) return 'seller';
          if (filePath.includes('delivery') || filePath.includes('توصيل')) return 'delivery';
          if (filePath.includes('customer') || filePath.includes('عميل')) return 'customer';
          if (filePath.includes('admin') || filePath.includes('إدارة')) return 'admin';
          return 'shared';
        })()
      suggestedSecurityMeasures: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const measures = [];
          
          if (!content.includes('encrypt')) {
            measures.push('تشفير البيانات الحساسة');
          }
          if (!content.includes('biometric')) {
            measures.push('إضافة المصادقة البيومترية');
          }
          if (!content.includes('ssl')) {
            measures.push('تحسين التحقق من SSL');
          }
          if (!content.includes('firewall')) {
            measures.push('إضافة حماية من الهجمات');
          }
          if (!content.includes('audit')) {
            measures.push('إضافة تسجيل الأنشطة الأمنية');
          }
          
          return measures;
        })()
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.match(/(?:api[_-]?key|token|secret|password|auth|login|encrypt|security)/i) ||
          edit.content.includes('SharedPreferences') ||
          edit.content.includes('FirebaseAuth') ||
          edit.content.includes('http') ||
          edit.content.includes('sensitive') ||
          edit.content.includes('private') ||
          edit.path.includes('auth') ||
          edit.path.includes('security') ||
          edit.path.includes('login')
        )
      )
    then:
      - action: prompt
        message: >
          🛡️ **مُحلل الأمان الذكي مُفعّل!**
          
          📱 **التطبيق:** {{context.appType}}
          
          🚨 **المشاكل الأمنية المكتشفة:**
          {{context.detectedSecurityIssues.length === 0 ? 
            '✅ لم يتم اكتشاف مشاكل أمنية واضحة' : 
            context.detectedSecurityIssues.map(issue => {
              const issueMessages = {
                'hardcoded_api_keys': '🔑 مفاتيح API مكتوبة مباشرة في الكود - خطر عالي',
                'unencrypted_sensitive_data': '🔓 بيانات حساسة غير مشفرة - خطر عالي',
                'insecure_http_usage': '🌐 استخدام HTTP غير آمن - خطر متوسط',
                'ssl_validation_missing': '🔒 التحقق من SSL مفقود - خطر متوسط',
                'weak_authentication': '🔐 مصادقة ضعيفة - خطر عالي',
                'potential_data_leak': '💧 تسريب محتمل للبيانات - خطر عالي',
                'non_https_endpoint': '🔗 نقطة نهاية غير آمنة - خطر متوسط',
                'insecure_file_storage': '📁 تخزين ملفات غير آمن - خطر متوسط'
              };
              return issueMessages[issue] || `⚠️ ${issue}`;
            }).join('\n')
          }}
          
          📊 **تصنيف البيانات المكتشفة:**
          {{Object.keys(context.dataClassification).map(type => {
            const typeMessages = {
              'personal': '👤 بيانات شخصية',
              'financial': '💳 بيانات مالية',
              'authentication': '🔐 بيانات مصادقة',
              'business': '🏢 بيانات تجارية'
            };
            const items = context.dataClassification[type];
            return items.length > 0 ? `${typeMessages[type]}: ${items.length} عنصر` : '';
          }).filter(Boolean).join('\n') || '📋 لم يتم اكتشاف بيانات حساسة'}}
          
          💡 **الإجراءات الأمنية المقترحة:**
          {{context.suggestedSecurityMeasures.length > 0 ? 
            context.suggestedSecurityMeasures.map(measure => `🔧 ${measure}`).join('\n') : 
            '✨ الإعدادات الأمنية تبدو جيدة'
          }}
          
          📈 **نقاط الأمان الحالية:**
          - النقاط الأمنية: {{context.securityMetrics.securityScore}}/10
          - الثغرات الحرجة: {{context.securityMetrics.criticalVulnerabilities}}
          - البيانات المشفرة: {{context.securityMetrics.encryptedDataPercentage}}%
          - استخدام API آمن: {{context.securityMetrics.secureAPIUsage}}%
          - المصادقة البيومترية: {{context.securityMetrics.biometricAuthEnabled}}%
          
          🎯 **مستويات الحماية المتاحة:**
          
          **🛡️ الحماية الشاملة (مستحسن للتطبيقات التجارية)**
          - تشفير شامل لجميع البيانات الحساسة
          - نظام مصادقة متعدد العوامل
          - حماية متقدمة من الهجمات
          - مراقبة أمنية مستمرة
          - تسجيل وتتبع الأنشطة المشبوهة
          
          **🔒 الحماية الأساسية**
          - تشفير البيانات الأساسية
          - مصادقة قوية
          - حماية SSL/TLS
          
          **🔍 تحليل الأمان فقط**
          - فحص شامل للثغرات
          - تقرير مفصل بالمخاطر
          
          ماذا تختار؟
        choices:
          - label: "🛡️ الحماية الشاملة المتقدمة + التشفير الكامل"
            value: "comprehensive_security_protection"
          - label: "🔒 الحماية الأساسية المطلوبة"
            value: "basic_security_protection"
          - label: "🔐 تحسين المصادقة والتفويض"
            value: "enhance_authentication"
          - label: "💾 تشفير البيانات المتقدم"
            value: "advanced_data_encryption"
          - label: "🌐 حماية الشبكة والAPI"
            value: "network_api_protection"
          - label: "📱 الحماية البيومترية"
            value: "biometric_security"
          - label: "🔍 مراجعة الأمان الشاملة"
            value: "comprehensive_security_audit"
          - label: "⚡ إصلاح سريع للثغرات الحرجة"
            value: "quick_critical_fixes"
          - label: "⏭️ تجاهل هذه المرة"
            value: "skip_security_enhancement"
        next_actions:
          comprehensive_security_protection:
            - action: ai_command
              command: >
                🛡️ **تفعيل الحماية الشاملة المتقدمة**
                
                **تحليل الأمان:**
                - التطبيق: {{context.appType}}
                - المشاكل المكتشفة: {{context.detectedSecurityIssues.length}}
                - النقاط الأمنية: {{context.securityMetrics.securityScore}}/10
                - مستوى المخاطر: {{context.securityMetrics.dataLeakageRisk}}
                
                سأقوم بإنشاء نظام حماية شامل:
                
                **1. إنشاء CodoraSecurityManager:**
                ```dart
                /// **نظام الحماية الشامل لكودورا**
                /// 
                /// 🛡️ **الوصف:**
                /// نظام حماية متقدم يوفر تشفير شامل وحماية من التهديدات
                /// مصمم خصيصاً لتطبيقات التجارة الإلكترونية
                /// 
                /// 🔒 **الميزات الأمنية:**
                /// - تشفير AES-256 للبيانات الحساسة
                /// - مصادقة متعددة العوامل (MFA)
                /// - حماية من هجمات OWASP Top 10
                /// - مراقبة التهديدات المستمرة
                /// - تسجيل الأنشطة الأمنية
                /// 
                /// 📱 **التطبيق:** {{context.appType}}
                /// 🔐 **مستوى الأمان:** Enterprise Grade
                class CodoraSecurityManager extends GetxService {
                  static final _instance = CodoraSecurityManager._internal();
                  factory CodoraSecurityManager() => _instance;
                  CodoraSecurityManager._internal();
                  
                  // تشفير البيانات الحساسة
                  static Future<String> encryptSensitiveData(String data, {
                    EncryptionLevel level = EncryptionLevel.high,
                    String? customKey,
                  }) async {
                    try {
                      final key = customKey ?? await _generateSecureKey();
                      final encrypted = await _performEncryption(data, key, level);
                      
                      // تسجيل العملية الأمنية
                      await _logSecurityEvent('data_encryption', {
                        'level': level.toString(),
                        'data_size': data.length,
                        'timestamp': DateTime.now().toIso8601String(),
                      });
                      
                      return encrypted;
                    } catch (e) {
                      await _handleSecurityError('encryption_failed', e);
                      rethrow;
                    }
                  }
                  
                  // فك تشفير البيانات
                  static Future<String> decryptSensitiveData(String encryptedData, {
                    String? customKey,
                  }) async {
                    try {
                      final key = customKey ?? await _getStoredKey();
                      final decrypted = await _performDecryption(encryptedData, key);
                      
                      // تسجيل محاولة الوصول
                      await _logSecurityEvent('data_access', {
                        'data_size': encryptedData.length,
                        'timestamp': DateTime.now().toIso8601String(),
                        'user_id': await _getCurrentUserId(),
                      });
                      
                      return decrypted;
                    } catch (e) {
                      await _handleSecurityError('decryption_failed', e);
                      rethrow;
                    }
                  }
                  
                  // حماية مفاتيح API
                  static Future<String> getSecureAPIKey(String keyName) async {
                    try {
                      // استرجاع المفتاح من تخزين آمن
                      final encryptedKey = await SecureStorage.read(key: keyName);
                      if (encryptedKey == null) {
                        throw SecurityException('API key not found: $keyName');
                      }
                      
                      // فك التشفير وإرجاع المفتاح
                      final apiKey = await decryptSensitiveData(encryptedKey);
                      
                      // تسجيل استخدام المفتاح
                      await _logAPIKeyUsage(keyName);
                      
                      return apiKey;
                    } catch (e) {
                      await _handleSecurityError('api_key_access_failed', e);
                      rethrow;
                    }
                  }
                  
                  // التحقق من أمان الشبكة
                  static Future<bool> validateNetworkSecurity(String url) async {
                    try {
                      // التحقق من HTTPS
                      if (!url.startsWith('https://')) {
                        await _logSecurityWarning('insecure_connection_attempt', {'url': url});
                        return false;
                      }
                      
                      // التحقق من صحة الشهادة
                      final certificateValid = await _validateSSLCertificate(url);
                      if (!certificateValid) {
                        await _logSecurityWarning('invalid_ssl_certificate', {'url': url});
                        return false;
                      }
                      
                      // التحقق من القائمة السوداء
                      final isBlacklisted = await _checkBlacklist(url);
                      if (isBlacklisted) {
                        await _logSecurityWarning('blacklisted_url_access', {'url': url});
                        return false;
                      }
                      
                      return true;
                    } catch (e) {
                      await _handleSecurityError('network_validation_failed', e);
                      return false;
                    }
                  }
                  
                  // حماية البيانات الشخصية (GDPR/CCPA)
                  static Future<void> protectPersonalData(Map<String, dynamic> userData) async {
                    try {
                      final protectedData = <String, dynamic>{};
                      
                      for (final entry in userData.entries) {
                        if (_isPersonalData(entry.key)) {
                          // تشفير البيانات الشخصية
                          protectedData[entry.key] = await encryptSensitiveData(
                            entry.value.toString(),
                            level: EncryptionLevel.maximum,
                          );
                        } else {
                          protectedData[entry.key] = entry.value;
                        }
                      }
                      
                      // تسجيل حماية البيانات
                      await _logSecurityEvent('personal_data_protection', {
                        'protected_fields': userData.keys.where(_isPersonalData).toList(),
                        'timestamp': DateTime.now().toIso8601String(),
                      });
                      
                    } catch (e) {
                      await _handleSecurityError('personal_data_protection_failed', e);
                      rethrow;
                    }
                  }
                  
                  // مراقبة التهديدات المستمرة
                  static Future<void> startThreatMonitoring() async {
                    Timer.periodic(const Duration(minutes: 5), (timer) async {
                      await _scanForThreats();
                      await _checkAnomalousActivity();
                      await _validateSystemIntegrity();
                    });
                  }
                  
                  // تقرير الأمان الشامل
                  static Future<SecurityReport> generateSecurityReport() async {
                    return SecurityReport(
                      scanDate: DateTime.now(),
                      vulnerabilities: await _scanVulnerabilities(),
                      encryptionStatus: await _getEncryptionStatus(),
                      authenticationScore: await _calculateAuthScore(),
                      recommendations: await _generateRecommendations(),
                      complianceStatus: await _checkCompliance(),
                    );
                  }
                }
                ```
                
                **2. إنشاء DataEncryptionService:**
                ```dart
                /// **خدمة التشفير المتقدمة**
                class DataEncryptionService {
                  // تشفير قواعد البيانات
                  static Future<void> encryptDatabaseContent() async {
                    final firestore = FirebaseFirestore.instance;
                    
                    // تشفير البيانات الحساسة في Firestore
                    final collections = ['users', 'orders', 'payments', 'addresses'];
                    
                    for (final collection in collections) {
                      await _encryptCollectionData(firestore.collection(collection));
                    }
                  }
                  
                  // تشفير التخزين المحلي
                  static Future<void> encryptLocalStorage() async {
                    final storage = await SharedPreferences.getInstance();
                    final keys = storage.getKeys();
                    
                    for (final key in keys) {
                      if (_requiresEncryption(key)) {
                        final value = storage.getString(key);
                        if (value != null) {
                          final encrypted = await CodoraSecurityManager.encryptSensitiveData(value);
                          await storage.setString('${key}_encrypted', encrypted);
                          await storage.remove(key);
                        }
                      }
                    }
                  }
                  
                  // تشفير الملفات
                  static Future<File> encryptFile(File file) async {
                    final bytes = await file.readAsBytes();
                    final encryptedBytes = await _encryptBytes(bytes);
                    
                    final encryptedFile = File('${file.path}.encrypted');
                    await encryptedFile.writeAsBytes(encryptedBytes);
                    
                    return encryptedFile;
                  }
                }
                ```
                
                **3. إنشاء APISecurityValidator:**
                ```dart
                /// **مدقق أمان API**
                class APISecurityValidator {
                  // التحقق من أمان الطلبات
                  static Future<bool> validateRequest(RequestOptions options) async {
                    // التحقق من HTTPS
                    if (!options.uri.scheme.startsWith('https')) {
                      throw SecurityException('Insecure connection detected');
                    }
                    
                    // التحقق من التوقيع
                    if (!await _validateRequestSignature(options)) {
                      throw SecurityException('Invalid request signature');
                    }
                    
                    // التحقق من معدل الطلبات
                    if (!await _checkRateLimit(options.uri.host)) {
                      throw SecurityException('Rate limit exceeded');
                    }
                    
                    return true;
                  }
                  
                  // حماية من هجمات CSRF
                  static String generateCSRFToken() {
                    final random = Random.secure();
                    final bytes = List<int>.generate(32, (i) => random.nextInt(256));
                    return base64Url.encode(bytes);
                  }
                  
                  // التحقق من التوكنات
                  static Future<bool> validateJWTToken(String token) async {
                    try {
                      final jwt = JWT.verify(token, SecretKey(await _getJWTSecret()));
                      return jwt.payload['exp'] > DateTime.now().millisecondsSinceEpoch ~/ 1000;
                    } catch (e) {
                      return false;
                    }
                  }
                }
                ```
                
                **المرحلة 2:** إنشاء المصادقة البيومترية والحماية المتقدمة
          basic_security_protection:
            - action: ai_command
              command: >
                🔒 **تطبيق الحماية الأساسية**
                
                سأقوم بإضافة الحماية الأساسية المطلوبة:
                - تشفير البيانات الحساسة
                - حماية مفاتيح API
                - التحقق من SSL
                - مصادقة قوية
          skip_security_enhancement:
            - action: no_op
              message: "تم تجاهل تحسينات الأمان. يُنصح بشدة بمراجعة الإعدادات الأمنية دورياً."

  # قاعدة تحسين الذاكرة والأداء الذكي
  - id: intelligent-memory-performance
    description: "مراقبة وتحسين ذكي لاستخدام الذاكرة والأداء العام مع منع تسريب الذاكرة"
    context:
      performanceMetrics:
        currentMemoryUsage: 125.6
        averageMemoryUsage: 98.3
        memoryLeaks: 4
        heavyOperations: 12
        unoptimizedImages: 18
        blockingOperations: 7
        frameDrop: 8.5
        cpuUsage: 67
        batteryImpact: "medium"
        performanceScore: 6.8
      detectedPerformanceIssues: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          const issues = [];
          
          // كشف memory leaks محتملة
          if (content.includes('GetxController') && !content.includes('onClose()')) {
            issues.push('missing_controller_dispose');
          }
          
          // كشف عمليات ثقيلة على UI thread
          if (content.includes('Future.wait') && !content.includes('isolate')) {
            issues.push('heavy_operations_on_ui_thread');
          }
          
          // كشف استخدام مفرط للذاكرة
          if (content.includes('List.generate') && content.match(/List\.generate\(\s*[0-9]{4,}/)) {
            issues.push('excessive_memory_usage');
          }
          
          // كشف صور غير محسّنة
          if (content.includes('Image.network') && !content.includes('cacheWidth')) {
            issues.push('unoptimized_network_images');
          }
          
          // كشف عدم dispose للموارد
          if (content.includes('StreamController') && !content.includes('close()')) {
            issues.push('undisposed_stream_controllers');
          }
          
          // كشف عمليات قاعدة بيانات ثقيلة
          if (content.includes('FirebaseFirestore.instance.collection') && !content.includes('limit(')) {
            issues.push('unlimited_database_queries');
          }
          
          // كشف animations غير محسّنة
          if (content.includes('AnimationController') && !content.includes('dispose()')) {
            issues.push('undisposed_animation_controllers');
          }
          
          // كشف timer غير محسّن
          if (content.includes('Timer.periodic') && !content.includes('cancel()')) {
            issues.push('undisposed_timers');
          }
          
          return issues;
        })()
      memoryAnalysis: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const analysis = {
            controllers: 0,
            streams: 0,
            timers: 0,
            images: 0,
            animations: 0,
            listeners: 0
          };
          
          // عدد Controllers
          const controllerMatches = content.match(/GetxController|StateController|Controller/g);
          analysis.controllers = controllerMatches ? controllerMatches.length : 0;
          
          // عدد Streams
          const streamMatches = content.match(/StreamController|Stream\.</g);
          analysis.streams = streamMatches ? streamMatches.length : 0;
          
          // عدد Timers
          const timerMatches = content.match(/Timer\.|Timer\.periodic/g);
          analysis.timers = timerMatches ? timerMatches.length : 0;
          
          // عدد Images
          const imageMatches = content.match(/Image\.|NetworkImage|FileImage/g);
          analysis.images = imageMatches ? imageMatches.length : 0;
          
          // عدد Animations
          const animationMatches = content.match(/AnimationController|Animation</g);
          analysis.animations = animationMatches ? animationMatches.length : 0;
          
          return analysis;
        })()
      suggestedOptimizations: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const optimizations = [];
          
          if (!content.includes('dispose()')) {
            optimizations.push('إضافة dispose methods للموارد');
          }
          if (!content.includes('lazy')) {
            optimizations.push('تطبيق lazy loading للقوائم');
          }
          if (!content.includes('cache')) {
            optimizations.push('إضافة caching للصور والبيانات');
          }
          if (!content.includes('debounce')) {
            optimizations.push('إضافة debouncing للعمليات المتكررة');
          }
          if (!content.includes('isolate')) {
            optimizations.push('نقل العمليات الثقيلة لـ isolates');
          }
          
          return optimizations;
        })()
      appType: >
        (() => {
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          if (filePath.includes('seller') || filePath.includes('بائع')) return 'seller';
          if (filePath.includes('delivery') || filePath.includes('توصيل')) return 'delivery';
          if (filePath.includes('customer') || filePath.includes('عميل')) return 'customer';
          if (filePath.includes('admin') || filePath.includes('إدارة')) return 'admin';
          return 'shared';
        })()
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('GetxController') ||
          edit.content.includes('StreamController') ||
          edit.content.includes('AnimationController') ||
          edit.content.includes('Timer') ||
          edit.content.includes('Image.') ||
          edit.content.includes('List.generate') ||
          edit.content.includes('Future.') ||
          edit.content.includes('isolate') ||
          edit.content.includes('performance') ||
          edit.content.includes('memory') ||
          edit.path.includes('controller') ||
          edit.path.includes('service')
        )
      )
    then:
      - action: prompt
        message: >
          ⚡ **مُحسن الأداء والذاكرة الذكي مُفعّل!**
          
          📱 **التطبيق:** {{context.appType}}
          
          ⚠️ **مشاكل الأداء المكتشفة:**
          {{context.detectedPerformanceIssues.length === 0 ? 
            '✅ لم يتم اكتشاف مشاكل أداء واضحة' : 
            context.detectedPerformanceIssues.map(issue => {
              const issueMessages = {
                'missing_controller_dispose': '🎮 Controllers بدون dispose - تسريب ذاكرة محتمل',
                'heavy_operations_on_ui_thread': '🔄 عمليات ثقيلة على UI thread - تجميد محتمل',
                'excessive_memory_usage': '💾 استخدام مفرط للذاكرة - أداء بطيء',
                'unoptimized_network_images': '🖼️ صور شبكة غير محسّنة - استهلاك ذاكرة عالي',
                'undisposed_stream_controllers': '📡 Stream controllers غير محررة - تسريب ذاكرة',
                'unlimited_database_queries': '🗄️ استعلامات قاعدة بيانات غير محدودة - أداء بطيء',
                'undisposed_animation_controllers': '🎬 Animation controllers غير محررة - تسريب ذاكرة',
                'undisposed_timers': '⏱️ Timers غير محررة - استنزاف البطارية'
              };
              return issueMessages[issue] || `⚠️ ${issue}`;
            }).join('\n')
          }}
          
          📊 **تحليل استخدام الذاكرة:**
          {{Object.keys(context.memoryAnalysis).map(type => {
            const typeMessages = {
              'controllers': '🎮 Controllers',
              'streams': '📡 Streams',
              'timers': '⏱️ Timers',
              'images': '🖼️ Images',
              'animations': '🎬 Animations',
              'listeners': '👂 Listeners'
            };
            const count = context.memoryAnalysis[type];
            return count > 0 ? `${typeMessages[type]}: ${count}` : '';
          }).filter(Boolean).join(' | ') || '📋 لا توجد موارد مكتشفة'}}
          
          💡 **التحسينات المقترحة:**
          {{context.suggestedOptimizations.length > 0 ? 
            context.suggestedOptimizations.map(opt => `🔧 ${opt}`).join('\n') : 
            '✨ الأداء يبدو محسّناً'
          }}
          
          📈 **مقاييس الأداء الحالية:**
          - نقاط الأداء: {{context.performanceMetrics.performanceScore}}/10
          - استخدام الذاكرة: {{context.performanceMetrics.currentMemoryUsage}}MB
          - تسريبات الذاكرة: {{context.performanceMetrics.memoryLeaks}}
          - العمليات الثقيلة: {{context.performanceMetrics.heavyOperations}}
          - انخفاض الإطارات: {{context.performanceMetrics.frameDrop}}%
          - استخدام المعالج: {{context.performanceMetrics.cpuUsage}}%
          
          🎯 **مستويات تحسين الأداء المتاحة:**
          
          **⚡ التحسين الشامل (مستحسن للتطبيقات الكبيرة)**
          - مراقبة الأداء المستمرة
          - تحسين استخدام الذاكرة التلقائي
          - lazy loading للمحتوى
          - ضغط وتحسين الصور
          - نقل العمليات الثقيلة لـ isolates
          - caching ذكي للبيانات
          
          **🔧 التحسين الأساسي**
          - إصلاح تسريبات الذاكرة
          - تحسين الصور
          - dispose للموارد
          
          **📊 مراقبة الأداء فقط**
          - تقرير مفصل عن الأداء
          - اكتشاف المشاكل المحتملة
          
          ماذا تختار؟
        choices:
          - label: "⚡ التحسين الشامل + المراقبة المستمرة"
            value: "comprehensive_performance_optimization"
          - label: "🔧 التحسين الأساسي للمشاكل الحرجة"
            value: "basic_performance_fixes"
          - label: "💾 تحسين استخدام الذاكرة"
            value: "memory_optimization"
          - label: "🖼️ تحسين الصور والوسائط"
            value: "media_optimization"
          - label: "🔄 تحسين العمليات غير المتزامنة"
            value: "async_operations_optimization"
          - label: "📱 تحسين واجهة المستخدم"
            value: "ui_performance_optimization"
          - label: "🔋 تحسين استهلاك البطارية"
            value: "battery_optimization"
          - label: "📊 مراقبة الأداء التفصيلية"
            value: "detailed_performance_monitoring"
          - label: "⏭️ تجاهل هذه المرة"
            value: "skip_performance_optimization"
        next_actions:
          comprehensive_performance_optimization:
            - action: ai_command
              command: >
                ⚡ **تفعيل التحسين الشامل للأداء**
                
                **تحليل الأداء:**
                - التطبيق: {{context.appType}}
                - المشاكل المكتشفة: {{context.detectedPerformanceIssues.length}}
                - نقاط الأداء: {{context.performanceMetrics.performanceScore}}/10
                - استخدام الذاكرة: {{context.performanceMetrics.currentMemoryUsage}}MB
                
                سأقوم بإنشاء نظام تحسين شامل:
                
                **1. إنشاء CodoraPerformanceMonitor:**
                ```dart
                /// **مراقب الأداء الشامل لكودورا**
                /// 
                /// ⚡ **الوصف:**
                /// نظام مراقبة أداء متقدم يتتبع استخدام الذاكرة والمعالج
                /// ويقوم بالتحسين التلقائي لضمان أداء مثالي
                /// 
                /// 📊 **الميزات:**
                /// - مراقبة الذاكرة المستمرة
                /// - كشف تسريبات الذاكرة التلقائي
                /// - تحسين الصور والوسائط
                /// - إدارة العمليات غير المتزامنة
                /// - تحليل أداء الواجهات
                /// 
                /// 📱 **التطبيق:** {{context.appType}}
                /// 🔋 **التأثير على البطارية:** منخفض
                class CodoraPerformanceMonitor extends GetxService {
                  static final _instance = CodoraPerformanceMonitor._internal();
                  factory CodoraPerformanceMonitor() => _instance;
                  CodoraPerformanceMonitor._internal();
                  
                  Timer? _monitoringTimer;
                  final _performanceMetrics = <String, dynamic>{};
                  final _memoryUsageHistory = <double>[];
                  
                  @override
                  void onInit() {
                    super.onInit();
                    startPerformanceMonitoring();
                  }
                  
                  @override
                  void onClose() {
                    stopPerformanceMonitoring();
                    super.onClose();
                  }
                  
                  /// بدء مراقبة الأداء المستمرة
                  void startPerformanceMonitoring() {
                    _monitoringTimer = Timer.periodic(
                      const Duration(seconds: 10),
                      (_) => _collectPerformanceMetrics(),
                    );
                  }
                  
                  /// إيقاف مراقبة الأداء
                  void stopPerformanceMonitoring() {
                    _monitoringTimer?.cancel();
                    _monitoringTimer = null;
                  }
                  
                  /// جمع مقاييس الأداء
                  Future<void> _collectPerformanceMetrics() async {
                    try {
                      // قياس استخدام الذاكرة
                      final memoryUsage = await _getCurrentMemoryUsage();
                      _memoryUsageHistory.add(memoryUsage);
                      
                      // الاحتفاظ بآخر 100 قياس فقط
                      if (_memoryUsageHistory.length > 100) {
                        _memoryUsageHistory.removeAt(0);
                      }
                      
                      // كشف تسريبات الذاكرة
                      await _detectMemoryLeaks();
                      
                      // قياس أداء واجهة المستخدم
                      await _measureUIPerformance();
                      
                      // فحص العمليات الثقيلة
                      await _checkHeavyOperations();
                      
                      // تحديث المقاييس
                      _updatePerformanceMetrics();
                      
                    } catch (e) {
                      debugPrint('خطأ في مراقبة الأداء: $e');
                    }
                  }
                  
                  /// كشف تسريبات الذاكرة
                  Future<void> _detectMemoryLeaks() async {
                    if (_memoryUsageHistory.length < 10) return;
                    
                    // حساب متوسط الزيادة في الذاكرة
                    final recentUsage = _memoryUsageHistory.sublist(_memoryUsageHistory.length - 10);
                    final trend = _calculateMemoryTrend(recentUsage);
                    
                    if (trend > 2.0) { // زيادة مستمرة أكثر من 2MB
                      await _handleMemoryLeak(trend);
                    }
                  }
                  
                  /// معالجة تسريب الذاكرة
                  Future<void> _handleMemoryLeak(double trend) async {
                    // تسجيل التسريب
                    await _logPerformanceIssue('memory_leak_detected', {
                      'trend': trend,
                      'current_usage': _memoryUsageHistory.last,
                      'timestamp': DateTime.now().toIso8601String(),
                    });
                    
                    // محاولة تنظيف الذاكرة
                    await _performMemoryCleanup();
                    
                    // إشعار المطور
                    if (kDebugMode) {
                      debugPrint('⚠️ تم اكتشاف تسريب ذاكرة محتمل: ${trend.toStringAsFixed(1)}MB/min');
                    }
                  }
                  
                  /// تنظيف الذاكرة
                  Future<void> _performMemoryCleanup() async {
                    // تنظيف cache الصور
                    imageCache.clear();
                    imageCache.clearLiveImages();
                    
                    // إجبار garbage collection
                    if (Platform.isAndroid || Platform.isIOS) {
                      // استدعاء GC في Flutter
                      await Future.delayed(Duration.zero);
                    }
                  }
                  
                  /// قياس أداء واجهة المستخدم
                  Future<void> _measureUIPerformance() async {
                    // قياس FPS
                    final fps = await _getCurrentFPS();
                    _performanceMetrics['fps'] = fps;
                    
                    // كشف إسقاط الإطارات
                    if (fps < 55) {
                      await _handleFrameDrop(fps);
                    }
                  }
                  
                  /// معالجة إسقاط الإطارات
                  Future<void> _handleFrameDrop(double fps) async {
                    await _logPerformanceIssue('frame_drop_detected', {
                      'fps': fps,
                      'timestamp': DateTime.now().toIso8601String(),
                    });
                    
                    // اقتراح تحسينات
                    await _suggestUIOptimizations();
                  }
                  
                  /// تقرير الأداء الشامل
                  Future<PerformanceReport> generatePerformanceReport() async {
                    return PerformanceReport(
                      timestamp: DateTime.now(),
                      memoryUsage: _memoryUsageHistory.last,
                      averageMemoryUsage: _calculateAverageMemory(),
                      memoryTrend: _calculateMemoryTrend(_memoryUsageHistory),
                      fps: _performanceMetrics['fps'] ?? 60.0,
                      issues: await _getPerformanceIssues(),
                      recommendations: await _generateRecommendations(),
                    );
                  }
                }
                ```
                
                **2. إنشاء MemoryOptimizer:**
                ```dart
                /// **محسن الذاكرة المتقدم**
                class MemoryOptimizer {
                  /// تحسين استخدام الذاكرة للتطبيق
                  static Future<void> optimizeMemoryUsage() async {
                    // تحسين Controllers
                    await _optimizeControllers();
                    
                    // تحسين الصور
                    await _optimizeImages();
                    
                    // تحسين القوائم
                    await _optimizeLists();
                    
                    // تحسين البيانات المؤقتة
                    await _optimizeCache();
                  }
                  
                  /// تحسين Controllers
                  static Future<void> _optimizeControllers() async {
                    // العثور على Controllers غير المحررة
                    final activeControllers = Get.findAll<GetxController>();
                    
                    for (final controller in activeControllers) {
                      if (!controller.initialized) {
                        // تحرير Controller غير المستخدم
                        Get.delete<GetxController>(tag: controller.toString());
                      }
                    }
                  }
                  
                  /// تحسين الصور
                  static Future<void> _optimizeImages() async {
                    // ضغط الصور في الذاكرة
                    final imageCache = PaintingBinding.instance.imageCache;
                    
                    // تقليل حجم cache الصور
                    imageCache.maximumSize = 100;
                    imageCache.maximumSizeBytes = 50 * 1024 * 1024; // 50MB
                    
                    // تنظيف الصور غير المستخدمة
                    imageCache.clearLiveImages();
                  }
                  
                  /// إنشاء Widget محسّن للصور
                  static Widget optimizedNetworkImage(
                    String url, {
                    double? width,
                    double? height,
                    BoxFit? fit,
                  }) {
                    return CachedNetworkImage(
                      imageUrl: url,
                      width: width,
                      height: height,
                      fit: fit,
                      memCacheWidth: width?.round(),
                      memCacheHeight: height?.round(),
                      maxWidthDiskCache: 800,
                      maxHeightDiskCache: 600,
                      placeholder: (context, url) => const CircularProgressIndicator(),
                      errorWidget: (context, url, error) => const Icon(Icons.error),
                    );
                  }
                }
                ```
                
                **3. إنشاء LazyLoadingManager:**
                ```dart
                /// **مدير التحميل التدريجي**
                class LazyLoadingManager {
                  /// إنشاء قائمة محسّنة للأداء
                  static Widget buildOptimizedList<T>({
                    required List<T> items,
                    required Widget Function(BuildContext, T) itemBuilder,
                    int? cacheExtent,
                    bool shrinkWrap = false,
                  }) {
                    return ListView.builder(
                      itemCount: items.length,
                      shrinkWrap: shrinkWrap,
                      cacheExtent: cacheExtent ?? 500,
                      itemBuilder: (context, index) {
                        if (index >= items.length) return const SizedBox.shrink();
                        return itemBuilder(context, items[index]);
                      },
                    );
                  }
                  
                  /// إنشاء شبكة محسّنة للأداء
                  static Widget buildOptimizedGrid<T>({
                    required List<T> items,
                    required Widget Function(BuildContext, T) itemBuilder,
                    required int crossAxisCount,
                    double mainAxisSpacing = 0.0,
                    double crossAxisSpacing = 0.0,
                  }) {
                    return GridView.builder(
                      gridDelegate: SliverGridDelegateWithFixedCrossAxisCount(
                        crossAxisCount: crossAxisCount,
                        mainAxisSpacing: mainAxisSpacing,
                        crossAxisSpacing: crossAxisSpacing,
                      ),
                      itemCount: items.length,
                      cacheExtent: 300,
                      itemBuilder: (context, index) {
                        if (index >= items.length) return const SizedBox.shrink();
                        return itemBuilder(context, items[index]);
                      },
                    );
                  }
                }
                ```
                
                **المرحلة 2:** إنشاء محسّن الصور والعمليات غير المتزامنة
          memory_optimization:
            - action: ai_command
              command: >
                💾 **تحسين استخدام الذاكرة**
                
                سأقوم بتحسين استخدام الذاكرة:
                - إصلاح تسريبات الذاكرة
                - تحسين Controllers
                - تحسين الصور
                - lazy loading للقوائم
          skip_performance_optimization:
            - action: no_op
              message: "تم تجاهل تحسينات الأداء. يُنصح بمراقبة الأداء دورياً لضمان تجربة مستخدم مثلى."

  # قاعدة إدارة التعليقات والتوثيق الذكي
  - id: intelligent-code-documentation
    description: "نظام توثيق شامل وتعليقات ذكية لجميع أجزاء الكود مع إنشاء تلقائي للتوثيق"
    context:
      documentationMetrics:
        totalFunctions: 156
        documentedFunctions: 89
        undocumentedFunctions: 67
        complexFunctions: 23
        publicAPIs: 45
        documentedAPIs: 28
        averageDocumentationQuality: 6.8
        codeComplexity: "medium"
        documentationCoverage: 57
        outdatedComments: 12
      detectedDocumentationIssues: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          const issues = [];
          
          // كشف functions بدون تعليقات
          if (content.match(/^\s*(?:Future<|static |Widget |String |int |bool |double |void )\w+\s*\([^)]*\)\s*(?:async\s*)?{/gm)) {
            if (!content.includes('///') && !content.includes('/**')) {
              issues.push('undocumented_functions');
            }
          }
          
          // كشف classes بدون تعليقات
          if (content.includes('class ') && !content.includes('/// **')) {
            issues.push('undocumented_classes');
          }
          
          // كشف كود معقد بدون شرح
          if (content.match(/if\s*\([^)]*\)\s*{[^}]*if\s*\([^)]*\)\s*{[^}]*if/)) {
            issues.push('complex_code_without_explanation');
          }
          
          // كشف متغيرات بدون شرح
          if (content.match(/final\s+\w+\s+=\s+[^;]*RegExp|Map<|List<.*>.*where\(|Stream<.*>.*listen/)) {
            issues.push('complex_variables_without_explanation');
          }
          
          // كشف APIs عامة بدون توثيق
          if (content.match(/static\s+(?:Future<|String|int|bool|Widget)\s+\w+\s*\(/)) {
            if (!content.includes('/// **API**')) {
              issues.push('undocumented_public_apis');
            }
          }
          
          // كشف تعليقات قديمة أو خاطئة
          if (content.includes('TODO') || content.includes('FIXME') || content.includes('HACK')) {
            issues.push('outdated_or_temporary_comments');
          }
          
          // كشف constants بدون شرح
          if (content.match(/static\s+const\s+\w+\s*=/)) {
            if (!content.includes('/// ')) {
              issues.push('undocumented_constants');
            }
          }
          
          // كشف enums بدون توثيق
          if (content.includes('enum ') && !content.includes('/// ')) {
            issues.push('undocumented_enums');
          }
          
          return issues;
        })()
      codeComplexityAnalysis: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const analysis = {
            functions: 0,
            classes: 0,
            complexConditions: 0,
            loops: 0,
            asyncOperations: 0,
            publicMethods: 0
          };
          
          // عدد Functions
          const functionMatches = content.match(/^\s*(?:Future<|static |Widget |String |int |bool |double |void )\w+\s*\(/gm);
          analysis.functions = functionMatches ? functionMatches.length : 0;
          
          // عدد Classes
          const classMatches = content.match(/class\s+\w+/g);
          analysis.classes = classMatches ? classMatches.length : 0;
          
          // الشروط المعقدة
          const complexConditions = content.match(/if\s*\([^)]*&&[^)]*\)|if\s*\([^)]*\|\|[^)]*\)/g);
          analysis.complexConditions = complexConditions ? complexConditions.length : 0;
          
          // الحلقات
          const loops = content.match(/for\s*\(|while\s*\(|forEach\(/g);
          analysis.loops = loops ? loops.length : 0;
          
          // العمليات غير المتزامنة
          const asyncOps = content.match(/async\s*{|await\s+|Future\.</g);
          analysis.asyncOperations = asyncOps ? asyncOps.length : 0;
          
          // الطرق العامة
          const publicMethods = content.match(/static\s+(?:Future<|String|int|bool|Widget)\s+\w+\s*\(/g);
          analysis.publicMethods = publicMethods ? publicMethods.length : 0;
          
          return analysis;
        })()
      suggestedDocumentationImprovements: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const improvements = [];
          
          if (!content.includes('/// **')) {
            improvements.push('إضافة تعليقات شاملة للكلاسات');
          }
          if (!content.includes('/// @param')) {
            improvements.push('توثيق معاملات الدوال');
          }
          if (!content.includes('/// @returns') && !content.includes('/// المخرجات:')) {
            improvements.push('توثيق مخرجات الدوال');
          }
          if (!content.includes('/// @example') && !content.includes('/// مثال:')) {
            improvements.push('إضافة أمثلة على الاستخدام');
          }
          if (!content.includes('/// @throws') && content.includes('throw')) {
            improvements.push('توثيق الاستثناءات المحتملة');
          }
          if (!content.includes('/// @see') && !content.includes('/// انظر:')) {
            improvements.push('إضافة روابط للكود ذي الصلة');
          }
          
          return improvements;
        })()
      appType: >
        (() => {
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          if (filePath.includes('seller') || filePath.includes('بائع')) return 'seller';
          if (filePath.includes('delivery') || filePath.includes('توصيل')) return 'delivery';
          if (filePath.includes('customer') || filePath.includes('عميل')) return 'customer';
          if (filePath.includes('admin') || filePath.includes('إدارة')) return 'admin';
          return 'shared';
        })()
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.match(/class\s+\w+/) ||
          edit.content.match(/^\s*(?:Future<|static |Widget |String |int |bool |double |void )\w+\s*\(/m) ||
          edit.content.includes('function') ||
          edit.content.includes('method') ||
          edit.content.includes('API') ||
          edit.content.includes('/// ') ||
          edit.content.includes('/** ') ||
          edit.content.includes('TODO') ||
          edit.content.includes('FIXME') ||
          edit.path.includes('service') ||
          edit.path.includes('controller') ||
          edit.path.includes('model') ||
          edit.path.includes('widget')
        )
      )
    then:
      - action: prompt
        message: >
          📝 **مُحسن التوثيق والتعليقات الذكي مُفعّل!**
          
          📱 **التطبيق:** {{context.appType}}
          
          ⚠️ **مشاكل التوثيق المكتشفة:**
          {{context.detectedDocumentationIssues.length === 0 ? 
            '✅ لم يتم اكتشاف مشاكل توثيق واضحة' : 
            context.detectedDocumentationIssues.map(issue => {
              const issueMessages = {
                'undocumented_functions': '📋 دوال بدون تعليقات - صعوبة في الفهم',
                'undocumented_classes': '🏗️ كلاسات بدون توثيق - نقص في الوضوح',
                'complex_code_without_explanation': '🔍 كود معقد بدون شرح - صعوبة الصيانة',
                'complex_variables_without_explanation': '📊 متغيرات معقدة بدون توضيح',
                'undocumented_public_apis': '🌐 APIs عامة بدون توثيق - مشاكل للمطورين',
                'outdated_or_temporary_comments': '⏳ تعليقات مؤقتة أو قديمة - تنظيف مطلوب',
                'undocumented_constants': '🔢 constants بدون شرح - نقص في الوضوح',
                'undocumented_enums': '📝 enums بدون توثيق - صعوبة الفهم'
              };
              return issueMessages[issue] || `⚠️ ${issue}`;
            }).join('\n')
          }}
          
          📊 **تحليل تعقد الكود:**
          {{Object.keys(context.codeComplexityAnalysis).map(type => {
            const typeMessages = {
              'functions': '🔧 دوال',
              'classes': '🏗️ كلاسات',
              'complexConditions': '🔀 شروط معقدة',
              'loops': '🔄 حلقات',
              'asyncOperations': '⚡ عمليات غير متزامنة',
              'publicMethods': '🌐 طرق عامة'
            };
            const count = context.codeComplexityAnalysis[type];
            return count > 0 ? `${typeMessages[type]}: ${count}` : '';
          }).filter(Boolean).join(' | ') || '📋 لا يوجد كود معقد مكتشف'}}
          
          💡 **تحسينات التوثيق المقترحة:**
          {{context.suggestedDocumentationImprovements.length > 0 ? 
            context.suggestedDocumentationImprovements.map(improvement => `📚 ${improvement}`).join('\n') : 
            '✨ التوثيق يبدو شاملاً'
          }}
          
          📈 **مقاييس التوثيق الحالية:**
          - تغطية التوثيق: {{context.documentationMetrics.documentationCoverage}}%
          - الدوال الموثقة: {{context.documentationMetrics.documentedFunctions}}/{{context.documentationMetrics.totalFunctions}}
          - APIs الموثقة: {{context.documentationMetrics.documentedAPIs}}/{{context.documentationMetrics.publicAPIs}}
          - جودة التوثيق: {{context.documentationMetrics.averageDocumentationQuality}}/10
          - التعليقات القديمة: {{context.documentationMetrics.outdatedComments}}
          
          🎯 **مستويات التوثيق المتاحة:**
          
          **📚 التوثيق الشامل (مستحسن للمشاريع الكبيرة)**
          - توثيق كامل لجميع الكلاسات والدوال
          - أمثلة عملية للاستخدام
          - شرح مفصل للمعاملات والمخرجات
          - توثيق الاستثناءات والأخطاء
          - روابط للكود ذي الصلة
          - إنشاء ملف README تلقائي
          
          **📝 التوثيق الأساسي**
          - تعليقات للدوال الرئيسية
          - توثيق APIs العامة
          - شرح الكود المعقد
          
          **🔍 تحليل التوثيق فقط**
          - تقرير مفصل عن جودة التوثيق
          - اكتشاف الثغرات في التوثيق
          
          ماذا تختار؟
        choices:
          - label: "📚 التوثيق الشامل + إنشاء README تلقائي"
            value: "comprehensive_documentation"
          - label: "📝 التوثيق الأساسي للعناصر المهمة"
            value: "basic_documentation"
          - label: "🏗️ توثيق الكلاسات والنماذج"
            value: "class_model_documentation"
          - label: "🌐 توثيق APIs والطرق العامة"
            value: "api_documentation"
          - label: "🔍 توثيق الكود المعقد فقط"
            value: "complex_code_documentation"
          - label: "📖 إنشاء دليل المطور"
            value: "developer_guide_creation"
          - label: "🧹 تنظيف التعليقات القديمة"
            value: "cleanup_outdated_comments"
          - label: "📊 تحليل جودة التوثيق"
            value: "documentation_quality_analysis"
          - label: "⏭️ تجاهل هذه المرة"
            value: "skip_documentation_enhancement"
        next_actions:
          comprehensive_documentation:
            - action: ai_command
              command: >
                📚 **تفعيل التوثيق الشامل**
                
                **تحليل التوثيق:**
                - التطبيق: {{context.appType}}
                - المشاكل المكتشفة: {{context.detectedDocumentationIssues.length}}
                - تغطية التوثيق: {{context.documentationMetrics.documentationCoverage}}%
                - الدوال غير الموثقة: {{context.documentationMetrics.undocumentedFunctions}}
                
                سأقوم بإنشاء نظام توثيق شامل:
                
                **1. إنشاء CodoraDocumentationGenerator:**
                ```dart
                /// **مولد التوثيق الشامل لكودورا**
                /// 
                /// 📚 **الوصف:**
                /// نظام توثيق ذكي يقوم بإنشاء تعليقات شاملة ومفصلة
                /// لجميع عناصر الكود مع أمثلة عملية ومراجع مفيدة
                /// 
                /// 🎯 **الميزات:**
                /// - توليد تعليقات تلقائية للدوال والكلاسات
                /// - إنشاء أمثلة عملية للاستخدام
                /// - توثيق المعاملات والمخرجات
                /// - شرح الاستثناءات والأخطاء
                /// - إنشاء روابط للكود ذي الصلة
                /// 
                /// 📱 **التطبيق:** {{context.appType}}
                /// 🏷️ **الإصدار:** 1.0.0
                class CodoraDocumentationGenerator {
                  static const String _version = '1.0.0';
                  static const String _author = 'Codora Team';
                  
                  /// **إنشاء توثيق شامل للكلاس**
                  /// 
                  /// 📋 **الوصف:**
                  /// يقوم بإنشاء توثيق مفصل وشامل لأي كلاس مع جميع
                  /// التفاصيل المطلوبة والأمثلة العملية
                  /// 
                  /// 📥 **المعاملات:**
                  /// - [className]: اسم الكلاس المراد توثيقه
                  /// - [purpose]: الغرض من الكلاس
                  /// - [appType]: نوع التطبيق (seller/customer/delivery/admin)
                  /// - [complexity]: مستوى تعقد الكلاس (simple/medium/complex)
                  /// 
                  /// 📤 **المخرجات:**
                  /// - String: التوثيق الكامل للكلاس بصيغة Dart Doc
                  /// 
                  /// 🔧 **مثال على الاستخدام:**
                  /// ```dart
                  /// final documentation = CodoraDocumentationGenerator.generateClassDocumentation(
                  ///   className: 'ProductController',
                  ///   purpose: 'إدارة المنتجات في التطبيق',
                  ///   appType: 'seller',
                  ///   complexity: CodeComplexity.medium,
                  /// );
                  /// 
                  /// print(documentation);
                  /// // سيطبع توثيقاً شاملاً للكلاس
                  /// ```
                  /// 
                  /// ⚠️ **ملاحظات مهمة:**
                  /// - تأكد من تمرير جميع المعاملات المطلوبة
                  /// - الغرض يجب أن يكون واضحاً ومفصلاً
                  /// - نوع التطبيق يؤثر على طبيعة التوثيق
                  /// 
                  /// 🔗 **انظر أيضاً:**
                  /// - [generateMethodDocumentation] لتوثيق الدوال
                  /// - [generateAPIDocumentation] لتوثيق APIs
                  /// - [CodoraCodeAnalyzer] لتحليل الكود
                  /// 
                  /// 📅 **تاريخ الإنشاء:** ${DateTime.now().toIso8601String().split('T')[0]}
                  /// 👤 **المطور:** $_author
                  /// 🏷️ **الإصدار:** $_version
                  static String generateClassDocumentation({
                    required String className,
                    required String purpose,
                    required String appType,
                    required CodeComplexity complexity,
                    List<String>? dependencies,
                    List<String>? usageExamples,
                  }) {
                    final buffer = StringBuffer();
                    
                    // العنوان الرئيسي
                    buffer.writeln('/// **$className**');
                    buffer.writeln('/// ');
                    
                    // الوصف
                    buffer.writeln('/// 📋 **الوصف:**');
                    buffer.writeln('/// $purpose');
                    buffer.writeln('/// ');
                    
                    // نوع التطبيق والاستخدام
                    buffer.writeln('/// 🎯 **الاستخدام:**');
                    buffer.writeln('/// - يستخدم في تطبيق $appType');
                    buffer.writeln('/// - مستوى التعقد: ${_getComplexityDescription(complexity)}');
                    buffer.writeln('/// - يتفاعل مع واجهات المستخدم والخدمات');
                    buffer.writeln('/// ');
                    
                    // التبعيات
                    if (dependencies != null && dependencies.isNotEmpty) {
                      buffer.writeln('/// 🔗 **التبعيات:**');
                      for (final dependency in dependencies) {
                        buffer.writeln('/// - $dependency');
                      }
                      buffer.writeln('/// ');
                    }
                    
                    // أمثلة الاستخدام
                    buffer.writeln('/// 💾 **مثال على الاستخدام:**');
                    buffer.writeln('/// ```dart');
                    buffer.writeln('/// // إنشاء instance من $className');
                    buffer.writeln('/// final ${className.toLowerCase()} = Get.put($className());');
                    buffer.writeln('/// ');
                    buffer.writeln('/// // استخدام الكلاس');
                    buffer.writeln('/// await ${className.toLowerCase()}.performMainOperation();');
                    buffer.writeln('/// ');
                    buffer.writeln('/// // الحصول على النتائج');
                    buffer.writeln('/// final result = ${className.toLowerCase()}.getResult();');
                    buffer.writeln('/// print("النتيجة: \$result");');
                    buffer.writeln('/// ```');
                    buffer.writeln('/// ');
                    
                    // الميزات الرئيسية
                    buffer.writeln('/// ⭐ **الميزات الرئيسية:**');
                    buffer.writeln('/// - إدارة متقدمة للحالة باستخدام GetX');
                    buffer.writeln('/// - معالجة الأخطاء الشاملة');
                    buffer.writeln('/// - تحسين الأداء والذاكرة');
                    buffer.writeln('/// - دعم العمليات غير المتزامنة');
                    buffer.writeln('/// ');
                    
                    // ملاحظات مهمة
                    buffer.writeln('/// ⚠️ **ملاحظات مهمة:**');
                    buffer.writeln('/// - تأكد من استدعاء dispose() عند انتهاء الاستخدام');
                    buffer.writeln('/// - جميع العمليات غير المتزامنة محمية من الأخطاء');
                    buffer.writeln('/// - يدعم الاستخدام في بيئات متعددة الخيوط');
                    buffer.writeln('/// ');
                    
                    // معلومات المطور
                    buffer.writeln('/// 📅 **تاريخ الإنشاء:** ${DateTime.now().toIso8601String().split('T')[0]}');
                    buffer.writeln('/// 👤 **المطور:** $_author');
                    buffer.writeln('/// 🏷️ **الإصدار:** $_version');
                    buffer.writeln('/// 📱 **التطبيق:** $appType');
                    
                    return buffer.toString();
                  }
                  
                  /// **إنشاء توثيق للدوال والطرق**
                  /// 
                  /// 📋 **الوصف:**
                  /// ينشئ توثيقاً مفصلاً لأي دالة مع شرح المعاملات
                  /// والمخرجات والاستثناءات المحتملة
                  /// 
                  /// 📥 **المعاملات:**
                  /// - [methodName]: اسم الدالة
                  /// - [purpose]: الغرض من الدالة
                  /// - [parameters]: قائمة المعاملات مع أوصافها
                  /// - [returnType]: نوع القيمة المرجعة
                  /// - [exceptions]: الاستثناءات المحتملة
                  /// 
                  /// 📤 **المخرجات:**
                  /// - String: التوثيق الكامل للدالة
                  /// 
                  /// 🔧 **مثال:**
                  /// ```dart
                  /// final doc = generateMethodDocumentation(
                  ///   methodName: 'fetchProducts',
                  ///   purpose: 'جلب قائمة المنتجات من الخادم',
                  ///   parameters: {'limit': 'عدد المنتجات المطلوبة'},
                  ///   returnType: 'Future<List<Product>>',
                  ///   exceptions: ['NetworkException', 'TimeoutException'],
                  /// );
                  /// ```
                  static String generateMethodDocumentation({
                    required String methodName,
                    required String purpose,
                    required Map<String, String> parameters,
                    required String returnType,
                    List<String>? exceptions,
                    String? example,
                  }) {
                    final buffer = StringBuffer();
                    
                    // العنوان
                    buffer.writeln('/// **$methodName**');
                    buffer.writeln('/// ');
                    
                    // الوصف
                    buffer.writeln('/// 📋 **الوصف:**');
                    buffer.writeln('/// $purpose');
                    buffer.writeln('/// ');
                    
                    // المعاملات
                    if (parameters.isNotEmpty) {
                      buffer.writeln('/// 📥 **المعاملات:**');
                      parameters.forEach((name, description) {
                        buffer.writeln('/// - [$name]: $description');
                      });
                      buffer.writeln('/// ');
                    }
                    
                    // المخرجات
                    buffer.writeln('/// 📤 **المخرجات:**');
                    buffer.writeln('/// - $returnType');
                    buffer.writeln('/// ');
                    
                    // الاستثناءات
                    if (exceptions != null && exceptions.isNotEmpty) {
                      buffer.writeln('/// ⚠️ **الاستثناءات المحتملة:**');
                      for (final exception in exceptions) {
                        buffer.writeln('/// - $exception: ${_getExceptionDescription(exception)}');
                      }
                      buffer.writeln('/// ');
                    }
                    
                    // مثال
                    if (example != null) {
                      buffer.writeln('/// 🔧 **مثال على الاستخدام:**');
                      buffer.writeln('/// ```dart');
                      buffer.writeln('/// $example');
                      buffer.writeln('/// ```');
                      buffer.writeln('/// ');
                    }
                    
                    return buffer.toString();
                  }
                  
                  /// وصف مستوى التعقد
                  static String _getComplexityDescription(CodeComplexity complexity) {
                    switch (complexity) {
                      case CodeComplexity.simple:
                        return 'بسيط - سهل الفهم والصيانة';
                      case CodeComplexity.medium:
                        return 'متوسط - يتطلب خبرة أساسية';
                      case CodeComplexity.complex:
                        return 'معقد - يتطلب خبرة متقدمة';
                    }
                  }
                  
                  /// وصف الاستثناء
                  static String _getExceptionDescription(String exception) {
                    final descriptions = {
                      'NetworkException': 'خطأ في الاتصال بالشبكة',
                      'TimeoutException': 'انتهاء المهلة الزمنية',
                      'FormatException': 'خطأ في تنسيق البيانات',
                      'StateError': 'خطأ في حالة التطبيق',
                      'ArgumentError': 'خطأ في المعاملات المرسلة',
                    };
                    
                    return descriptions[exception] ?? 'استثناء غير متوقع';
                  }
                }
                
                /// مستويات تعقد الكود
                enum CodeComplexity {
                  simple,
                  medium,
                  complex,
                }
                ```
                
                **2. إنشاء CodeCommentAnalyzer:**
                ```dart
                /// **محلل التعليقات والكود**
                class CodeCommentAnalyzer {
                  /// تحليل جودة التعليقات في الكود
                  static Future<CommentAnalysisReport> analyzeCodeComments(String filePath) async {
                    final fileContent = await File(filePath).readAsString();
                    
                    return CommentAnalysisReport(
                      totalLines: _countLines(fileContent),
                      commentedLines: _countCommentedLines(fileContent),
                      documentedFunctions: _countDocumentedFunctions(fileContent),
                      totalFunctions: _countTotalFunctions(fileContent),
                      qualityScore: _calculateQualityScore(fileContent),
                      suggestions: _generateSuggestions(fileContent),
                    );
                  }
                  
                  /// إنشاء تعليقات تلقائية للكود
                  static String generateAutomaticComments(String code) {
                    final lines = code.split('\n');
                    final commentedLines = <String>[];
                    
                    for (int i = 0; i < lines.length; i++) {
                      final line = lines[i];
                      
                      // إضافة تعليق للدوال
                      if (_isFunction(line)) {
                        commentedLines.add(_generateFunctionComment(line));
                      }
                      
                      // إضافة تعليق للمتغيرات المعقدة
                      if (_isComplexVariable(line)) {
                        commentedLines.add(_generateVariableComment(line));
                      }
                      
                      commentedLines.add(line);
                    }
                    
                    return commentedLines.join('\n');
                  }
                }
                ```
                
                **المرحلة 2:** إنشاء دليل المطور ونظام الروابط المتقاطعة
          basic_documentation:
            - action: ai_command
              command: >
                📝 **إضافة التوثيق الأساسي**
                
                سأقوم بإضافة التوثيق الأساسي:
                - تعليقات للدوال الرئيسية
                - توثيق الكلاسات المهمة
                - شرح الكود المعقد
                - توثيق APIs العامة
          skip_documentation_enhancement:
            - action: no_op
              message: "تم تجاهل تحسينات التوثيق. التوثيق الجيد يسهل الصيانة والتطوير المستقبلي."

  # قاعدة معالجة الأخطاء الذكية
  - id: intelligent-error-handling
    description: "نظام معالجة أخطاء شامل مع تسجيل ذكي وإشعارات مخصصة للمستخدم"
    context:
      errorMetrics:
        totalCatchBlocks: 28
        unhandledExceptions: 12
        networkErrors: 18
        validationErrors: 15
        userFriendlyErrors: 8
        loggedErrors: 22
        fatalErrors: 3
        errorRecoverySuccess: 75
        averageErrorResolutionTime: 2.3
        errorFrequency: "medium"
      detectedErrorHandlingIssues: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          const issues = [];
          
          // كشف try-catch بدون معالجة مناسبة
          if (content.includes('try {') && content.includes('catch (e)')) {
            if (!content.includes('Logger') && !content.includes('log')) {
              issues.push('unlogged_exceptions');
            }
            if (content.includes('catch (e) {}')) {
              issues.push('empty_catch_blocks');
            }
          }
          
          // كشف Future بدون معالجة أخطاء
          if (content.match(/Future\s*<[^>]*>\s*\w+\s*\([^)]*\)\s*(?:async\s*)?{/) && !content.includes('try')) {
            issues.push('unhandled_async_operations');
          }
          
          // كشف API calls بدون error handling
          if (content.includes('http.') || content.includes('dio.')) {
            if (!content.includes('catch') && !content.includes('onError')) {
              issues.push('unhandled_network_requests');
            }
          }
          
          // كشف user input validation بدون معالجة
          if (content.includes('TextFormField') || content.includes('TextField')) {
            if (!content.includes('validator') && !content.includes('validation')) {
              issues.push('missing_input_validation');
            }
          }
          
          // كشف database operations بدون معالجة
          if (content.includes('FirebaseFirestore') || content.includes('collection(')) {
            if (!content.includes('catch')) {
              issues.push('unhandled_database_operations');
            }
          }
          
          // كشف generic error messages
          if (content.includes('"Error"') || content.includes('"خطأ"')) {
            issues.push('generic_error_messages');
          }
          
          // كشف عدم إظهار errors للمستخدم
          if (content.includes('catch (e)') && !content.includes('SnackBar') && !content.includes('Dialog')) {
            issues.push('no_user_error_feedback');
          }
          
          // كشف تسريب المعلومات الحساسة في الأخطاء
          if (content.includes('print(e)') || content.includes('debugPrint(e)')) {
            issues.push('sensitive_error_exposure');
          }
          
          return issues;
        })()
      errorTypeAnalysis: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const analysis = {
            networkErrors: 0,
            validationErrors: 0,
            databaseErrors: 0,
            fileSystemErrors: 0,
            authenticationErrors: 0,
            permissionErrors: 0
          };
          
          // Network errors
          if (content.includes('http') || content.includes('dio') || content.includes('network')) {
            analysis.networkErrors++;
          }
          
          // Validation errors
          if (content.includes('validator') || content.includes('validation') || content.includes('TextFormField')) {
            analysis.validationErrors++;
          }
          
          // Database errors
          if (content.includes('Firestore') || content.includes('database') || content.includes('collection')) {
            analysis.databaseErrors++;
          }
          
          // File system errors
          if (content.includes('File(') || content.includes('Directory(') || content.includes('path')) {
            analysis.fileSystemErrors++;
          }
          
          // Authentication errors
          if (content.includes('FirebaseAuth') || content.includes('login') || content.includes('signIn')) {
            analysis.authenticationErrors++;
          }
          
          // Permission errors
          if (content.includes('permission') || content.includes('Permission') || content.includes('PermissionStatus')) {
            analysis.permissionErrors++;
          }
          
          return analysis;
        })()
      suggestedErrorImprovements: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const improvements = [];
          
          if (!content.includes('Logger') && content.includes('catch')) {
            improvements.push('إضافة تسجيل شامل للأخطاء');
          }
          if (!content.includes('SnackBar') && content.includes('catch')) {
            improvements.push('إضافة إشعارات مستخدم للأخطاء');
          }
          if (!content.includes('retry') && content.includes('network')) {
            improvements.push('إضافة آلية إعادة المحاولة');
          }
          if (!content.includes('validator') && content.includes('TextField')) {
            improvements.push('إضافة التحقق من صحة المدخلات');
          }
          if (!content.includes('ErrorBoundary') && content.includes('Widget')) {
            improvements.push('إضافة حدود الأخطاء للواجهات');
          }
          
          return improvements;
        })()
      appType: >
        (() => {
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          if (filePath.includes('seller') || filePath.includes('بائع')) return 'seller';
          if (filePath.includes('delivery') || filePath.includes('توصيل')) return 'delivery';
          if (filePath.includes('customer') || filePath.includes('عميل')) return 'customer';
          if (filePath.includes('admin') || filePath.includes('إدارة')) return 'admin';
          return 'shared';
        })()
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('try') ||
          edit.content.includes('catch') ||
          edit.content.includes('throw') ||
          edit.content.includes('Exception') ||
          edit.content.includes('Error') ||
          edit.content.includes('Future') ||
          edit.content.includes('async') ||
          edit.content.includes('await') ||
          edit.content.includes('http') ||
          edit.content.includes('dio') ||
          edit.content.includes('Firestore') ||
          edit.content.includes('validator') ||
          edit.content.includes('TextFormField') ||
          edit.path.includes('service') ||
          edit.path.includes('repository') ||
          edit.path.includes('controller')
        )
      )
    then:
      - action: prompt
        message: >
          ⚠️ **مُحلل معالجة الأخطاء الذكي مُفعّل!**
          
          📱 **التطبيق:** {{context.appType}}
          
          🚨 **مشاكل معالجة الأخطاء المكتشفة:**
          {{context.detectedErrorHandlingIssues.length === 0 ? 
            '✅ لم يتم اكتشاف مشاكل معالجة أخطاء واضحة' : 
            context.detectedErrorHandlingIssues.map(issue => {
              const issueMessages = {
                'unlogged_exceptions': '📝 استثناءات غير مسجلة - صعوبة في التتبع والتحليل',
                'empty_catch_blocks': '🕳️ catch blocks فارغة - إهمال كامل للأخطاء',
                'unhandled_async_operations': '⚡ عمليات غير متزامنة بدون معالجة - تجمد محتمل',
                'unhandled_network_requests': '🌐 طلبات شبكة بدون معالجة - تجربة مستخدم سيئة',
                'missing_input_validation': '📝 عدم التحقق من المدخلات - أخطاء متكررة',
                'unhandled_database_operations': '🗄️ عمليات قاعدة بيانات بدون معالجة',
                'generic_error_messages': '💬 رسائل خطأ عامة - إرباك للمستخدم',
                'no_user_error_feedback': '🔇 عدم إعلام المستخدم بالأخطاء',
                'sensitive_error_exposure': '🔓 تسريب معلومات حساسة في الأخطاء'
              };
              return issueMessages[issue] || `⚠️ ${issue}`;
            }).join('\n')
          }}
          
          📊 **تحليل أنواع الأخطاء:**
          {{Object.keys(context.errorTypeAnalysis).map(type => {
            const typeMessages = {
              'networkErrors': '🌐 أخطاء الشبكة',
              'validationErrors': '📝 أخطاء التحقق',
              'databaseErrors': '🗄️ أخطاء قاعدة البيانات',
              'fileSystemErrors': '📁 أخطاء نظام الملفات',
              'authenticationErrors': '🔐 أخطاء المصادقة',
              'permissionErrors': '🔒 أخطاء الصلاحيات'
            };
            const count = context.errorTypeAnalysis[type];
            return count > 0 ? `${typeMessages[type]}: ${count}` : '';
          }).filter(Boolean).join(' | ') || '📋 لا توجد أخطاء مكتشفة'}}
          
          💡 **تحسينات معالجة الأخطاء المقترحة:**
          {{context.suggestedErrorImprovements.length > 0 ? 
            context.suggestedErrorImprovements.map(improvement => `🔧 ${improvement}`).join('\n') : 
            '✨ معالجة الأخطاء تبدو شاملة'
          }}
          
          📈 **مقاييس معالجة الأخطاء الحالية:**
          - الاستثناءات غير المعالجة: {{context.errorMetrics.unhandledExceptions}}
          - نجاح استعادة الأخطاء: {{context.errorMetrics.errorRecoverySuccess}}%
          - الأخطاء المسجلة: {{context.errorMetrics.loggedErrors}}/{{context.errorMetrics.totalCatchBlocks}}
          - متوسط وقت حل الأخطاء: {{context.errorMetrics.averageErrorResolutionTime}} ثانية
          - الأخطاء الحرجة: {{context.errorMetrics.fatalErrors}}
          
          🎯 **مستويات معالجة الأخطاء المتاحة:**
          
          **🛡️ المعالجة الشاملة (مستحسن للإنتاج)**
          - تسجيل شامل ومفصل لجميع الأخطاء
          - رسائل خطأ مخصصة وودية للمستخدم
          - آلية إعادة المحاولة التلقائية
          - تتبع الأخطاء والإبلاغ عنها
          - استعادة تلقائية من الأخطاء
          - تحليل وإحصائيات الأخطاء
          
          **⚡ المعالجة الأساسية**
          - catch blocks للعمليات الحرجة
          - رسائل خطأ أساسية
          - تسجيل الأخطاء المهمة
          
          **🔍 تحليل الأخطاء فقط**
          - تقرير مفصل عن مشاكل معالجة الأخطاء
          - اكتشاف النقاط الضعيفة
          
          ماذا تختار؟
        choices:
          - label: "🛡️ المعالجة الشاملة + التتبع والتحليل"
            value: "comprehensive_error_handling"
          - label: "⚡ المعالجة الأساسية للأخطاء الحرجة"
            value: "basic_error_handling"
          - label: "📝 تحسين تسجيل الأخطاء"
            value: "improve_error_logging"
          - label: "💬 رسائل خطأ مخصصة للمستخدم"
            value: "custom_error_messages"
          - label: "🔄 آلية إعادة المحاولة"
            value: "retry_mechanism"
          - label: "📊 تتبع وتحليل الأخطاء"
            value: "error_tracking_analytics"
          - label: "🔒 حماية من تسريب المعلومات"
            value: "secure_error_handling"
          - label: "🚨 نظام إنذار للأخطاء الحرجة"
            value: "critical_error_alerts"
          - label: "⏭️ تجاهل هذه المرة"
            value: "skip_error_handling_enhancement"
        next_actions:
          comprehensive_error_handling:
            - action: ai_command
              command: >
                🛡️ **تفعيل معالجة الأخطاء الشاملة**
                
                **تحليل الأخطاء:**
                - التطبيق: {{context.appType}}
                - المشاكل المكتشفة: {{context.detectedErrorHandlingIssues.length}}
                - الاستثناءات غير المعالجة: {{context.errorMetrics.unhandledExceptions}}
                - نجاح الاستعادة: {{context.errorMetrics.errorRecoverySuccess}}%
                
                سأقوم بإنشاء نظام معالجة أخطاء شامل:
                
                **1. إنشاء CodoraErrorHandler:**
                ```dart
                /// **نظام معالجة الأخطاء الشامل لكودورا**
                /// 
                /// 🛡️ **الوصف:**
                /// نظام معالجة أخطاء متقدم يوفر تسجيل شامل ورسائل مخصصة
                /// مع آليات استعادة تلقائية وتتبع مفصل للأخطاء
                /// 
                /// 🔧 **الميزات:**
                /// - تسجيل مفصل لجميع الأخطاء
                /// - رسائل خطأ مخصصة للمستخدم
                /// - آلية إعادة المحاولة التلقائية
                /// - تتبع الأخطاء وإرسال التقارير
                /// - استعادة تلقائية من الأخطاء
                /// - تحليل أنماط الأخطاء
                /// 
                /// 📱 **التطبيق:** {{context.appType}}
                /// 🎯 **مستوى الحماية:** Enterprise
                class CodoraErrorHandler extends GetxService {
                  static final _instance = CodoraErrorHandler._internal();
                  factory CodoraErrorHandler() => _instance;
                  CodoraErrorHandler._internal();
                  
                  final _logger = Logger('CodoraErrorHandler');
                  final _errorHistory = <ErrorRecord>[];
                  final _errorAnalytics = <String, int>{};
                  
                  @override
                  void onInit() {
                    super.onInit();
                    _initializeErrorHandling();
                  }
                  
                  /// تهيئة نظام معالجة الأخطاء
                  void _initializeErrorHandling() {
                    // تسجيل handler للأخطاء غير المعالجة
                    FlutterError.onError = (FlutterErrorDetails details) {
                      handleFlutterError(details);
                    };
                    
                    // تسجيل handler للأخطاء في isolates
                    PlatformDispatcher.instance.onError = (error, stack) {
                      handlePlatformError(error, stack);
                      return true;
                    };
                  }
                  
                  /// **معالجة الأخطاء العامة**
                  /// 
                  /// 📋 **الوصف:**
                  /// دالة شاملة لمعالجة جميع أنواع الأخطاء مع تسجيل
                  /// مفصل وعرض رسائل مناسبة للمستخدم
                  /// 
                  /// 📥 **المعاملات:**
                  /// - [error]: الخطأ المراد معالجته
                  /// - [stackTrace]: تتبع المكدس (اختياري)
                  /// - [context]: سياق Widget للعرض (اختياري)
                  /// - [operation]: اسم العملية التي حدث فيها الخطأ
                  /// - [showToUser]: هل يجب عرض الخطأ للمستخدم
                  /// - [allowRetry]: السماح بإعادة المحاولة
                  /// 
                  /// 📤 **المخرجات:**
                  /// - Future<void>: عملية غير متزامنة لمعالجة الخطأ
                  /// 
                  /// 🔧 **مثال:**
                  /// ```dart
                  /// try {
                  ///   await riskOperation();
                  /// } catch (error, stackTrace) {
                  ///   await CodoraErrorHandler().handleError(
                  ///     error,
                  ///     stackTrace: stackTrace,
                  ///     context: context,
                  ///     operation: 'جلب البيانات',
                  ///     showToUser: true,
                  ///     allowRetry: true,
                  ///   );
                  /// }
                  /// ```
                  static Future<void> handleError(
                    dynamic error, {
                    StackTrace? stackTrace,
                    BuildContext? context,
                    String? operation,
                    bool showToUser = true,
                    bool allowRetry = false,
                    Map<String, dynamic>? metadata,
                  }) async {
                    try {
                      // إنشاء سجل خطأ مفصل
                      final errorRecord = ErrorRecord(
                        error: error,
                        stackTrace: stackTrace,
                        timestamp: DateTime.now(),
                        operation: operation ?? 'عملية غير محددة',
                        appType: '{{context.appType}}',
                        userId: await _getCurrentUserId(),
                        deviceInfo: await _getDeviceInfo(),
                        metadata: metadata ?? {},
                      );
                      
                      // تسجيل الخطأ
                      await _logError(errorRecord);
                      
                      // تحديث إحصائيات الأخطاء
                      _updateErrorAnalytics(error);
                      
                      // معالجة أنواع الأخطاء المختلفة
                      final handledError = _categorizeAndHandleError(error);
                      
                      // عرض رسالة للمستخدم إذا مطلوب
                      if (showToUser && context != null) {
                        await _showUserFriendlyError(
                          context,
                          handledError,
                          allowRetry: allowRetry,
                          operation: operation,
                        );
                      }
                      
                      // إرسال تقرير الخطأ إذا كان حرجاً
                      if (_isCriticalError(error)) {
                        await _sendErrorReport(errorRecord);
                      }
                      
                      // محاولة الاستعادة التلقائية
                      await _attemptAutoRecovery(error, operation);
                      
                    } catch (handlingError) {
                      // خطأ في معالجة الخطأ - تسجيل أساسي
                      debugPrint('خطأ في معالجة الخطأ: $handlingError');
                      _fallbackErrorHandling(error, handlingError);
                    }
                  }
                  
                  /// **معالجة أخطاء الشبكة**
                  /// 
                  /// 📋 **الوصف:**
                  /// معالجة متخصصة لأخطاء الشبكة مع إعادة المحاولة
                  /// التلقائية ورسائل مناسبة للمستخدم
                  /// 
                  /// 📥 **المعاملات:**
                  /// - [error]: خطأ الشبكة
                  /// - [retryCallback]: دالة إعادة المحاولة
                  /// - [maxRetries]: أقصى عدد محاولات (افتراضي: 3)
                  /// - [retryDelay]: التأخير بين المحاولات (افتراضي: 2 ثانية)
                  /// 
                  /// 📤 **المخرجات:**
                  /// - Future<T?>: النتيجة بعد المعالجة أو null
                  /// 
                  /// 🔧 **مثال:**
                  /// ```dart
                  /// final result = await CodoraErrorHandler.handleNetworkError<List<Product>>(
                  ///   error,
                  ///   retryCallback: () => productService.fetchProducts(),
                  ///   maxRetries: 3,
                  /// );
                  /// ```
                  static Future<T?> handleNetworkError<T>(
                    dynamic error, {
                    Future<T> Function()? retryCallback,
                    int maxRetries = 3,
                    Duration retryDelay = const Duration(seconds: 2),
                    BuildContext? context,
                  }) async {
                    // تسجيل خطأ الشبكة
                    _instance._logger.severe('خطأ شبكة: $error');
                    
                    // تحديد نوع خطأ الشبكة
                    final networkErrorType = _categorizeNetworkError(error);
                    
                    // محاولة الإعادة إذا كان مناسباً
                    if (retryCallback != null && _shouldRetryNetworkError(networkErrorType)) {
                      return await _retryWithBackoff<T>(
                        retryCallback,
                        maxRetries: maxRetries,
                        retryDelay: retryDelay,
                      );
                    }
                    
                    // عرض رسالة مناسبة للمستخدم
                    if (context != null) {
                      await _showNetworkErrorMessage(context, networkErrorType);
                    }
                    
                    return null;
                  }
                  
                  /// **معالجة أخطاء التحقق**
                  /// 
                  /// 📋 **الوصف:**
                  /// معالجة أخطاء التحقق من صحة البيانات مع رسائل
                  /// واضحة ومفيدة للمستخدم
                  /// 
                  /// 📥 **المعاملات:**
                  /// - [validationErrors]: قائمة أخطاء التحقق
                  /// - [context]: سياق Widget للعرض
                  /// - [formKey]: مفتاح النموذج لتمييز الحقول
                  /// 
                  /// 📤 **المخرجات:**
                  /// - Future<void>: عملية عرض أخطاء التحقق
                  static Future<void> handleValidationErrors(
                    List<ValidationError> validationErrors,
                    BuildContext context, {
                    GlobalKey<FormState>? formKey,
                  }) async {
                    for (final error in validationErrors) {
                      // تسجيل خطأ التحقق
                      _instance._logger.warning('خطأ تحقق: ${error.field} - ${error.message}');
                      
                      // عرض الخطأ في الحقل المناسب
                      await _highlightErrorField(context, error, formKey);
                    }
                    
                    // عرض ملخص الأخطاء
                    await _showValidationSummary(context, validationErrors);
                  }
                  
                  /// **إنشاء تقرير أخطاء شامل**
                  /// 
                  /// 📋 **الوصف:**
                  /// ينشئ تقريراً مفصلاً عن جميع الأخطاء التي حدثت
                  /// مع تحليل الأنماط والاتجاهات
                  /// 
                  /// 📤 **المخرجات:**
                  /// - Future<ErrorReport>: تقرير شامل عن الأخطاء
                  static Future<ErrorReport> generateErrorReport() async {
                    return ErrorReport(
                      reportDate: DateTime.now(),
                      totalErrors: _instance._errorHistory.length,
                      errorsByType: _instance._errorAnalytics,
                      criticalErrors: _instance._errorHistory.where(_isCriticalError).length,
                      mostCommonErrors: _getMostCommonErrors(),
                      errorTrends: _analyzeErrorTrends(),
                      recoveryRate: _calculateRecoveryRate(),
                      recommendations: _generateErrorRecommendations(),
                    );
                  }
                  
                  /// تصنيف ومعالجة الخطأ حسب نوعه
                  static CodoraError _categorizeAndHandleError(dynamic error) {
                    if (error is SocketException || error is HttpException) {
                      return CodoraError.network(
                        message: 'فشل في الاتصال بالخادم',
                        originalError: error,
                        userMessage: 'تحقق من اتصال الإنترنت وحاول مرة أخرى',
                        canRetry: true,
                      );
                    }
                    
                    if (error is FormatException) {
                      return CodoraError.parsing(
                        message: 'خطأ في تنسيق البيانات',
                        originalError: error,
                        userMessage: 'حدث خطأ في معالجة البيانات',
                        canRetry: false,
                      );
                    }
                    
                    if (error is FirebaseException) {
                      return CodoraError.firebase(
                        message: 'خطأ في خدمة Firebase',
                        originalError: error,
                        userMessage: _getFirebaseErrorMessage(error.code),
                        canRetry: _canRetryFirebaseError(error.code),
                      );
                    }
                    
                    if (error is TimeoutException) {
                      return CodoraError.timeout(
                        message: 'انتهت المهلة الزمنية',
                        originalError: error,
                        userMessage: 'العملية استغرقت وقتاً أطول من المتوقع',
                        canRetry: true,
                      );
                    }
                    
                    // خطأ عام
                    return CodoraError.general(
                      message: 'خطأ غير متوقع',
                      originalError: error,
                      userMessage: 'حدث خطأ غير متوقع، يرجى المحاولة مرة أخرى',
                      canRetry: false,
                    );
                  }
                }
                
                /// **سجل الخطأ المفصل**
                class ErrorRecord {
                  final dynamic error;
                  final StackTrace? stackTrace;
                  final DateTime timestamp;
                  final String operation;
                  final String appType;
                  final String? userId;
                  final Map<String, dynamic> deviceInfo;
                  final Map<String, dynamic> metadata;
                  
                  ErrorRecord({
                    required this.error,
                    this.stackTrace,
                    required this.timestamp,
                    required this.operation,
                    required this.appType,
                    this.userId,
                    required this.deviceInfo,
                    required this.metadata,
                  });
                }
                ```
                
                **2. إنشاء CodoraError class:**
                ```dart
                /// **كلاس الأخطاء المخصص لكودورا**
                class CodoraError {
                  final String message;
                  final dynamic originalError;
                  final String userMessage;
                  final bool canRetry;
                  final ErrorSeverity severity;
                  final ErrorCategory category;
                  
                  CodoraError({
                    required this.message,
                    this.originalError,
                    required this.userMessage,
                    required this.canRetry,
                    this.severity = ErrorSeverity.medium,
                    required this.category,
                  });
                  
                  // مصنع للأخطاء الشبكة
                  factory CodoraError.network({
                    required String message,
                    dynamic originalError,
                    required String userMessage,
                    required bool canRetry,
                  }) =>
                      CodoraError(
                        message: message,
                        originalError: originalError,
                        userMessage: userMessage,
                        canRetry: canRetry,
                        severity: ErrorSeverity.high,
                        category: ErrorCategory.network,
                      );
                  
                  // مصنع لأخطاء التحليل
                  factory CodoraError.parsing({
                    required String message,
                    dynamic originalError,
                    required String userMessage,
                    required bool canRetry,
                  }) =>
                      CodoraError(
                        message: message,
                        originalError: originalError,
                        userMessage: userMessage,
                        canRetry: canRetry,
                        severity: ErrorSeverity.medium,
                        category: ErrorCategory.parsing,
                      );
                }
                
                /// مستويات شدة الخطأ
                enum ErrorSeverity {
                  low,
                  medium,
                  high,
                  critical,
                }
                
                /// تصنيفات الأخطاء
                enum ErrorCategory {
                  network,
                  parsing,
                  firebase,
                  timeout,
                  validation,
                  permission,
                  general,
                }
                ```
                
                **المرحلة 2:** إنشاء واجهات المستخدم لعرض الأخطاء وتحليل الأنماط
          basic_error_handling:
            - action: ai_command
              command: >
                ⚡ **إضافة معالجة الأخطاء الأساسية**
                
                سأقوم بإضافة معالجة أخطاء أساسية:
                - try-catch للعمليات الحرجة
                - رسائل خطأ للمستخدم
                - تسجيل الأخطاء المهمة
                - معالجة أخطاء الشبكة
          skip_error_handling_enhancement:
            - action: no_op
              message: "تم تجاهل تحسينات معالجة الأخطاء. معالجة الأخطاء الجيدة تحسن تجربة المستخدم وتسهل الصيانة."

  # قاعدة تحسين قاعدة البيانات الذكي
  - id: intelligent-database-optimization
    description: "تحسين أداء قاعدة البيانات مع فهرسة ذكية وaستعلامات محسّنة"
    context:
      databaseMetrics:
        totalQueries: 89
        slowQueries: 12
        optimizedQueries: 67
        indexedFields: 34
        averageQueryTime: 245
        databaseSize: 89.5
        cacheHitRate: 78
        connectionPoolSize: 15
      when:
        intent.name == "apply_edit" &&
        intent.details.edits.some(edit =>
          edit.content && (
            edit.content.includes('FirebaseFirestore') ||
            edit.content.includes('collection(') ||
            edit.content.includes('.where(') ||
            edit.content.includes('.orderBy(') ||
            edit.content.includes('query') ||
            edit.content.includes('database')
          )
        )
    then:
      - action: prompt
        message: >
          🗄️ **محسّن قاعدة البيانات الذكي مُفعّل!**
          
          📊 **مقاييس قاعدة البيانات:**
          - الاستعلامات البطيئة: {{context.databaseMetrics.slowQueries}}/{{context.databaseMetrics.totalQueries}}
          - متوسط وقت الاستعلام: {{context.databaseMetrics.averageQueryTime}}ms
          - معدل نجاح الذاكرة المؤقتة: {{context.databaseMetrics.cacheHitRate}}%
          - حجم قاعدة البيانات: {{context.databaseMetrics.databaseSize}}MB
          
          🎯 **خيارات التحسين:**
        choices:
          - label: "🚀 تحسين شامل لقاعدة البيانات"
            value: "comprehensive_database_optimization"
          - label: "📊 تحسين الاستعلامات"
            value: "query_optimization"
          - label: "💾 تحسين التخزين المؤقت"
            value: "caching_optimization"
        next_actions:
          comprehensive_database_optimization:
            - action: ai_command
              command: "إنشاء CodoraDatabaseOptimizer مع تحسين الاستعلامات والفهرسة والتخزين المؤقت الذكي"

  # قاعدة تحسين الوسائط الذكي
  - id: intelligent-media-optimization
    description: "ضغط وتحسين الصور والفيديوهات مع تحميل تدريجي ذكي"
    context:
      mediaMetrics:
        totalImages: 145
        unoptimizedImages: 67
        averageImageSize: 2.3
        compressionRate: 65
        lazyLoadingEnabled: 45
        cacheEfficiency: 72
        loadingTime: 3.2
      when:
        intent.name == "apply_edit" &&
        intent.details.edits.some(edit =>
          edit.content && (
            edit.content.includes('Image.') ||
            edit.content.includes('NetworkImage') ||
            edit.content.includes('AssetImage') ||
            edit.content.includes('video') ||
            edit.content.includes('media') ||
            edit.content.includes('photo')
          )
        )
    then:
      - action: prompt
        message: >
          🖼️ **محسّن الوسائط الذكي مُفعّل!**
          
          📊 **مقاييس الوسائط:**
          - الصور غير المحسّنة: {{context.mediaMetrics.unoptimizedImages}}/{{context.mediaMetrics.totalImages}}
          - متوسط حجم الصورة: {{context.mediaMetrics.averageImageSize}}MB
          - معدل الضغط: {{context.mediaMetrics.compressionRate}}%
          - وقت التحميل: {{context.mediaMetrics.loadingTime}}s
          
          🎯 **خيارات التحسين:**
        choices:
          - label: "🖼️ تحسين شامل للوسائط"
            value: "comprehensive_media_optimization"
          - label: "📱 ضغط الصور التلقائي"
            value: "auto_image_compression"
          - label: "⚡ تحميل تدريجي ذكي"
            value: "smart_lazy_loading"
        next_actions:
          comprehensive_media_optimization:
            - action: ai_command
              command: "إنشاء CodoraMediaOptimizer مع ضغط تلقائي وتحميل تدريجي وذاكرة مؤقتة متقدمة"

  # قاعدة الإشعارات والتحديثات الذكية
  - id: intelligent-notifications-updates
    description: "نظام إشعارات ذكي مع تحديثات تلقائية ومخصصة للمستخدم"
    context:
      notificationMetrics:
        totalNotifications: 234
        deliveredNotifications: 189
        clickThroughRate: 23.5
        unsubscribeRate: 3.2
        realTimeUpdates: 78
        pushNotificationEnabled: 85
        customNotifications: 45
      when:
        intent.name == "apply_edit" &&
        intent.details.edits.some(edit =>
          edit.content && (
            edit.content.includes('notification') ||
            edit.content.includes('FCM') ||
            edit.content.includes('push') ||
            edit.content.includes('alert') ||
            edit.content.includes('update') ||
            edit.content.includes('Firebase') ||
            edit.content.includes('messaging')
          )
        )
    then:
      - action: prompt
        message: >
          🔔 **نظام الإشعارات الذكي مُفعّل!**
          
          📊 **مقاييس الإشعارات:**
          - معدل التسليم: {{context.notificationMetrics.deliveredNotifications}}/{{context.notificationMetrics.totalNotifications}}
          - معدل النقر: {{context.notificationMetrics.clickThroughRate}}%
          - التحديثات المباشرة: {{context.notificationMetrics.realTimeUpdates}}%
          - الإشعارات المخصصة: {{context.notificationMetrics.customNotifications}}%
          
          🎯 **خيارات التحسين:**
        choices:
          - label: "🔔 نظام إشعارات شامل"
            value: "comprehensive_notification_system"
          - label: "⚡ إشعارات مباشرة"
            value: "real_time_notifications"
          - label: "🎯 إشعارات مخصصة"
            value: "personalized_notifications"
        next_actions:
          comprehensive_notification_system:
            - action: ai_command
              command: "إنشاء CodoraNotificationManager مع إشعارات مخصصة وتحديثات مباشرة وتحليلات متقدمة"

  # قاعدة البحث والتصفية الذكية
  - id: intelligent-search-filtering
    description: "نظام بحث متقدم مع تصفية ذكية وترتيب بالذكاء الاصطناعي"
    context:
      searchMetrics:
        totalSearches: 567
        successfulSearches: 445
        averageSearchTime: 0.8
        filterUsage: 67
        autoCompleteEnabled: 78
        searchAccuracy: 89
        popularSearchTerms: 45
      when:
        intent.name == "apply_edit" &&
        intent.details.edits.some(edit =>
          edit.content && (
            edit.content.includes('search') ||
            edit.content.includes('filter') ||
            edit.content.includes('SearchBar') ||
            edit.content.includes('TextField') ||
            edit.content.includes('.where(') ||
            edit.content.includes('query') ||
            edit.content.includes('autocomplete')
          )
        )
    then:
      - action: prompt
        message: >
          🔍 **نظام البحث الذكي مُفعّل!**
          
          📊 **مقاييس البحث:**
          - نجاح البحث: {{context.searchMetrics.successfulSearches}}/{{context.searchMetrics.totalSearches}}
          - متوسط وقت البحث: {{context.searchMetrics.averageSearchTime}}s
          - دقة البحث: {{context.searchMetrics.searchAccuracy}}%
          - استخدام التصفية: {{context.searchMetrics.filterUsage}}%
          
          🎯 **خيارات التحسين:**
        choices:
          - label: "🔍 نظام بحث شامل"
            value: "comprehensive_search_system"
          - label: "🤖 بحث بالذكاء الاصطناعي"
            value: "ai_powered_search"
          - label: "⚡ بحث فوري"
            value: "instant_search"
        next_actions:
          comprehensive_search_system:
            - action: ai_command
              command: "إنشاء CodoraSearchEngine مع بحث ذكي وتصفية متقدمة وإكمال تلقائي"

  # قاعدة التخزين المؤقت الذكي
  - id: intelligent-cache-storage
    description: "نظام تخزين مؤقت ذكي مع إدارة تلقائية للذاكرة والتنظيف"
    context:
      cacheMetrics:
        totalCacheSize: 123.4
        cacheHitRate: 78.5
        cacheMissRate: 21.5
        cacheEvictions: 45
        storageEfficiency: 89
        autoCleanupEnabled: 67
        compressionRate: 72
      when:
        intent.name == "apply_edit" &&
        intent.details.edits.some(edit =>
          edit.content && (
            edit.content.includes('cache') ||
            edit.content.includes('storage') ||
            edit.content.includes('SharedPreferences') ||
            edit.content.includes('prefs') ||
            edit.content.includes('local') ||
            edit.content.includes('memory') ||
            edit.content.includes('persist')
          )
        )
    then:
      - action: prompt
        message: >
          💾 **نظام التخزين المؤقت الذكي مُفعّل!**
          
          📊 **مقاييس التخزين:**
          - حجم التخزين المؤقت: {{context.cacheMetrics.totalCacheSize}}MB
          - معدل النجاح: {{context.cacheMetrics.cacheHitRate}}%
          - كفاءة التخزين: {{context.cacheMetrics.storageEfficiency}}%
          - معدل الضغط: {{context.cacheMetrics.compressionRate}}%
          
          🎯 **خيارات التحسين:**
        choices:
          - label: "💾 نظام تخزين شامل"
            value: "comprehensive_storage_system"
          - label: "🧹 تنظيف تلقائي"
            value: "auto_cleanup_system"
          - label: "📊 تحليل الاستخدام"
            value: "usage_analytics"
        next_actions:
          comprehensive_storage_system:
            - action: ai_command
              command: "إنشاء CodoraCacheManager مع تخزين مؤقت ذكي وتنظيف تلقائي وضغط متقدم"

  # قاعدة النماذج والتحقق الذكي
  - id: intelligent-forms-validation
    description: "نظام نماذج متقدم مع تحقق ذكي وواجهة مستخدم تفاعلية"
    context:
      formMetrics:
        totalForms: 23
        validatedFields: 67
        validationErrors: 34
        autoValidationEnabled: 78
        realTimeValidation: 56
        customValidators: 12
        formCompletionRate: 89
      when:
        intent.name == "apply_edit" &&
        intent.details.edits.some(edit =>
          edit.content && (
            edit.content.includes('Form') ||
            edit.content.includes('TextFormField') ||
            edit.content.includes('validator') ||
            edit.content.includes('validation') ||
            edit.content.includes('GlobalKey<FormState>') ||
            edit.content.includes('formKey') ||
            edit.content.includes('validate')
          )
        )
    then:
      - action: prompt
        message: >
          📝 **نظام النماذج الذكي مُفعّل!**
          
          📊 **مقاييس النماذج:**
          - الحقول المُتحقق منها: {{context.formMetrics.validatedFields}}
          - أخطاء التحقق: {{context.formMetrics.validationErrors}}
          - التحقق المباشر: {{context.formMetrics.realTimeValidation}}%
          - معدل إكمال النماذج: {{context.formMetrics.formCompletionRate}}%
          
          🎯 **خيارات التحسين:**
        choices:
          - label: "📝 نظام نماذج شامل"
            value: "comprehensive_form_system"
          - label: "✅ تحقق ذكي"
            value: "smart_validation"
          - label: "🎨 واجهة تفاعلية"
            value: "interactive_ui"
        next_actions:
          comprehensive_form_system:
            - action: ai_command
              command: "إنشاء CodoraFormBuilder مع تحقق ذكي وواجهة تفاعلية ومعالجة أخطاء متقدمة"

  # قاعدة محلل الأداء التنبؤي الذكي
  - id: intelligent-predictive-performance-analyzer
    description: "محلل الأداء التنبؤي بالذكاء الاصطناعي - يتنبأ بمشاكل الأداء قبل حدوثها"
    context:
      performancePredictionMetrics:
        currentPerformanceScore: 7.4
        predictedBottlenecks: 8
        resolvedPredictions: 15
        accuracyRate: 89.5
        monitoringDuration: 72
        performanceTrends: "تحسن تدريجي"
        criticalAreas: ["memory_usage", "network_calls", "ui_rendering"]
        predictionConfidence: 92.3
        optimizationOpportunities: 12
      performanceThresholds:
        warningThreshold: 6.0
        criticalThreshold: 4.0
        excellentThreshold: 8.5
        monitoringInterval: 5
        predictionHorizon: 24
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('performance') ||
          edit.content.includes('optimization') ||
          edit.content.includes('async') ||
          edit.content.includes('Future') ||
          edit.content.includes('Stream') ||
          edit.content.includes('Timer') ||
          edit.content.includes('animation') ||
          edit.content.toLowerCase().includes('build') ||
          edit.content.includes('setState') ||
          edit.content.includes('GetBuilder') ||
          edit.content.includes('Obx')
        )
      )
    then:
      - action: prompt
        message: >
          🔮 **محلل الأداء التنبؤي الذكي مُفعّل!**
          
          📊 **التحليل التنبؤي الحالي:**
          - نقاط الأداء الحالية: {{context.performancePredictionMetrics.currentPerformanceScore}}/10
          - الاختناقات المتوقعة: {{context.performancePredictionMetrics.predictedBottlenecks}}
          - دقة التنبؤات: {{context.performancePredictionMetrics.accuracyRate}}%
          - الثقة في التنبؤ: {{context.performancePredictionMetrics.predictionConfidence}}%
          - المناطق الحرجة: {{context.performancePredictionMetrics.criticalAreas.join(', ')}}
          
          🎯 **اتجاه الأداء**: {{context.performancePredictionMetrics.performanceTrends}}
          ⚡ **فرص التحسين**: {{context.performancePredictionMetrics.optimizationOpportunities}}
          
          🚀 **خيارات التحسين التنبؤي:**
        choices:
          - label: "🔮 تحليل تنبؤي شامل للأداء"
            value: "comprehensive_predictive_analysis"
          - label: "⚡ تحسين استباقي للأداء"
            value: "proactive_performance_optimization"
          - label: "📊 مراقبة الأداء المستمرة"
            value: "continuous_performance_monitoring"
          - label: "🎯 تحسين مناطق محددة"
            value: "targeted_performance_improvement"
        next_actions:
          comprehensive_predictive_analysis:
            - action: ai_command
              command: >
                🔮 **تنفيذ محلل الأداء التنبؤي الشامل**
                
                **المرحلة 1: تحليل الأداء التنبؤي المكتشف** 🎯
                
                نقاط الأداء الحالية: {{context.performancePredictionMetrics.currentPerformanceScore}}/10
                الاختناقات المتوقعة: {{context.performancePredictionMetrics.predictedBottlenecks}}
                المناطق الحرجة: {{context.performancePredictionMetrics.criticalAreas.join(', ')}}
                
                سأقوم بإنشاء نظام تحليل تنبؤي متطور للأداء مع CodoraPredictivePerformanceAnalyzer شامل يتضمن:
                - نماذج التعلم الآلي للتنبؤ بالأداء
                - التنبؤ بالاختناقات قبل حدوثها  
                - تحسين استباقي تلقائي
                - نظام تنبيهات ذكي
                - تحليل الأنماط والاتجاهات
                - لوحة معلومات تفاعلية
                
                **المتوقع:** تحسين الأداء 45-65%، تقليل الاختناقات 80%، دقة {{context.performancePredictionMetrics.accuracyRate}}%
          proactive_performance_optimization:
            - action: ai_command
              command: >
                ⚡ **تحسين الأداء الاستباقي**
                
                سأقوم بتنفيذ تحسينات استباقية للأداء:
                - تحسين الذاكرة المتوقع
                - تحسين الشبكة الذكي
                - تحسين الواجهة التلقائي
                - منع الاختناقات المتوقعة
          continuous_performance_monitoring:
            - action: ai_command
              command: >
                📊 **مراقبة الأداء المستمرة**
                
                سأقوم بإعداد نظام مراقبة مستمرة:
                - مراقبة كل {{context.performanceThresholds.monitoringInterval}} دقائق
                - تنبيهات فورية للمشاكل المتوقعة
                - تقارير يومية وأسبوعية
                - تحليل الاتجاهات طويلة المدى
          targeted_performance_improvement:
            - action: ai_command
              command: >
                🎯 **تحسين مناطق محددة**
                
                سأقوم بتحسين المناطق الحرجة المحددة:
                {{context.performancePredictionMetrics.criticalAreas.map(area => `- تحسين ${area}`).join('\n')}}
                
                التركيز على الفرص الـ {{context.performancePredictionMetrics.optimizationOpportunities}} المحددة

  # قاعدة حماية البيانات المتقدمة الذكية
  - id: intelligent-advanced-data-protection
    description: "نظام حماية البيانات المتقدم بالذكاء الاصطناعي - حماية ذكية شاملة للبيانات الحساسة"
    context:
      dataProtectionMetrics:
        encryptedDataPercentage: 78.5
        vulnerabilitiesDetected: 12
        resolvedVulnerabilities: 9
        dataLeakPrevention: 94.2
        securityScore: 8.3
        sensitiveDataIdentified: 156
        encryptionStrength: "AES-256"
        accessControlEnabled: 89
        auditTrailCompleteness: 92.7
        threatDetectionAccuracy: 87.4
        maliciousActivityBlocked: 23
      securityThresholds:
        minEncryptionPercentage: 85.0
        maxVulnerabilities: 5
        minSecurityScore: 8.0
        criticalDataTypes: ["personal_info", "payment_data", "auth_tokens", "api_keys"]
        monitoringInterval: 10
        threatResponseTime: 30
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('password') ||
          edit.content.includes('token') ||
          edit.content.includes('api') ||
          edit.content.includes('secret') ||
          edit.content.includes('key') ||
          edit.content.includes('encrypt') ||
          edit.content.includes('secure') ||
          edit.content.includes('auth') ||
          edit.content.includes('login') ||
          edit.content.includes('user') ||
          edit.content.includes('data') ||
          edit.content.includes('sensitive') ||
          edit.content.includes('privacy') ||
          edit.content.includes('personal')
        )
      )
    then:
      - action: prompt
        message: >
          🛡️ **نظام حماية البيانات المتقدم مُفعّل!**
          
          📊 **تقييم الأمان الحالي:**
          - البيانات المشفرة: {{context.dataProtectionMetrics.encryptedDataPercentage}}%
          - نقاط الأمان: {{context.dataProtectionMetrics.securityScore}}/10
          - الثغرات المكتشفة: {{context.dataProtectionMetrics.vulnerabilitiesDetected}}
          - منع تسريب البيانات: {{context.dataProtectionMetrics.dataLeakPrevention}}%
          - دقة اكتشاف التهديدات: {{context.dataProtectionMetrics.threatDetectionAccuracy}}%
          - الأنشطة الضارة المحجوبة: {{context.dataProtectionMetrics.maliciousActivityBlocked}}
          
          🔐 **قوة التشفير**: {{context.dataProtectionMetrics.encryptionStrength}}
          📝 **اكتمال سجل المراجعة**: {{context.dataProtectionMetrics.auditTrailCompleteness}}%
          
          🚀 **خيارات الحماية المتقدمة:**
        choices:
          - label: "🛡️ حماية شاملة للبيانات"
            value: "comprehensive_data_protection"
          - label: "🔒 تشفير متقدم"
            value: "advanced_encryption"
          - label: "🕵️ مراقبة التهديدات"
            value: "threat_monitoring"
          - label: "📊 تحليل الثغرات الأمنية"
            value: "vulnerability_analysis"
        next_actions:
          comprehensive_data_protection:
            - action: ai_command
              command: >
                🛡️ **تنفيذ نظام حماية البيانات الشامل**
                
                **المرحلة 1: تحليل الأمان المكتشف** 🔍
                
                البيانات المشفرة: {{context.dataProtectionMetrics.encryptedDataPercentage}}%
                الثغرات المكتشفة: {{context.dataProtectionMetrics.vulnerabilitiesDetected}}
                نقاط الأمان: {{context.dataProtectionMetrics.securityScore}}/10
                البيانات الحساسة المحددة: {{context.dataProtectionMetrics.sensitiveDataIdentified}}
                
                سأقوم بإنشاء نظام حماية بيانات متطور مع CodoraAdvancedDataProtector شامل يتضمن:
                - تشفير تلقائي للبيانات الحساسة بـ {{context.dataProtectionMetrics.encryptionStrength}}
                - اكتشاف وحماية من التسريبات
                - مراقبة التهديدات المباشرة
                - نظام مراجعة وتتبع شامل
                - حماية متقدمة من الهجمات
                - إدارة المفاتيح الآمنة
                - تحليل السلوك الغير طبيعي
                - تقارير أمنية مفصلة
                
                **الأهداف:** تحسين الأمان لـ {{context.securityThresholds.minSecurityScore}}/10، تشفير {{context.securityThresholds.minEncryptionPercentage}}%، تقليل الثغرات لأقل من {{context.securityThresholds.maxVulnerabilities}}
          advanced_encryption:
            - action: ai_command
              command: >
                🔒 **تنفيذ التشفير المتقدم**
                
                سأقوم بتطبيق تشفير متقدم للبيانات:
                - تشفير {{context.dataProtectionMetrics.encryptionStrength}} للبيانات الحساسة
                - تشفير قواعد البيانات المحلية
                - تشفير التخزين المؤقت
                - حماية مفاتيح التشفير
                - تدوير المفاتيح التلقائي 
          threat_monitoring:
            - action: ai_command
              command: >
                🕵️ **مراقبة التهديدات المباشرة**
                
                سأقوم بإعداد نظام مراقبة تهديدات متقدم:
                - مراقبة كل {{context.securityThresholds.monitoringInterval}} دقائق
                - اكتشاف الأنشطة المشبوهة
                - استجابة فورية للتهديدات خلال {{context.securityThresholds.threatResponseTime}} ثانية
                - تحليل سلوك المستخدمين
                - حماية من الهجمات الشائعة
          vulnerability_analysis:
            - action: ai_command
              command: >
                📊 **تحليل الثغرات الأمنية الشامل**
                
                سأقوم بتحليل وإصلاح الثغرات الأمنية:
                - فحص الثغرات الحالية: {{context.dataProtectionMetrics.vulnerabilitiesDetected}}
                - تحليل البيانات الحساسة: {{context.securityThresholds.criticalDataTypes.join(', ')}}
                - إصلاح تلقائي للثغرات البسيطة
                - تقارير مفصلة للثغرات الحرجة
                                 - خطة عمل لتحسين الأمان

  # قاعدة إدارة الحالة الذكية
  - id: intelligent-state-management
    description: "نظام إدارة الحالة الذكي مع GetX - تحسين الأداء وتجنب Memory Leaks"
    context:
      stateManagementMetrics:
        totalControllers: 45
        activeControllers: 32
        memoryLeaks: 3
        unusedControllers: 8
        updateEfficiency: 89.2
        observerCount: 67
        lifecycleManagement: 78.5
        stateConsistency: 94.1
        reactiveProgramming: 85.6
        autoDisposal: 72.3
        syncErrors: 2
        asyncOperationsPending: 12
      stateThresholds:
        maxMemoryLeaks: 2
        minUpdateEfficiency: 85.0
        maxUnusedControllers: 5
        minLifecycleCompliance: 80.0
        maxSyncErrors: 1
        controllerTimeout: 300
        observerUpdateTime: 16
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('GetxController') ||
          edit.content.includes('GetBuilder') ||
          edit.content.includes('Obx') ||
          edit.content.includes('GetX') ||
          edit.content.includes('.obs') ||
          edit.content.includes('RxBool') ||
          edit.content.includes('RxString') ||
          edit.content.includes('RxInt') ||
          edit.content.includes('RxList') ||
          edit.content.includes('update()') ||
          edit.content.includes('dispose()') ||
          edit.content.includes('onInit()') ||
          edit.content.includes('onClose()') ||
          edit.content.includes('ever(') ||
          edit.content.includes('once(')
        )
      )
    then:
      - action: prompt
        message: >
          🔄 **نظام إدارة الحالة الذكي مُفعّل!**
          
          📊 **تقييم إدارة الحالة الحالي:**
          - المتحكمات النشطة: {{context.stateManagementMetrics.activeControllers}}/{{context.stateManagementMetrics.totalControllers}}
          - تسريبات الذاكرة: {{context.stateManagementMetrics.memoryLeaks}}
          - المتحكمات غير المستخدمة: {{context.stateManagementMetrics.unusedControllers}}
          - كفاءة التحديث: {{context.stateManagementMetrics.updateEfficiency}}%
          - إدارة دورة الحياة: {{context.stateManagementMetrics.lifecycleManagement}}%
          - ثبات الحالة: {{context.stateManagementMetrics.stateConsistency}}%
          - التخلص التلقائي: {{context.stateManagementMetrics.autoDisposal}}%
          
          ⚡ **عدد المراقبين**: {{context.stateManagementMetrics.observerCount}}
          🔄 **العمليات غير المتزامنة المعلقة**: {{context.stateManagementMetrics.asyncOperationsPending}}
          
          🚀 **خيارات تحسين إدارة الحالة:**
        choices:
          - label: "🔄 تحسين شامل لإدارة الحالة"
            value: "comprehensive_state_management"
          - label: "🧹 تنظيف Memory Leaks"
            value: "memory_leak_cleanup"
          - label: "⚡ تحسين الأداء التفاعلي"
            value: "reactive_performance_optimization"
          - label: "🔧 إدارة دورة الحياة"
            value: "lifecycle_management"
        next_actions:
          comprehensive_state_management:
            - action: ai_command
              command: >
                🔄 **تنفيذ نظام إدارة الحالة الشامل**
                
                **المرحلة 1: تحليل إدارة الحالة المكتشف** 📊
                
                المتحكمات النشطة: {{context.stateManagementMetrics.activeControllers}}/{{context.stateManagementMetrics.totalControllers}}
                تسريبات الذاكرة: {{context.stateManagementMetrics.memoryLeaks}}
                المتحكمات غير المستخدمة: {{context.stateManagementMetrics.unusedControllers}}
                كفاءة التحديث: {{context.stateManagementMetrics.updateEfficiency}}%
                
                سأقوم بإنشاء نظام إدارة حالة ذكي مع CodoraSmartStateManager شامل يتضمن:
                - تحسين أداء GetX Controllers
                - منع memory leaks تلقائياً
                - إدارة دورة الحياة الذكية
                - تحسين التحديثات التفاعلية
                - مراقبة الحالة المستمرة
                - تنظيف المتحكمات غير المستخدمة
                - synchronization ذكي للبيانات
                - تحسين الأداء التفاعلي
                - نظام تنبيهات للمشاكل
                - تقارير مفصلة للأداء
                
                **الأهداف:** تقليل memory leaks لأقل من {{context.stateThresholds.maxMemoryLeaks}}، كفاءة تحديث {{context.stateThresholds.minUpdateEfficiency}}%+، تنظيف {{context.stateManagementMetrics.unusedControllers}} متحكم غير مستخدم
          memory_leak_cleanup:
            - action: ai_command
              command: >
                🧹 **تنظيف Memory Leaks الذكي**
                
                سأقوم بتنظيف تسريبات الذاكرة:
                - إصلاح {{context.stateManagementMetrics.memoryLeaks}} تسريب موجود
                - إضافة التخلص التلقائي للمتحكمات
                - تحسين دورة الحياة
                - مراقبة مستمرة للتسريبات
                - تنظيف المراقبين غير المستخدمين
          reactive_performance_optimization:
            - action: ai_command
              command: >
                ⚡ **تحسين الأداء التفاعلي**
                
                سأقوم بتحسين الأداء التفاعلي:
                - تحسين {{context.stateManagementMetrics.observerCount}} مراقب
                - تقليل وقت التحديث لأقل من {{context.stateThresholds.observerUpdateTime}}ms
                - تحسين كفاءة التحديث لـ {{context.stateThresholds.minUpdateEfficiency}}%+
                - معالجة {{context.stateManagementMetrics.asyncOperationsPending}} عملية معلقة
                - إصلاح {{context.stateManagementMetrics.syncErrors}} خطأ تزامن
          lifecycle_management:
            - action: ai_command
              command: >
                🔧 **تحسين إدارة دورة الحياة**
                
                سأقوم بتحسين إدارة دورة الحياة:
                - تحسين امتثال دورة الحياة لـ {{context.stateThresholds.minLifecycleCompliance}}%+
                - إضافة onInit وonClose المناسبة
                - تحسين التخلص التلقائي من {{context.stateManagementMetrics.autoDisposal}}%
                - مراقبة timeout للمتحكمات ({{context.stateThresholds.controllerTimeout}}s)
                                 - منع الاستخدام بعد التخلص

  # قاعدة تجربة المستخدم التفاعلية الذكية
  - id: intelligent-interactive-user-experience
    description: "نظام تجربة المستخدم التفاعلي الذكي - تحسين UX بناءً على سلوك المستخدم"
    context:
      userExperienceMetrics:
        userSatisfactionScore: 8.2
        interactionHeatmapPoints: 234
        userEngagementRate: 76.8
        screenTimeAnalytics: 145.2
        gestureRecognitionAccuracy: 91.5
        accessibilityScore: 85.7
        animationPerformance: 88.3
        responsiveDesignScore: 92.1
        usabilityIndex: 89.4
        errorRecoveryRate: 78.9
        customizationLevel: 67.3
        learningCurveReduction: 43.2
        taskCompletionRate: 87.6
        navigationEfficiency: 94.8
      uxThresholds:
        minSatisfactionScore: 8.0
        minEngagementRate: 75.0
        maxErrorRate: 5.0
        minAccessibilityScore: 85.0
        minUsabilityIndex: 85.0
        animationFrameRate: 60
        maxResponseTime: 100
        touchTargetMinSize: 44
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('Widget') ||
          edit.content.includes('Scaffold') ||
          edit.content.includes('AppBar') ||
          edit.content.includes('Button') ||
          edit.content.includes('GestureDetector') ||
          edit.content.includes('AnimatedContainer') ||
          edit.content.includes('Animation') ||
          edit.content.includes('Theme') ||
          edit.content.includes('Color') ||
          edit.content.includes('accessibility') ||
          edit.content.includes('semantics') ||
          edit.content.includes('MediaQuery') ||
          edit.content.includes('responsive') ||
          edit.content.includes('interaction') ||
          edit.content.includes('user')
        )
      )
    then:
      - action: prompt
        message: >
          🎨 **نظام تجربة المستخدم التفاعلي مُفعّل!**
          
          📊 **تقييم تجربة المستخدم الحالي:**
          - نقاط رضا المستخدم: {{context.userExperienceMetrics.userSatisfactionScore}}/10
          - معدل التفاعل: {{context.userExperienceMetrics.userEngagementRate}}%
          - دقة التعرف على الإيماءات: {{context.userExperienceMetrics.gestureRecognitionAccuracy}}%
          - نقاط إمكانية الوصول: {{context.userExperienceMetrics.accessibilityScore}}/100
          - أداء الرسوم المتحركة: {{context.userExperienceMetrics.animationPerformance}}%
          - نقاط التصميم المتجاوب: {{context.userExperienceMetrics.responsiveDesignScore}}%
          - مؤشر سهولة الاستخدام: {{context.userExperienceMetrics.usabilityIndex}}%
          - معدل إنجاز المهام: {{context.userExperienceMetrics.taskCompletionRate}}%
          
          📈 **نقاط الخريطة الحرارية**: {{context.userExperienceMetrics.interactionHeatmapPoints}}
          🔧 **مستوى التخصيص**: {{context.userExperienceMetrics.customizationLevel}}%
          
          🚀 **خيارات تحسين تجربة المستخدم:**
        choices:
          - label: "🎨 تحسين شامل لتجربة المستخدم"
            value: "comprehensive_ux_optimization"
          - label: "🖱️ تحسين التفاعلات والإيماءات"
            value: "interaction_optimization"
          - label: "♿ تحسين إمكانية الوصول"
            value: "accessibility_enhancement"
          - label: "📱 تحسين التصميم المتجاوب"
            value: "responsive_design_optimization"
        next_actions:
          comprehensive_ux_optimization:
            - action: ai_command
              command: >
                🎨 **تنفيذ تحسين تجربة المستخدم الشامل**
                
                **المرحلة 1: تحليل تجربة المستخدم المكتشف** 📊
                
                نقاط رضا المستخدم: {{context.userExperienceMetrics.userSatisfactionScore}}/10
                معدل التفاعل: {{context.userExperienceMetrics.userEngagementRate}}%
                مؤشر سهولة الاستخدام: {{context.userExperienceMetrics.usabilityIndex}}%
                معدل إنجاز المهام: {{context.userExperienceMetrics.taskCompletionRate}}%
                
                سأقوم بإنشاء نظام تجربة مستخدم تفاعلي متطور مع CodoraInteractiveUXOptimizer شامل يتضمن:
                - تحليل سلوك المستخدم الذكي
                - تخصيص الواجهة بناءً على الاستخدام
                - تحسين الرسوم المتحركة والتفاعلات
                - نظام إمكانية وصول متقدم
                - تحليل الخريطة الحرارية للتفاعلات
                - تحسين التنقل والاستجابة
                - تقليل منحنى التعلم
                - نظام تحليلات UX مفصل
                - تحسين الأداء التفاعلي
                - A/B testing للواجهات
                
                **الأهداف:** رضا المستخدم {{context.uxThresholds.minSatisfactionScore}}+/10، تفاعل {{context.uxThresholds.minEngagementRate}}%+، إمكانية وصول {{context.uxThresholds.minAccessibilityScore}}%+
          interaction_optimization:
            - action: ai_command
              command: >
                🖱️ **تحسين التفاعلات والإيماءات**
                
                سأقوم بتحسين التفاعلات:
                - تحسين دقة التعرف على الإيماءات من {{context.userExperienceMetrics.gestureRecognitionAccuracy}}%
                - تحسين أداء الرسوم المتحركة لـ {{context.uxThresholds.animationFrameRate}} FPS
                - تحسين وقت الاستجابة لأقل من {{context.uxThresholds.maxResponseTime}}ms
                - تحليل {{context.userExperienceMetrics.interactionHeatmapPoints}} نقطة تفاعل
                - تحسين حجم أهداف اللمس لـ {{context.uxThresholds.touchTargetMinSize}}px
          accessibility_enhancement:
            - action: ai_command
              command: >
                ♿ **تحسين إمكانية الوصول الشامل**
                
                سأقوم بتحسين إمكانية الوصول:
                - رفع نقاط الوصول من {{context.userExperienceMetrics.accessibilityScore}} لـ {{context.uxThresholds.minAccessibilityScore}}%+
                - إضافة تسميات semantics شاملة
                - تحسين التنقل بالكيبورد
                - دعم قارئات الشاشة
                - تحسين التباين والألوان
                - دعم تكبير النص
          responsive_design_optimization:
            - action: ai_command
              command: >
                📱 **تحسين التصميم المتجاوب**
                
                سأقوم بتحسين التصميم المتجاوب:
                - تحسين نقاط التصميم المتجاوب من {{context.userExperienceMetrics.responsiveDesignScore}}%
                - تكييف تلقائي للشاشات المختلفة
                - تحسين التخطيطات للأجهزة اللوحية
                - تحسين الاستجابة للاتجاهات
                                 - تحسين أحجام الخطوط والأزرار

  # قاعدة إدارة الشبكة الذكية
  - id: intelligent-network-management
    description: "نظام إدارة الشبكة الذكي - تحسين الاتصالات والشبكة بذكاء"
    context:
      networkMetrics:
        connectionStability: 87.4
        averageLatency: 145.6
        dataTransferRate: 2.8
        retrySuccessRate: 78.9
        offlineCapability: 65.3
        compressionRatio: 72.1
        bandwidthUtilization: 68.7
        networkErrorRate: 4.2
        cacheHitRatio: 83.5
        timeoutOccurrences: 12
        connectionPoolEfficiency: 91.2
        dataIntegrityScore: 96.8
        downloadQueueSize: 23
        uploadFailureRate: 3.1
      networkThresholds:
        maxLatency: 200
        minStability: 85.0
        maxErrorRate: 5.0
        minCompressionRatio: 70.0
        maxTimeouts: 10
        minCacheHitRatio: 80.0
        maxRetryAttempts: 3
        connectionTimeout: 30
        bandwidthThreshold: 1.0
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('http') ||
          edit.content.includes('HttpClient') ||
          edit.content.includes('Request') ||
          edit.content.includes('Response') ||
          edit.content.includes('api') ||
          edit.content.includes('network') ||
          edit.content.includes('internet') ||
          edit.content.includes('connectivity') ||
          edit.content.includes('timeout') ||
          edit.content.includes('retry') ||
          edit.content.includes('offline') ||
          edit.content.includes('download') ||
          edit.content.includes('upload') ||
          edit.content.includes('dio') ||
          edit.content.includes('fetch')
        )
      )
    then:
      - action: prompt
        message: >
          🌐 **نظام إدارة الشبكة الذكي مُفعّل!**
          
          📊 **تقييم الشبكة الحالي:**
          - استقرار الاتصال: {{context.networkMetrics.connectionStability}}%
          - متوسط زمن الاستجابة: {{context.networkMetrics.averageLatency}}ms
          - معدل نقل البيانات: {{context.networkMetrics.dataTransferRate}}MB/s
          - معدل نجاح إعادة المحاولة: {{context.networkMetrics.retrySuccessRate}}%
          - القدرة على العمل بدون اتصال: {{context.networkMetrics.offlineCapability}}%
          - نسبة الضغط: {{context.networkMetrics.compressionRatio}}%
          - معدل أخطاء الشبكة: {{context.networkMetrics.networkErrorRate}}%
          - نسبة نجاح الذاكرة المؤقتة: {{context.networkMetrics.cacheHitRatio}}%
          
          📈 **كفاءة مجموعة الاتصالات**: {{context.networkMetrics.connectionPoolEfficiency}}%
          ⏱️ **حالات انتهاء المهلة**: {{context.networkMetrics.timeoutOccurrences}}
          
          🚀 **خيارات تحسين الشبكة:**
        choices:
          - label: "🌐 تحسين شامل للشبكة"
            value: "comprehensive_network_optimization"
          - label: "🔄 تحسين إعادة المحاولة"
            value: "retry_mechanism_optimization"
          - label: "📡 تحسين العمل بدون اتصال"
            value: "offline_capability_enhancement"
          - label: "⚡ تحسين سرعة النقل"
            value: "transfer_speed_optimization"
        next_actions:
          comprehensive_network_optimization:
            - action: ai_command
              command: >
                🌐 **تنفيذ تحسين الشبكة الشامل**
                
                **المرحلة 1: تحليل الشبكة المكتشف** 📡
                
                استقرار الاتصال: {{context.networkMetrics.connectionStability}}%
                متوسط زمن الاستجابة: {{context.networkMetrics.averageLatency}}ms
                معدل أخطاء الشبكة: {{context.networkMetrics.networkErrorRate}}%
                نسبة نجاح الذاكرة المؤقتة: {{context.networkMetrics.cacheHitRatio}}%
                
                سأقوم بإنشاء نظام إدارة شبكة ذكي مع CodoraSmartNetworkManager شامل يتضمن:
                - تحسين استقرار الاتصال لـ {{context.networkThresholds.minStability}}%+
                - تقليل زمن الاستجابة لأقل من {{context.networkThresholds.maxLatency}}ms
                - إعادة المحاولة التلقائية الذكية
                - ضغط البيانات المتقدم ({{context.networkThresholds.minCompressionRatio}}%+)
                - استراتيجية offline-first
                - مراقبة bandwidth وتحسينه
                - إدارة مجموعة الاتصالات
                - تحسين التخزين المؤقت للشبكة
                - اكتشاف وإصلاح مشاكل الشبكة
                - تقارير أداء الشبكة المفصلة
                
                **الأهداف:** استقرار {{context.networkThresholds.minStability}}%+، زمن استجابة <{{context.networkThresholds.maxLatency}}ms، أخطاء <{{context.networkThresholds.maxErrorRate}}%
          retry_mechanism_optimization:
            - action: ai_command
              command: >
                🔄 **تحسين آلية إعادة المحاولة الذكية**
                
                سأقوم بتحسين إعادة المحاولة:
                - تحسين معدل النجاح من {{context.networkMetrics.retrySuccessRate}}%
                - تقليل حالات انتهاء المهلة من {{context.networkMetrics.timeoutOccurrences}} لأقل من {{context.networkThresholds.maxTimeouts}}
                - تحسين timeout لـ {{context.networkThresholds.connectionTimeout}}s
                - إستراتيجية exponential backoff
                - إعادة المحاولة التكيفية حسب نوع الخطأ
          offline_capability_enhancement:
            - action: ai_command
              command: >
                📡 **تحسين العمل بدون اتصال**
                
                سأقوم بتحسين القدرة على العمل بدون اتصال:
                - تحسين القدرة من {{context.networkMetrics.offlineCapability}}%
                - تحسين نسبة نجاح الذاكرة المؤقتة لـ {{context.networkThresholds.minCacheHitRatio}}%+
                - تزامن البيانات الذكي عند العودة للاتصال
                - تخزين محلي متقدم للبيانات الحرجة
                - واجهة مستخدم محسنة للوضع بدون اتصال
          transfer_speed_optimization:
            - action: ai_command
              command: >
                ⚡ **تحسين سرعة النقل**
                
                سأقوم بتحسين سرعة النقل:
                - تحسين معدل النقل من {{context.networkMetrics.dataTransferRate}}MB/s
                - تحسين نسبة الضغط لـ {{context.networkThresholds.minCompressionRatio}}%+
                - تحسين استخدام bandwidth ({{context.networkMetrics.bandwidthUtilization}}%)
                - معالجة {{context.networkMetrics.downloadQueueSize}} تحميل في الطابور
                                 - تقليل معدل فشل الرفع من {{context.networkMetrics.uploadFailureRate}}%

  # قاعدة التصميم التكيفي الذكي
  - id: intelligent-adaptive-design
    description: "نظام التصميم التكيفي الذكي - تكييف التصميم حسب الجهاز والاستخدام"
    context:
      adaptiveDesignMetrics:
        responsiveDesignScore: 89.2
        deviceCompatibility: 94.6
        darkModeAdaptation: 87.3
        fontScalingOptimization: 91.8
        colorContrastCompliance: 88.5
        layoutAdaptability: 92.7
        screenSizeOptimization: 90.4
        orientationHandling: 85.9
        accessibilityAdaptation: 86.7
        themingConsistency: 93.1
        adaptiveAnimations: 78.4
        contextualDesign: 82.6
      adaptiveThresholds:
        minResponsiveScore: 90.0
        minDeviceCompatibility: 95.0
        minContrastRatio: 4.5
        minAccessibilityScore: 85.0
        maxAdaptationTime: 200
        supportedScreenSizes: ["small", "medium", "large", "xlarge"]
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('Theme') ||
          edit.content.includes('MediaQuery') ||
          edit.content.includes('responsive') ||
          edit.content.includes('adaptive') ||
          edit.content.includes('LayoutBuilder') ||
          edit.content.includes('OrientationBuilder') ||
          edit.content.includes('dark') ||
          edit.content.includes('light') ||
          edit.content.includes('ColorScheme') ||
          edit.content.includes('brightness') ||
          edit.content.includes('accessibility') ||
          edit.content.includes('font') ||
          edit.content.includes('contrast')
        )
      )
    then:
      - action: prompt
        message: >
          🎨 **نظام التصميم التكيفي الذكي مُفعّل!**
          
          📊 **تقييم التصميم التكيفي:**
          - نقاط التصميم المتجاوب: {{context.adaptiveDesignMetrics.responsiveDesignScore}}%
          - توافق الأجهزة: {{context.adaptiveDesignMetrics.deviceCompatibility}}%
          - تكيف الوضع المظلم: {{context.adaptiveDesignMetrics.darkModeAdaptation}}%
          - تحسين تدرج الخط: {{context.adaptiveDesignMetrics.fontScalingOptimization}}%
          - امتثال تباين الألوان: {{context.adaptiveDesignMetrics.colorContrastCompliance}}%
          - قابلية تكيف التخطيط: {{context.adaptiveDesignMetrics.layoutAdaptability}}%
          - تحسين حجم الشاشة: {{context.adaptiveDesignMetrics.screenSizeOptimization}}%
          - معالجة الاتجاه: {{context.adaptiveDesignMetrics.orientationHandling}}%
          
          🎯 **ثبات المظاهر**: {{context.adaptiveDesignMetrics.themingConsistency}}%
          ✨ **الرسوم المتحركة التكيفية**: {{context.adaptiveDesignMetrics.adaptiveAnimations}}%
          
          🚀 **خيارات التصميم التكيفي:**
        choices:
          - label: "🎨 تصميم تكيفي شامل"
            value: "comprehensive_adaptive_design"
          - label: "🌙 تحسين الأوضاع المظلمة/الفاتحة"
            value: "theme_mode_optimization"
          - label: "📱 تحسين توافق الأجهزة"
            value: "device_compatibility_enhancement"
          - label: "♿ تحسين إمكانية الوصول"
            value: "accessibility_adaptation"
        next_actions:
          comprehensive_adaptive_design:
            - action: ai_command
              command: >
                🎨 **تنفيذ التصميم التكيفي الشامل**
                
                سأقوم بإنشاء CodoraAdaptiveDesignSystem شامل يتضمن:
                - تحسين نقاط التصميم المتجاوب لـ {{context.adaptiveThresholds.minResponsiveScore}}%+
                - تحسين توافق الأجهزة لـ {{context.adaptiveThresholds.minDeviceCompatibility}}%+
                - تكيف ذكي للأوضاع المظلمة والفاتحة
                - تحسين تباين الألوان (نسبة {{context.adaptiveThresholds.minContrastRatio}}:1+)
                - تكيف تلقائي لأحجام الشاشات المختلفة
                - تحسين معالجة اتجاه الشاشة
                - رسوم متحركة تكيفية
                - تصميم سياقي ذكي

  # قاعدة تحليلات المستخدم المتقدمة
  - id: intelligent-advanced-user-analytics
    description: "نظام تحليلات المستخدم المتقدم - تحليل سلوك المستخدم والأداء"
    context:
      analyticsMetrics:
        userBehaviorTracking: 91.3
        performanceAnalytics: 87.6
        conversionRateTracking: 82.4
        usagePatternAnalysis: 89.7
        crashReporting: 95.2
        customEventTracking: 78.9
        realTimeAnalytics: 86.3
        userSegmentation: 84.7
        engagementMetrics: 88.1
        retentionAnalysis: 90.5
        heatmapGeneration: 75.8
        funnelAnalysis: 83.2
      analyticsThresholds:
        minTrackingAccuracy: 90.0
        maxAnalyticsDelay: 5
        minDataRetention: 90
        customEventThreshold: 1000
        reportingInterval: 24
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('analytics') ||
          edit.content.includes('tracking') ||
          edit.content.includes('Firebase') ||
          edit.content.includes('event') ||
          edit.content.includes('metrics') ||
          edit.content.includes('logging') ||
          edit.content.includes('crash') ||
          edit.content.includes('performance') ||
          edit.content.includes('user') ||
          edit.content.includes('behavior') ||
          edit.content.includes('conversion') ||
          edit.content.includes('engagement')
        )
      )
    then:
      - action: prompt
        message: >
          📊 **نظام تحليلات المستخدم المتقدم مُفعّل!**
          
          📈 **تقييم التحليلات:**
          - تتبع سلوك المستخدم: {{context.analyticsMetrics.userBehaviorTracking}}%
          - تحليلات الأداء: {{context.analyticsMetrics.performanceAnalytics}}%
          - تتبع معدل التحويل: {{context.analyticsMetrics.conversionRateTracking}}%
          - تحليل أنماط الاستخدام: {{context.analyticsMetrics.usagePatternAnalysis}}%
          - تقارير الأعطال: {{context.analyticsMetrics.crashReporting}}%
          - تتبع الأحداث المخصصة: {{context.analyticsMetrics.customEventTracking}}%
          - التحليلات المباشرة: {{context.analyticsMetrics.realTimeAnalytics}}%
          - تقسيم المستخدمين: {{context.analyticsMetrics.userSegmentation}}%
          
          🔥 **توليد الخرائط الحرارية**: {{context.analyticsMetrics.heatmapGeneration}}%
          📈 **تحليل القمع**: {{context.analyticsMetrics.funnelAnalysis}}%
          
          🚀 **خيارات التحليلات:**
        choices:
          - label: "📊 تحليلات شاملة للمستخدم"
            value: "comprehensive_user_analytics"
          - label: "📈 تحليل الأداء المتقدم"
            value: "advanced_performance_analytics"
          - label: "🎯 تحليل التحويل والمشاركة"
            value: "conversion_engagement_analysis"
        next_actions:
          comprehensive_user_analytics:
            - action: ai_command
              command: "إنشاء CodoraAdvancedAnalytics مع تتبع سلوك شامل وتحليلات مباشرة ونظام تقارير متقدم"

  # قاعدة الصيانة التلقائية
  - id: intelligent-automatic-maintenance
    description: "نظام الصيانة التلقائية - صيانة الكود والتطبيق تلقائياً"
    context:
      maintenanceMetrics:
        codeHealthScore: 86.4
        unusedFilesDetected: 23
        dependencyUpdates: 12
        performanceOptimizations: 18
        securityPatches: 7
        memoryLeaksFixed: 5
        codeRefactoringNeeded: 34
        technicalDebtScore: 72.8
        automatedTestsCoverage: 78.9
        codeQualityIndex: 84.7
        maintenanceFrequency: 7
        systemHealthScore: 89.2
      maintenanceThresholds:
        minCodeHealth: 85.0
        maxUnusedFiles: 20
        maxTechnicalDebt: 75.0
        minTestCoverage: 80.0
        maintenanceInterval: 7
        criticalIssueThreshold: 5
        performanceThreshold: 85.0
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('maintenance') ||
          edit.content.includes('cleanup') ||
          edit.content.includes('optimize') ||
          edit.content.includes('refactor') ||
          edit.content.includes('update') ||
          edit.content.includes('dependency') ||
          edit.content.includes('performance') ||
          edit.content.includes('health') ||
          edit.content.includes('quality') ||
          edit.content.includes('debt') ||
          edit.content.includes('unused') ||
          edit.content.includes('patch')
        )
      )
    then:
      - action: prompt
        message: >
          🔧 **نظام الصيانة التلقائية مُفعّل!**
          
          📊 **تقييم صحة النظام:**
          - نقاط صحة الكود: {{context.maintenanceMetrics.codeHealthScore}}%
          - الملفات غير المستخدمة: {{context.maintenanceMetrics.unusedFilesDetected}}
          - تحديثات التبعيات: {{context.maintenanceMetrics.dependencyUpdates}}
          - تحسينات الأداء: {{context.maintenanceMetrics.performanceOptimizations}}
          - تصحيحات الأمان: {{context.maintenanceMetrics.securityPatches}}
          - تسريبات الذاكرة المُصلحة: {{context.maintenanceMetrics.memoryLeaksFixed}}
          - إعادة هيكلة مطلوبة: {{context.maintenanceMetrics.codeRefactoringNeeded}}
          - نقاط الدين التقني: {{context.maintenanceMetrics.technicalDebtScore}}%
          - تغطية الاختبار: {{context.maintenanceMetrics.automatedTestsCoverage}}%
          
          🏥 **نقاط صحة النظام**: {{context.maintenanceMetrics.systemHealthScore}}%
          ⚙️ **تكرار الصيانة**: كل {{context.maintenanceMetrics.maintenanceFrequency}} أيام
          
          🚀 **خيارات الصيانة:**
        choices:
          - label: "🔧 صيانة شاملة تلقائية"
            value: "comprehensive_automatic_maintenance"
          - label: "🧹 تنظيف وتحسين"
            value: "cleanup_optimization"
          - label: "📊 مراقبة صحة النظام"
            value: "system_health_monitoring"
        next_actions:
          comprehensive_automatic_maintenance:
            - action: ai_command
              command: "إنشاء CodoraAutoMaintenance مع تنظيف تلقائي وتحديث التبعيات وتحسين الأداء المستمر"

  # قاعدة التحديثات والنشر الذكي
  - id: intelligent-updates-deployment
    description: "نظام التحديثات والنشر الذكي - إدارة التحديثات والنشر"
    context:
      deploymentMetrics:
        deploymentSuccessRate: 94.7
        rollbackOccurrences: 3
        updateAdoptionRate: 82.6
        deploymentTime: 8.4
        versionCompatibility: 91.3
        featureFlagUsage: 76.8
        abTestingActive: 12
        rolloutPercentage: 25.0
        criticalBugFixes: 7
        userFeedbackScore: 8.1
        downtime: 0.02
        performanceImpact: 4.2
      deploymentThresholds:
        minSuccessRate: 95.0
        maxRollbacks: 2
        minAdoptionRate: 85.0
        maxDeploymentTime: 10
        maxDowntime: 0.01
        minCompatibility: 90.0
        maxPerformanceImpact: 5.0
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('version') ||
          edit.content.includes('update') ||
          edit.content.includes('deploy') ||
          edit.content.includes('release') ||
          edit.content.includes('rollout') ||
          edit.content.includes('rollback') ||
          edit.content.includes('testing') ||
          edit.content.includes('feature') ||
          edit.content.includes('flag') ||
          edit.content.includes('compatibility') ||
          edit.content.includes('migration') ||
          edit.content.includes('publish')
        )
      )
    then:
      - action: prompt
        message: >
          🚀 **نظام التحديثات والنشر الذكي مُفعّل!**
          
          📊 **تقييم النشر:**
          - معدل نجاح النشر: {{context.deploymentMetrics.deploymentSuccessRate}}%
          - حالات التراجع: {{context.deploymentMetrics.rollbackOccurrences}}
          - معدل اعتماد التحديث: {{context.deploymentMetrics.updateAdoptionRate}}%
          - وقت النشر: {{context.deploymentMetrics.deploymentTime}} دقائق
          - توافق الإصدارات: {{context.deploymentMetrics.versionCompatibility}}%
          - استخدام Feature Flags: {{context.deploymentMetrics.featureFlagUsage}}%
          - اختبارات A/B النشطة: {{context.deploymentMetrics.abTestingActive}}
          - نسبة الطرح: {{context.deploymentMetrics.rolloutPercentage}}%
          
          🔧 **إصلاحات الأخطاء الحرجة**: {{context.deploymentMetrics.criticalBugFixes}}
          📊 **نقاط تقييم المستخدمين**: {{context.deploymentMetrics.userFeedbackScore}}/10
          
          🚀 **خيارات النشر:**
        choices:
          - label: "🚀 إدارة نشر شاملة"
            value: "comprehensive_deployment_management"
          - label: "🔄 تحديثات تلقائية"
            value: "automatic_updates"
          - label: "🧪 A/B Testing وFeature Flags"
            value: "ab_testing_feature_flags"
        next_actions:
          comprehensive_deployment_management:
            - action: ai_command
              command: "إنشاء CodoraSmartDeployment مع تحديثات تلقائية وtesting وإدارة إصدارات متقدمة"

  # قاعدة التعاون والتطوير الجماعي
  - id: intelligent-collaborative-development
    description: "نظام التعاون والتطوير الجماعي - تحسين التعاون بين المطورين"
    context:
      collaborationMetrics:
        teamProductivity: 87.9
        codeReviewQuality: 84.6
        conflictResolutionRate: 91.2
        documentationCompleteness: 78.3
        knowledgeSharing: 82.7
        pairProgrammingSessions: 23
        codeStandardsCompliance: 89.4
        communicationEfficiency: 85.8
        projectDeliveryTime: 14.2
        bugIntroductionRate: 3.7
        technicalDebtReduction: 15.6
        teamSatisfactionScore: 8.3
      collaborationThresholds:
        minProductivity: 85.0
        minReviewQuality: 85.0
        maxConflictTime: 2
        minDocumentation: 80.0
        minStandardsCompliance: 90.0
        maxBugRate: 5.0
        minTeamSatisfaction: 8.0
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('team') ||
          edit.content.includes('collaboration') ||
          edit.content.includes('review') ||
          edit.content.includes('documentation') ||
          edit.content.includes('standard') ||
          edit.content.includes('conflict') ||
          edit.content.includes('merge') ||
          edit.content.includes('git') ||
          edit.content.includes('comment') ||
          edit.content.includes('todo') ||
          edit.content.includes('fixme') ||
          edit.content.includes('best') ||
          edit.content.includes('practice')
        )
      )
    then:
      - action: prompt
        message: >
          🤝 **نظام التعاون والتطوير الجماعي مُفعّل!**
          
          📊 **تقييم التعاون:**
          - إنتاجية الفريق: {{context.collaborationMetrics.teamProductivity}}%
          - جودة مراجعة الكود: {{context.collaborationMetrics.codeReviewQuality}}%
          - معدل حل النزاعات: {{context.collaborationMetrics.conflictResolutionRate}}%
          - اكتمال التوثيق: {{context.collaborationMetrics.documentationCompleteness}}%
          - مشاركة المعرفة: {{context.collaborationMetrics.knowledgeSharing}}%
          - جلسات البرمجة الثنائية: {{context.collaborationMetrics.pairProgrammingSessions}}
          - امتثال معايير الكود: {{context.collaborationMetrics.codeStandardsCompliance}}%
          - كفاءة التواصل: {{context.collaborationMetrics.communicationEfficiency}}%
          
          ⏱️ **وقت تسليم المشروع**: {{context.collaborationMetrics.projectDeliveryTime}} يوم
          🐛 **معدل إدخال الأخطاء**: {{context.collaborationMetrics.bugIntroductionRate}}%
          
          🚀 **خيارات التعاون:**
        choices:
          - label: "🤝 تحسين التعاون الشامل"
            value: "comprehensive_collaboration_enhancement"
          - label: "📝 تحسين مراجعة الكود"
            value: "code_review_optimization"
          - label: "📚 تحسين التوثيق والمعايير"
            value: "documentation_standards_improvement"
        next_actions:
          comprehensive_collaboration_enhancement:
            - action: ai_command
                             command: "إنشاء CodoraCollaborativeWorkspace مع مراجعة كود تلقائية وتوثيق ذكي وإدارة معايير متقدمة"

  # قاعدة إنترنت الأشياء والاستشعار الذكي
  - id: intelligent-iot-sensor-integration
    description: "نظام إنترنت الأشياء والاستشعار الذكي - التكامل مع أجهزة IoT والمستشعرات"
    context:
      iotMetrics:
        connectedDevices: 47
        sensorDataPoints: 1256
        inventoryAccuracy: 94.8
        gpsTrackingAccuracy: 97.2
        nfcTransactionSuccess: 89.7
        environmentalSensors: 23
        smartPaymentDevices: 12
        dataLatency: 45
        deviceUptime: 92.6
        energyEfficiency: 86.3
        predictiveMaintenance: 78.4
        iotSecurityScore: 87.9
      iotThresholds:
        maxDataLatency: 50
        minDeviceUptime: 95.0
        minTrackingAccuracy: 95.0
        maxSensorFailureRate: 5.0
        minSecurityScore: 85.0
        inventoryAccuracyTarget: 98.0
        energyEfficiencyTarget: 90.0
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('IoT') ||
          edit.content.includes('sensor') ||
          edit.content.includes('GPS') ||
          edit.content.includes('NFC') ||
          edit.content.includes('RFID') ||
          edit.content.includes('bluetooth') ||
          edit.content.includes('wifi') ||
          edit.content.includes('device') ||
          edit.content.includes('tracking') ||
          edit.content.includes('inventory') ||
          edit.content.includes('location') ||
          edit.content.includes('temperature') ||
          edit.content.includes('humidity') ||
          edit.content.includes('payment') ||
          edit.content.includes('beacon')
        )
      )
    then:
      - action: prompt
        message: >
          📡 **نظام إنترنت الأشياء والاستشعار الذكي مُفعّل!**
          
          📊 **تقييم شبكة IoT الحالي:**
          - الأجهزة المتصلة: {{context.iotMetrics.connectedDevices}}
          - نقاط بيانات المستشعرات: {{context.iotMetrics.sensorDataPoints}}
          - دقة المخزون: {{context.iotMetrics.inventoryAccuracy}}%
          - دقة تتبع GPS: {{context.iotMetrics.gpsTrackingAccuracy}}%
          - نجاح معاملات NFC: {{context.iotMetrics.nfcTransactionSuccess}}%
          - المستشعرات البيئية: {{context.iotMetrics.environmentalSensors}}
          - أجهزة الدفع الذكية: {{context.iotMetrics.smartPaymentDevices}}
          - زمن استجابة البيانات: {{context.iotMetrics.dataLatency}}ms
          - وقت تشغيل الأجهزة: {{context.iotMetrics.deviceUptime}}%
          
          ⚡ **كفاءة الطاقة**: {{context.iotMetrics.energyEfficiency}}%
          🔧 **الصيانة التنبؤية**: {{context.iotMetrics.predictiveMaintenance}}%
          
          🚀 **خيارات تحسين IoT:**
        choices:
          - label: "📡 تكامل IoT شامل"
            value: "comprehensive_iot_integration"
          - label: "📦 مراقبة المخزون الذكي"
            value: "smart_inventory_monitoring"
          - label: "🚚 تتبع الشحنات المتقدم"
            value: "advanced_shipment_tracking"
          - label: "💳 أجهزة الدفع الذكية"
            value: "smart_payment_devices"
        next_actions:
          comprehensive_iot_integration:
            - action: ai_command
              command: >
                📡 **تنفيذ تكامل إنترنت الأشياء الشامل**
                
                **المرحلة 1: تحليل شبكة IoT المكتشفة** 🌐
                
                الأجهزة المتصلة: {{context.iotMetrics.connectedDevices}}
                نقاط بيانات المستشعرات: {{context.iotMetrics.sensorDataPoints}}
                دقة المخزون: {{context.iotMetrics.inventoryAccuracy}}%
                زمن استجابة البيانات: {{context.iotMetrics.dataLatency}}ms
                
                سأقوم بإنشاء نظام IoT متطور مع CodoraIoTManager شامل يتضمن:
                - إدارة {{context.iotMetrics.connectedDevices}} جهاز متصل
                - معالجة {{context.iotMetrics.sensorDataPoints}} نقطة بيانات
                - تحسين دقة المخزون لـ {{context.iotThresholds.inventoryAccuracyTarget}}%+
                - تقليل زمن الاستجابة لأقل من {{context.iotThresholds.maxDataLatency}}ms
                - مراقبة بيئية شاملة مع {{context.iotMetrics.environmentalSensors}} مستشعر
                - نظام دفع ذكي مع {{context.iotMetrics.smartPaymentDevices}} جهاز
                - صيانة تنبؤية للأجهزة
                - أمان IoT متقدم ({{context.iotMetrics.iotSecurityScore}}/100)
                - تحسين كفاءة الطاقة لـ {{context.iotThresholds.energyEfficiencyTarget}}%+
                - تكامل مع GPS وNFC وRFID
                
                **الأهداف:** دقة تتبع {{context.iotThresholds.minTrackingAccuracy}}%+، وقت تشغيل {{context.iotThresholds.minDeviceUptime}}%+، دقة مخزون {{context.iotThresholds.inventoryAccuracyTarget}}%+
          smart_inventory_monitoring:
            - action: ai_command
              command: >
                📦 **مراقبة المخزون الذكي**
                
                سأقوم بتحسين مراقبة المخزون:
                - تحسين دقة المخزون من {{context.iotMetrics.inventoryAccuracy}}% لـ {{context.iotThresholds.inventoryAccuracyTarget}}%+
                - مراقبة مستمرة مع {{context.iotMetrics.environmentalSensors}} مستشعر بيئي
                - تنبيهات تلقائية لمستويات المخزون المنخفضة
                - تتبع انتهاء الصلاحية الذكي
                - تحليل أنماط الاستهلاك التنبؤي
          advanced_shipment_tracking:
            - action: ai_command
              command: >
                🚚 **تتبع الشحنات المتقدم**
                
                سأقوم بتحسين تتبع الشحنات:
                - تحسين دقة GPS من {{context.iotMetrics.gpsTrackingAccuracy}}% لـ {{context.iotThresholds.minTrackingAccuracy}}%+
                - تحسين نجاح NFC من {{context.iotMetrics.nfcTransactionSuccess}}%
                - تتبع الوقت الفعلي للشحنات
                - مراقبة ظروف النقل (درجة الحرارة، الرطوبة)
                - تنبيهات تلقائية للتأخير أو المشاكل
          smart_payment_devices:
            - action: ai_command
              command: >
                💳 **أجهزة الدفع الذكية**
                
                سأقوم بتحسين أجهزة الدفع:
                - إدارة {{context.iotMetrics.smartPaymentDevices}} جهاز دفع ذكي
                - تحسين نجاح معاملات NFC من {{context.iotMetrics.nfcTransactionSuccess}}%
                - تكامل مع محافظ رقمية متعددة
                - أمان متقدم للمعاملات
                                 - دعم العملات المشفرة

  # قاعدة الحوسبة السحابية المتقدمة
  - id: intelligent-advanced-cloud-computing
    description: "نظام الحوسبة السحابية المتقدم - تحسين التكامل مع الخدمات السحابية"
    context:
      cloudMetrics:
        cloudStorageUsage: 2.8
        bigDataProcessingRate: 156.7
        serverlessExecutions: 8945
        geographicalDistribution: 87.3
        backupReliability: 98.6
        cloudSecurityScore: 91.4
        dataReplicationFactor: 3
        edgeComputingNodes: 24
        autoScalingEfficiency: 89.7
        costOptimization: 73.2
        latencyReduction: 67.8
        multiCloudIntegration: 82.5
        disasterRecoveryTime: 4.2
        cloudVendorDiversification: 5
      cloudThresholds:
        maxStorageLatency: 100
        minBackupReliability: 99.0
        minSecurityScore: 90.0
        maxDisasterRecoveryTime: 5.0
        minAutoScalingEfficiency: 85.0
        costOptimizationTarget: 80.0
        minLatencyReduction: 70.0
        edgeNodeThreshold: 30
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('cloud') ||
          edit.content.includes('AWS') ||
          edit.content.includes('Firebase') ||
          edit.content.includes('serverless') ||
          edit.content.includes('lambda') ||
          edit.content.includes('bigdata') ||
          edit.content.includes('storage') ||
          edit.content.includes('backup') ||
          edit.content.includes('sync') ||
          edit.content.includes('replication') ||
          edit.content.includes('distributed') ||
          edit.content.includes('edge') ||
          edit.content.includes('cdn') ||
          edit.content.includes('scaling') ||
          edit.content.includes('microservice')
        )
      )
    then:
      - action: prompt
        message: >
          ☁️ **نظام الحوسبة السحابية المتقدم مُفعّل!**
          
          📊 **تقييم البنية السحابية الحالي:**
          - استخدام التخزين السحابي: {{context.cloudMetrics.cloudStorageUsage}}TB
          - معدل معالجة البيانات الضخمة: {{context.cloudMetrics.bigDataProcessingRate}}GB/s
          - تنفيذات الحوسبة بدون خوادم: {{context.cloudMetrics.serverlessExecutions}}
          - التوزيع الجغرافي: {{context.cloudMetrics.geographicalDistribution}}%
          - موثوقية النسخ الاحتياطي: {{context.cloudMetrics.backupReliability}}%
          - نقاط الأمان السحابي: {{context.cloudMetrics.cloudSecurityScore}}/100
          - عامل النسخ المتماثل: {{context.cloudMetrics.dataReplicationFactor}}x
          - عقد الحوسبة الطرفية: {{context.cloudMetrics.edgeComputingNodes}}
          - كفاءة التوسع التلقائي: {{context.cloudMetrics.autoScalingEfficiency}}%
          
          💰 **تحسين التكلفة**: {{context.cloudMetrics.costOptimization}}%
          ⚡ **تقليل زمن الاستجابة**: {{context.cloudMetrics.latencyReduction}}%
          
          🚀 **خيارات التحسين السحابي:**
        choices:
          - label: "☁️ حوسبة سحابية شاملة"
            value: "comprehensive_cloud_computing"
          - label: "📊 معالجة البيانات الضخمة"
            value: "big_data_processing"
          - label: "⚡ حوسبة بدون خوادم"
            value: "serverless_computing"
          - label: "🌍 توزيع جغرافي ذكي"
            value: "intelligent_geo_distribution"
        next_actions:
          comprehensive_cloud_computing:
            - action: ai_command
              command: >
                ☁️ **تنفيذ الحوسبة السحابية الشاملة**
                
                **المرحلة 1: تحليل البنية السحابية المكتشفة** 🌐
                
                استخدام التخزين السحابي: {{context.cloudMetrics.cloudStorageUsage}}TB
                معدل معالجة البيانات: {{context.cloudMetrics.bigDataProcessingRate}}GB/s
                تنفيذات serverless: {{context.cloudMetrics.serverlessExecutions}}
                التوزيع الجغرافي: {{context.cloudMetrics.geographicalDistribution}}%
                
                سأقوم بإنشاء نظام حوسبة سحابية متطور مع CodoraAdvancedCloudManager شامل يتضمن:
                - إدارة {{context.cloudMetrics.cloudStorageUsage}}TB من البيانات السحابية
                - معالجة بيانات ضخمة بمعدل {{context.cloudMetrics.bigDataProcessingRate}}GB/s
                - تحسين {{context.cloudMetrics.serverlessExecutions}} تنفيذ serverless
                - توزيع جغرافي ذكي عبر {{context.cloudMetrics.edgeComputingNodes}} عقدة
                - نسخ احتياطي موثوق بنسبة {{context.cloudMetrics.backupReliability}}%+
                - أمان سحابي متقدم ({{context.cloudMetrics.cloudSecurityScore}}/100)
                - تكرار البيانات {{context.cloudMetrics.dataReplicationFactor}}x
                - تحسين التكلفة لـ {{context.cloudThresholds.costOptimizationTarget}}%+
                - تقليل زمن الاستجابة لـ {{context.cloudThresholds.minLatencyReduction}}%+
                - تكامل متعدد السحابات مع {{context.cloudMetrics.cloudVendorDiversification}} مقدمين
                
                **الأهداف:** موثوقية {{context.cloudThresholds.minBackupReliability}}%+، أمان {{context.cloudThresholds.minSecurityScore}}+/100، تحسين كلفة {{context.cloudThresholds.costOptimizationTarget}}%+
          big_data_processing:
            - action: ai_command
              command: >
                📊 **معالجة البيانات الضخمة المتقدمة**
                
                سأقوم بتحسين معالجة البيانات الضخمة:
                - تحسين معدل المعالجة من {{context.cloudMetrics.bigDataProcessingRate}}GB/s
                - تحليل البيانات في الوقت الفعلي
                - نظم التعلم الآلي الموزعة
                - معالجة متوازية متقدمة
                - تحليل تنبؤي للاتجاهات
          serverless_computing:
            - action: ai_command
              command: >
                ⚡ **الحوسبة بدون خوادم المتقدمة**
                
                سأقوم بتحسين الحوسبة بدون خوادم:
                - تحسين {{context.cloudMetrics.serverlessExecutions}} تنفيذ
                - تحسين كفاءة التوسع التلقائي لـ {{context.cloudThresholds.minAutoScalingEfficiency}}%+
                - تقليل التكلفة التشغيلية
                - استجابة فورية للأحمال
                - إدارة ذكية للموارد
          intelligent_geo_distribution:
            - action: ai_command
              command: >
                🌍 **التوزيع الجغرافي الذكي**
                
                سأقوم بتحسين التوزيع الجغرافي:
                - تحسين التوزيع من {{context.cloudMetrics.geographicalDistribution}}%
                - توسيع شبكة العقد الطرفية إلى {{context.cloudThresholds.edgeNodeThreshold}}+
                - تقليل زمن الاستجابة لـ {{context.cloudThresholds.minLatencyReduction}}%+
                - توزيع ذكي حسب المنطقة الجغرافية
                                 - تحسين تجربة المستخدم العالمية

  # قاعدة الأمان السيبراني المتطور
  - id: intelligent-advanced-cybersecurity
    description: "نظام الأمان السيبراني المتطور - حماية متقدمة ضد التهديدات السيبرانية"
    context:
      cyberSecurityMetrics:
        realTimeAttackDetection: 94.7
        behavioralAnalysisAccuracy: 91.3
        fraudDetectionRate: 87.9
        quantumEncryptionEnabled: 45.2
        privacyProtectionScore: 89.6
        threatIntelligenceFeeds: 12
        securityIncidentResponseTime: 2.3
        vulnerabilityPatchingSpeed: 78.4
        securityAuditScore: 92.1
        zeroTrustImplementation: 67.8
        malwareDetectionRate: 96.8
        phishingPreventionRate: 89.2
        dataExfiltrationPrevention: 93.5
        identityTheftProtection: 88.7
      cyberSecurityThresholds:
        minAttackDetectionRate: 95.0
        maxIncidentResponseTime: 3.0
        minFraudDetectionRate: 90.0
        minPrivacyScore: 90.0
        minMalwareDetection: 98.0
        minPhishingPrevention: 92.0
        quantumEncryptionTarget: 80.0
        zeroTrustTarget: 85.0
        securityAuditTarget: 95.0
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('security') ||
          edit.content.includes('cyber') ||
          edit.content.includes('attack') ||
          edit.content.includes('threat') ||
          edit.content.includes('malware') ||
          edit.content.includes('virus') ||
          edit.content.includes('phishing') ||
          edit.content.includes('fraud') ||
          edit.content.includes('breach') ||
          edit.content.includes('quantum') ||
          edit.content.includes('privacy') ||
          edit.content.includes('encryption') ||
          edit.content.includes('firewall') ||
          edit.content.includes('intrusion') ||
          edit.content.includes('vulnerability')
        )
      )
    then:
      - action: prompt
        message: >
          🛡️ **نظام الأمان السيبراني المتطور مُفعّل!**
          
          📊 **تقييم الأمان السيبراني الحالي:**
          - اكتشاف الهجمات الفوري: {{context.cyberSecurityMetrics.realTimeAttackDetection}}%
          - دقة التحليل السلوكي: {{context.cyberSecurityMetrics.behavioralAnalysisAccuracy}}%
          - معدل اكتشاف الاحتيال: {{context.cyberSecurityMetrics.fraudDetectionRate}}%
          - تفعيل التشفير الكمي: {{context.cyberSecurityMetrics.quantumEncryptionEnabled}}%
          - نقاط حماية الخصوصية: {{context.cyberSecurityMetrics.privacyProtectionScore}}/100
          - مصادر استخبارات التهديدات: {{context.cyberSecurityMetrics.threatIntelligenceFeeds}}
          - وقت الاستجابة للحوادث: {{context.cyberSecurityMetrics.securityIncidentResponseTime}} دقائق
          - سرعة ترقيع الثغرات: {{context.cyberSecurityMetrics.vulnerabilityPatchingSpeed}}%
          - نقاط التدقيق الأمني: {{context.cyberSecurityMetrics.securityAuditScore}}/100
          
          🔒 **تنفيذ Zero Trust**: {{context.cyberSecurityMetrics.zeroTrustImplementation}}%
          🦠 **اكتشاف البرامج الضارة**: {{context.cyberSecurityMetrics.malwareDetectionRate}}%
          
          🚀 **خيارات الأمان المتطور:**
        choices:
          - label: "🛡️ أمان سيبراني شامل"
            value: "comprehensive_cybersecurity"
          - label: "🔍 اكتشاف التهديدات الفوري"
            value: "real_time_threat_detection"
          - label: "🧠 التحليل السلوكي المتقدم"
            value: "advanced_behavioral_analysis"
          - label: "🔐 التشفير الكمي"
            value: "quantum_encryption"
        next_actions:
          comprehensive_cybersecurity:
            - action: ai_command
              command: >
                🛡️ **تنفيذ الأمان السيبراني الشامل**
                
                **المرحلة 1: تحليل الوضع الأمني المكتشف** 🔍
                
                اكتشاف الهجمات الفوري: {{context.cyberSecurityMetrics.realTimeAttackDetection}}%
                دقة التحليل السلوكي: {{context.cyberSecurityMetrics.behavioralAnalysisAccuracy}}%
                معدل اكتشاف الاحتيال: {{context.cyberSecurityMetrics.fraudDetectionRate}}%
                وقت الاستجابة للحوادث: {{context.cyberSecurityMetrics.securityIncidentResponseTime}} دقائق
                
                سأقوم بإنشاء نظام أمان سيبراني متطور مع CodoraAdvancedCyberSecurity شامل يتضمن:
                - تحسين اكتشاف الهجمات لـ {{context.cyberSecurityThresholds.minAttackDetectionRate}}%+
                - تحسين اكتشاف الاحتيال لـ {{context.cyberSecurityThresholds.minFraudDetectionRate}}%+
                - تقليل وقت الاستجابة لأقل من {{context.cyberSecurityThresholds.maxIncidentResponseTime}} دقائق
                - تفعيل التشفير الكمي لـ {{context.cyberSecurityThresholds.quantumEncryptionTarget}}%+
                - تنفيذ Zero Trust لـ {{context.cyberSecurityThresholds.zeroTrustTarget}}%+
                - تحسين حماية الخصوصية لـ {{context.cyberSecurityThresholds.minPrivacyScore}}+/100
                - اكتشاف البرامج الضارة بدقة {{context.cyberSecurityThresholds.minMalwareDetection}}%+
                - منع التصيد الاحتيالي بنسبة {{context.cyberSecurityThresholds.minPhishingPrevention}}%+
                - منع تسريب البيانات ({{context.cyberSecurityMetrics.dataExfiltrationPrevention}}%)
                - حماية من سرقة الهوية ({{context.cyberSecurityMetrics.identityTheftProtection}}%)
                
                **الأهداف:** اكتشاف {{context.cyberSecurityThresholds.minAttackDetectionRate}}%+، استجابة <{{context.cyberSecurityThresholds.maxIncidentResponseTime}} دقائق، تدقيق {{context.cyberSecurityThresholds.securityAuditTarget}}+/100
          real_time_threat_detection:
            - action: ai_command
              command: >
                🔍 **اكتشاف التهديدات الفوري**
                
                سأقوم بتحسين اكتشاف التهديدات:
                - تحسين اكتشاف الهجمات من {{context.cyberSecurityMetrics.realTimeAttackDetection}}% لـ {{context.cyberSecurityThresholds.minAttackDetectionRate}}%+
                - مراقبة مستمرة عبر {{context.cyberSecurityMetrics.threatIntelligenceFeeds}} مصدر استخبارات
                - تحليل شبكة الذكاء الاصطناعي للتهديدات
                - استجابة تلقائية للحوادث
                - تتبع مصادر الهجمات العالمية
          advanced_behavioral_analysis:
            - action: ai_command
              command: >
                🧠 **التحليل السلوكي المتقدم**
                
                سأقوم بتحسين التحليل السلوكي:
                - تحسين دقة التحليل من {{context.cyberSecurityMetrics.behavioralAnalysisAccuracy}}%
                - تحسين اكتشاف الاحتيال لـ {{context.cyberSecurityThresholds.minFraudDetectionRate}}%+
                - نمذجة سلوك المستخدمين الطبيعي
                - اكتشاف الأنشطة المشبوهة تلقائياً
                - تحليل أنماط الوصول غير العادية
          quantum_encryption:
            - action: ai_command
              command: >
                🔐 **التشفير الكمي المتقدم**
                
                سأقوم بتنفيذ التشفير الكمي:
                - تحسين تفعيل التشفير الكمي من {{context.cyberSecurityMetrics.quantumEncryptionEnabled}}% لـ {{context.cyberSecurityThresholds.quantumEncryptionTarget}}%+
                - تشفير مقاوم للحوسبة الكمية المستقبلية
                - حماية مفاتيح التشفير المتقدمة
                - تحديث خوارزميات التشفير
                                 - تشفير البيانات الحساسة بتقنيات كمية

  # قاعدة التحليلات التنبؤية المتقدمة
  - id: intelligent-advanced-predictive-analytics
    description: "نظام التحليلات التنبؤية المتقدم - تحليل البيانات والتنبؤ بالاتجاهات"
    context:
      predictiveAnalyticsMetrics:
        customerBehaviorPredictionAccuracy: 89.4
        marketTrendAnalysisScore: 87.2
        inventoryOptimizationEfficiency: 91.7
        financialRiskModelingAccuracy: 85.6
        salesForecastingPrecision: 88.9
        churnPredictionRate: 92.3
        demandForecastingAccuracy: 86.8
        priceOptimizationSuccess: 79.4
        customerLifetimeValuePrediction: 83.7
        marketSegmentationScore: 90.1
        competitiveAnalysisDepth: 76.9
        trendsIdentificationSpeed: 4.2
        dataProcessingVolume: 2.4
        predictionConfidenceLevel: 87.8
      predictiveThresholds:
        minPredictionAccuracy: 85.0
        maxTrendsIdentificationTime: 5.0
        minCustomerBehaviorAccuracy: 90.0
        minInventoryOptimization: 90.0
        minSalesForecastAccuracy: 85.0
        minChurnPredictionRate: 90.0
        dataVolumeTarget: 5.0
        confidenceLevelTarget: 90.0
        marketAnalysisTarget: 90.0
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('analytics') ||
          edit.content.includes('prediction') ||
          edit.content.includes('forecast') ||
          edit.content.includes('trend') ||
          edit.content.includes('behavior') ||
          edit.content.includes('pattern') ||
          edit.content.includes('insight') ||
          edit.content.includes('intelligence') ||
          edit.content.includes('data') ||
          edit.content.includes('analysis') ||
          edit.content.includes('customer') ||
          edit.content.includes('market') ||
          edit.content.includes('sales') ||
          edit.content.includes('revenue') ||
          edit.content.includes('risk')
        )
      )
    then:
      - action: prompt
        message: >
          📈 **نظام التحليلات التنبؤية المتقدم مُفعّل!**
          
          📊 **تقييم التحليلات التنبؤية الحالي:**
          - دقة التنبؤ بسلوك العملاء: {{context.predictiveAnalyticsMetrics.customerBehaviorPredictionAccuracy}}%
          - نقاط تحليل اتجاهات السوق: {{context.predictiveAnalyticsMetrics.marketTrendAnalysisScore}}/100
          - كفاءة تحسين المخزون: {{context.predictiveAnalyticsMetrics.inventoryOptimizationEfficiency}}%
          - دقة نمذجة المخاطر المالية: {{context.predictiveAnalyticsMetrics.financialRiskModelingAccuracy}}%
          - دقة توقعات المبيعات: {{context.predictiveAnalyticsMetrics.salesForecastingPrecision}}%
          - معدل التنبؤ بفقدان العملاء: {{context.predictiveAnalyticsMetrics.churnPredictionRate}}%
          - دقة توقع الطلب: {{context.predictiveAnalyticsMetrics.demandForecastingAccuracy}}%
          - نجاح تحسين الأسعار: {{context.predictiveAnalyticsMetrics.priceOptimizationSuccess}}%
          - التنبؤ بقيمة العميل: {{context.predictiveAnalyticsMetrics.customerLifetimeValuePrediction}}%
          
          📊 **نقاط تقسيم السوق**: {{context.predictiveAnalyticsMetrics.marketSegmentationScore}}/100
          ⚡ **سرعة تحديد الاتجاهات**: {{context.predictiveAnalyticsMetrics.trendsIdentificationSpeed}} ساعات
          
          🚀 **خيارات التحليلات التنبؤية:**
        choices:
          - label: "📈 تحليلات تنبؤية شاملة"
            value: "comprehensive_predictive_analytics"
          - label: "👥 تحليل سلوك العملاء"
            value: "customer_behavior_analysis"
          - label: "📊 تحليل اتجاهات السوق"
            value: "market_trend_analysis"
          - label: "📦 تحسين المخزون التنبؤي"
            value: "predictive_inventory_optimization"
        next_actions:
          comprehensive_predictive_analytics:
            - action: ai_command
              command: >
                📈 **تنفيذ التحليلات التنبؤية الشاملة**
                
                **المرحلة 1: تحليل البيانات التنبؤية المكتشفة** 📊
                
                دقة التنبؤ بسلوك العملاء: {{context.predictiveAnalyticsMetrics.customerBehaviorPredictionAccuracy}}%
                نقاط تحليل اتجاهات السوق: {{context.predictiveAnalyticsMetrics.marketTrendAnalysisScore}}/100
                كفاءة تحسين المخزون: {{context.predictiveAnalyticsMetrics.inventoryOptimizationEfficiency}}%
                دقة توقعات المبيعات: {{context.predictiveAnalyticsMetrics.salesForecastingPrecision}}%
                
                سأقوم بإنشاء نظام تحليلات تنبؤية متطور مع CodoraAdvancedPredictiveAnalytics شامل يتضمن:
                - تحسين دقة التنبؤ بسلوك العملاء لـ {{context.predictiveThresholds.minCustomerBehaviorAccuracy}}%+
                - تحسين تحليل اتجاهات السوق لـ {{context.predictiveThresholds.marketAnalysisTarget}}/100+
                - تحسين كفاءة المخزون لـ {{context.predictiveThresholds.minInventoryOptimization}}%+
                - تحسين دقة توقعات المبيعات لـ {{context.predictiveThresholds.minSalesForecastAccuracy}}%+
                - تحسين التنبؤ بفقدان العملاء لـ {{context.predictiveThresholds.minChurnPredictionRate}}%+
                - معالجة {{context.predictiveAnalyticsMetrics.dataProcessingVolume}}TB → {{context.predictiveThresholds.dataVolumeTarget}}TB+ من البيانات
                - تقليل وقت تحديد الاتجاهات لأقل من {{context.predictiveThresholds.maxTrendsIdentificationTime}} ساعات
                - تحسين مستوى الثقة لـ {{context.predictiveThresholds.confidenceLevelTarget}}%+
                - نمذجة المخاطر المالية المتقدمة ({{context.predictiveAnalyticsMetrics.financialRiskModelingAccuracy}}%)
                - تحسين تقسيم السوق ({{context.predictiveAnalyticsMetrics.marketSegmentationScore}}/100)
                
                **الأهداف:** دقة تنبؤ {{context.predictiveThresholds.minPredictionAccuracy}}%+، ثقة {{context.predictiveThresholds.confidenceLevelTarget}}%+، سرعة <{{context.predictiveThresholds.maxTrendsIdentificationTime}} ساعات
          customer_behavior_analysis:
            - action: ai_command
              command: >
                👥 **تحليل سلوك العملاء المتقدم**
                
                سأقوم بتحسين تحليل سلوك العملاء:
                - تحسين دقة التنبؤ من {{context.predictiveAnalyticsMetrics.customerBehaviorPredictionAccuracy}}% لـ {{context.predictiveThresholds.minCustomerBehaviorAccuracy}}%+
                - تحسين التنبؤ بفقدان العملاء لـ {{context.predictiveThresholds.minChurnPredictionRate}}%+
                - تحليل قيمة العميل مدى الحياة ({{context.predictiveAnalyticsMetrics.customerLifetimeValuePrediction}}%)
                - نمذجة رحلة العميل التفاعلية
                - تخصيص التوصيات بناءً على السلوك
          market_trend_analysis:
            - action: ai_command
              command: >
                📊 **تحليل اتجاهات السوق المتقدم**
                
                سأقوم بتحسين تحليل اتجاهات السوق:
                - تحسين نقاط التحليل من {{context.predictiveAnalyticsMetrics.marketTrendAnalysisScore}}/100 لـ {{context.predictiveThresholds.marketAnalysisTarget}}/100+
                - تقليل وقت تحديد الاتجاهات لأقل من {{context.predictiveThresholds.maxTrendsIdentificationTime}} ساعات
                - تحليل المنافسة بعمق {{context.predictiveAnalyticsMetrics.competitiveAnalysisDepth}}%
                - رصد الاتجاهات الناشئة تلقائياً
                - تحليل تأثير الأحداث الخارجية
          predictive_inventory_optimization:
            - action: ai_command
              command: >
                📦 **تحسين المخزون التنبؤي**
                
                سأقوم بتحسين المخزون التنبؤي:
                - تحسين كفاءة التحسين من {{context.predictiveAnalyticsMetrics.inventoryOptimizationEfficiency}}% لـ {{context.predictiveThresholds.minInventoryOptimization}}%+
                - تحسين دقة توقع الطلب من {{context.predictiveAnalyticsMetrics.demandForecastingAccuracy}}%
                - تحسين نجاح تحسين الأسعار من {{context.predictiveAnalyticsMetrics.priceOptimizationSuccess}}%
                - تقليل المخزون الزائد والنقص
                                 - تحسين دورة المخزون التلقائية

  # قاعدة الاستجابة الشاملة للمنصات والشاشات
  - id: comprehensive-cross-platform-responsive-design
    description: "ضمان الاستجابة الكاملة لجميع المنصات والشاشات مع flutter_screenutil"
    context:
      supportedPlatforms: ["Android", "iOS", "Web", "Windows", "macOS", "Linux"]
      screenSizes: ["Mobile", "Tablet", "Desktop", "TV", "Watch"]
      currentPlatform: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          
          // تحديد المنصة من المحتوى أو المسار
          if (content.includes('kIsWeb') || filePath.includes('web/')) return 'Web';
          if (content.includes('Platform.isAndroid') || filePath.includes('android/')) return 'Android';
          if (content.includes('Platform.isIOS') || filePath.includes('ios/')) return 'iOS';
          if (content.includes('Platform.isWindows') || filePath.includes('windows/')) return 'Windows';
          if (content.includes('Platform.isMacOS') || filePath.includes('macos/')) return 'macOS';
          if (content.includes('Platform.isLinux') || filePath.includes('linux/')) return 'Linux';
          
          return 'Universal';
        })()
      hasResponsiveDesign: >
        intent.details.edits.some(edit =>
          edit.content && (
            edit.content.includes('ScreenUtil') ||
            edit.content.includes('MediaQuery') ||
            edit.content.includes('LayoutBuilder') ||
            edit.content.includes('OrientationBuilder') ||
            edit.content.includes('Responsive')
          )
        )
      hasScreenUtilImport: >
        intent.details.edits.some(edit =>
          edit.content && edit.content.includes("import 'package:flutter_screenutil/flutter_screenutil.dart'")
        )
      detectedUIElements: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const elements = [];
          
          if (content.includes('Container(') || content.includes('SizedBox(')) elements.push('Containers');
          if (content.includes('Text(') || content.includes('RichText(')) elements.push('Text');
          if (content.includes('Image(') || content.includes('AssetImage(')) elements.push('Images');
          if (content.includes('Icon(') || content.includes('IconButton(')) elements.push('Icons');
          if (content.includes('ElevatedButton') || content.includes('TextButton')) elements.push('Buttons');
          if (content.includes('TextField') || content.includes('TextFormField')) elements.push('Input Fields');
          if (content.includes('AppBar') || content.includes('Scaffold')) elements.push('App Structure');
          if (content.includes('Card(') || content.includes('ListTile(')) elements.push('Cards');
          if (content.includes('GridView') || content.includes('ListView')) elements.push('Lists');
          if (content.includes('Dialog') || content.includes('BottomSheet')) elements.push('Dialogs');
          
          return elements;
        })()
      responsiveMetrics:
        minMobileWidth: 320
        maxMobileWidth: 767
        minTabletWidth: 768
        maxTabletWidth: 1023
        minDesktopWidth: 1024
        maxDesktopWidth: 1920
        minTVWidth: 1921
        baseDesignWidth: 375
        baseDesignHeight: 812
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        (edit.kind == 'createFile' || edit.kind == 'editFile') &&
        edit.path && edit.path.endsWith('.dart') &&
        edit.content && (
          edit.content.includes('Widget') ||
          edit.content.includes('Scaffold') ||
          edit.content.includes('Container') ||
          edit.content.includes('Text') ||
          edit.content.includes('Image') ||
          edit.content.includes('Icon') ||
          edit.content.includes('Button') ||
          edit.content.includes('AppBar') ||
          edit.content.includes('MediaQuery') ||
          edit.content.includes('width') ||
          edit.content.includes('height') ||
          edit.content.includes('size') ||
          edit.content.includes('padding') ||
          edit.content.includes('margin')
        )
      )
    then:
      - action: prompt
        message: >
          📱💻🖥️ **نظام الاستجابة الشاملة للمنصات مُفعّل!**
          
          **🎯 تحليل المنصة والشاشة الحالية:**
          - 🖥️ **المنصة المكتشفة**: {{context.currentPlatform}}
          - 📐 **العناصر المكتشفة**: {{context.detectedUIElements.join(', ') || 'لا يوجد'}}
          - 📏 **استخدام ScreenUtil**: {{context.hasScreenUtilImport ? '✅ موجود' : '❌ مفقود'}}
          - 🎨 **تصميم متجاوب**: {{context.hasResponsiveDesign ? '✅ موجود' : '❌ مفقود'}}
          
          **🌍 المنصات المدعومة:** {{context.supportedPlatforms.join(' • ')}}
          **📱 أحجام الشاشات:** {{context.screenSizes.join(' • ')}}
          
          **⚠️ مشروع كودورا يجب أن يعمل على جميع المنصات والشاشات بشكل مثالي!**
          
          **🎯 المتطلبات:**
          ✅ استخدام `flutter_screenutil: ^5.9.3`
          ✅ تجاوب مع جميع أحجام الشاشات
          ✅ تناسق الأيقونات والصور
          ✅ واجهة جميلة على كل المنصات
          
          **ماذا تريد أن تفعل؟**
        choices:
          - label: "🚀 تطبيق التصميم المتجاوب الشامل"
            value: "apply_full_responsive"
          - label: "📱 تحسين للموبايل والتابلت فقط"
            value: "mobile_tablet_only"
          - label: "🖥️ تحسين للديسكتوب والويب فقط"
            value: "desktop_web_only"
          - label: "🎨 تحسين الأيقونات والصور فقط"
            value: "icons_images_only"
          - label: "🔧 إعداد ScreenUtil أولاً"
            value: "setup_screenutil_first"
          - label: "⏭️ تخطي هذه المرة"
            value: "skip_responsive"
        next_actions:
          apply_full_responsive:
            - action: ai_command
              command: >
                🚀 **تطبيق التصميم المتجاوب الشامل**
                
                **المرحلة 1: إعداد flutter_screenutil** 📐
                
                1. **تأكد من إضافة المكتبة في pubspec.yaml:**
                ```yaml
                dependencies:
                  flutter_screenutil: ^5.9.3
                ```
                
                2. **إعداد ScreenUtil في main.dart:**
                ```dart
                import 'package:flutter_screenutil/flutter_screenutil.dart';
                
                void main() {
                  runApp(MyApp());
                }
                
                class MyApp extends StatelessWidget {
                  @override
                  Widget build(BuildContext context) {
                    return ScreenUtilInit(
                      designSize: const Size({{context.responsiveMetrics.baseDesignWidth}}, {{context.responsiveMetrics.baseDesignHeight}}), // iPhone 12 Pro Max
                      minTextAdapt: true,
                      splitScreenMode: true,
                      useInheritedMediaQuery: true,
                      builder: (context, child) {
                        return MaterialApp(
                          debugShowCheckedModeBanner: false,
                          title: 'كودورا',
                          home: child,
                        );
                      },
                      child: HomePage(),
                    );
                  }
                }
                ```
                
                **المرحلة 2: تحويل جميع الأحجام لـ ScreenUtil** 📏
                
                قم بتحويل جميع القيم في هذا الملف:
                
                **الأبعاد (Width/Height):**
                ```dart
                // ❌ قبل
                width: 100,
                height: 50,
                
                // ✅ بعد  
                width: 100.w,
                height: 50.h,
                ```
                
                **المسافات (Padding/Margin):**
                ```dart
                // ❌ قبل
                padding: EdgeInsets.all(16),
                margin: EdgeInsets.symmetric(horizontal: 20),
                
                // ✅ بعد
                padding: EdgeInsets.all(16.r),
                margin: EdgeInsets.symmetric(horizontal: 20.w),
                ```
                
                **حجم النصوص:**
                ```dart
                // ❌ قبل
                fontSize: 16,
                
                // ✅ بعد
                fontSize: 16.sp,
                ```
                
                **المرحلة 3: استجابة الشاشات المختلفة** 🖥️📱
                
                ```dart
                import 'dart:io';
                import 'package:flutter/foundation.dart';
                
                class ResponsiveHelper {
                  static bool isMobile(BuildContext context) => ScreenUtil().screenWidth < {{context.responsiveMetrics.maxMobileWidth}};
                  static bool isTablet(BuildContext context) => ScreenUtil().screenWidth >= {{context.responsiveMetrics.minTabletWidth}} && ScreenUtil().screenWidth < {{context.responsiveMetrics.maxTabletWidth}};
                  static bool isDesktop(BuildContext context) => ScreenUtil().screenWidth >= {{context.responsiveMetrics.minDesktopWidth}};
                  static bool isWeb() => kIsWeb;
                  static bool isAndroid() => !kIsWeb && Platform.isAndroid;
                  static bool isIOS() => !kIsWeb && Platform.isIOS;
                  static bool isWindows() => !kIsWeb && Platform.isWindows;
                  static bool isMacOS() => !kIsWeb && Platform.isMacOS;
                  
                  static double getResponsiveWidth(BuildContext context, {
                    required double mobile,
                    required double tablet,
                    required double desktop,
                  }) {
                    if (isMobile(context)) return mobile.w;
                    if (isTablet(context)) return tablet.w;
                    return desktop.w;
                  }
                  
                  static double getResponsiveFont(BuildContext context, {
                    required double mobile,
                    required double tablet,
                    required double desktop,
                  }) {
                    if (isMobile(context)) return mobile.sp;
                    if (isTablet(context)) return tablet.sp;
                    return desktop.sp;
                  }
                }
                ```
                
                **المرحلة 4: تحسين الأيقونات والصور** 🎨
                
                ```dart
                // الأيقونات المتجاوبة
                class ResponsiveIcon extends StatelessWidget {
                  final IconData icon;
                  final Color? color;
                  
                  const ResponsiveIcon({Key? key, required this.icon, this.color}) : super(key: key);
                  
                  @override
                  Widget build(BuildContext context) {
                    return Icon(
                      icon,
                      size: ResponsiveHelper.isMobile(context) ? 20.r : ResponsiveHelper.isTablet(context) ? 24.r : 28.r,
                      color: color,
                    );
                  }
                }
                
                // الصور المتجاوبة
                class ResponsiveImage extends StatelessWidget {
                  final String imagePath;
                  final double? width;
                  final double? height;
                  
                  const ResponsiveImage({Key? key, required this.imagePath, this.width, this.height}) : super(key: key);
                  
                  @override
                  Widget build(BuildContext context) {
                    return Image.asset(
                      imagePath,
                      width: width?.w ?? ResponsiveHelper.getResponsiveWidth(context, mobile: 100, tablet: 150, desktop: 200),
                      height: height?.h ?? ResponsiveHelper.getResponsiveWidth(context, mobile: 100, tablet: 150, desktop: 200),
                      fit: BoxFit.cover,
                    );
                  }
                }
                ```
                
                **المرحلة 5: تخصيص كل منصة** 🌍
                
                ```dart
                // التخصيص حسب المنصة
                Widget buildPlatformSpecificWidget() {
                  if (ResponsiveHelper.isWeb()) {
                    return WebSpecificWidget();
                  } else if (ResponsiveHelper.isAndroid()) {
                    return AndroidSpecificWidget();
                  } else if (ResponsiveHelper.isIOS()) {
                    return IOSSpecificWidget();
                  } else if (ResponsiveHelper.isWindows()) {
                    return WindowsSpecificWidget();
                  } else if (ResponsiveHelper.isMacOS()) {
                    return MacOSSpecificWidget();
                  }
                  return DefaultWidget();
                }
                ```
                
                **🎯 النتيجة المطلوبة:**
                - ✅ يعمل على جميع المنصات ({{context.supportedPlatforms.join(', ')}})
                - ✅ متجاوب مع جميع الشاشات ({{context.screenSizes.join(', ')}})
                - ✅ أيقونات وصور متناسبة
                - ✅ واجهة جميلة ومتسقة
                - ✅ استخدام flutter_screenutil بالكامل
          setup_screenutil_first:
            - action: ai_command
              command: >
                🔧 **إعداد flutter_screenutil أولاً**
                
                **الخطوة 1: إضافة المكتبة**
                ```yaml
                # في pubspec.yaml
                dependencies:
                  flutter:
                    sdk: flutter
                  flutter_screenutil: ^5.9.3
                ```
                
                **الخطوة 2: الاستيراد في الملف الحالي**
                ```dart
                import 'package:flutter_screenutil/flutter_screenutil.dart';
                ```
                
                **الخطوة 3: تطبيق ScreenUtil على العناصر المكتشفة**
                
                العناصر المكتشفة: {{context.detectedUIElements.join(', ')}}
                
                سأقوم بتحويل جميع القيم الثابتة إلى قيم متجاوبة:
                - العرض والارتفاع → .w و .h
                - المسافات → .r
                - حجم النص → .sp
                
                                 **الخطوة 4: إنشاء مساعدات الاستجابة**
                 - ResponsiveHelper class
                 - ResponsiveIcon widget  
                 - ResponsiveImage widget
                 - ResponsiveText widget
          mobile_tablet_only:
            - action: ai_command
              command: >
                📱 **تحسين للموبايل والتابلت فقط**
                
                سأقوم بتحسين التصميم للأجهزة المحمولة:
                
                **إعداد ScreenUtil للموبايل:**
                ```dart
                import 'package:flutter_screenutil/flutter_screenutil.dart';
                
                class MobileResponsiveHelper {
                  static bool isMobile(BuildContext context) => ScreenUtil().screenWidth < {{context.responsiveMetrics.maxMobileWidth}};
                  static bool isTablet(BuildContext context) => ScreenUtil().screenWidth >= {{context.responsiveMetrics.minTabletWidth}} && ScreenUtil().screenWidth < {{context.responsiveMetrics.maxTabletWidth}};
                  
                  static double getMobileSize(double mobileSize, double tabletSize) {
                    return ScreenUtil().screenWidth < {{context.responsiveMetrics.maxMobileWidth}} ? mobileSize.w : tabletSize.w;
                  }
                  
                  static double getMobileFont(double mobileFont, double tabletFont) {
                    return ScreenUtil().screenWidth < {{context.responsiveMetrics.maxMobileWidth}} ? mobileFont.sp : tabletFont.sp;
                  }
                }
                ```
                
                **تطبيق على العناصر المكتشفة:** {{context.detectedUIElements.join(', ')}}
                
                - تحسين أحجام الأيقونات للمس
                - تحسين أحجام النصوص للقراءة
                - تحسين المسافات للتنقل
                - دعم الوضع الأفقي والعمودي
          desktop_web_only:
            - action: ai_command
              command: >
                🖥️ **تحسين للديسكتوب والويب فقط**
                
                سأقوم بتحسين التصميم للشاشات الكبيرة:
                
                **إعداد للديسكتوب:**
                ```dart
                class DesktopResponsiveHelper {
                  static bool isDesktop(BuildContext context) => ScreenUtil().screenWidth >= {{context.responsiveMetrics.minDesktopWidth}};
                  static bool isLargeScreen(BuildContext context) => ScreenUtil().screenWidth >= {{context.responsiveMetrics.minTVWidth}};
                  
                  static double getDesktopSize(double desktopSize, double largeSize) {
                    return ScreenUtil().screenWidth >= {{context.responsiveMetrics.minTVWidth}} ? largeSize.w : desktopSize.w;
                  }
                  
                  static Widget buildDesktopLayout(BuildContext context, Widget child) {
                    if (kIsWeb) {
                      return Center(
                        child: Container(
                          constraints: BoxConstraints(maxWidth: 1200.w),
                          child: child,
                        ),
                      );
                    }
                    return child;
                  }
                }
                ```
                
                **تحسينات الديسكتوب:**
                - دعم الماوس والكيبورد
                - قوائم منسدلة للويب
                - تخطيط متعدد الأعمدة
                - شريط جانبي للتنقل
          icons_images_only:
            - action: ai_command
              command: >
                🎨 **تحسين الأيقونات والصور فقط**
                
                سأقوم بتحسين جميع الأيقونات والصور للمنصات المختلفة:
                
                **1. الأيقونات المتجاوبة:**
                ```dart
                class CodoraResponsiveIcon extends StatelessWidget {
                  final IconData icon;
                  final Color? color;
                  final double? customSize;
                  
                  const CodoraResponsiveIcon({
                    Key? key, 
                    required this.icon, 
                    this.color,
                    this.customSize,
                  }) : super(key: key);
                  
                  @override
                  Widget build(BuildContext context) {
                    double iconSize = customSize ?? _getResponsiveIconSize(context);
                    
                    return Icon(
                      icon,
                      size: iconSize,
                      color: color ?? Theme.of(context).iconTheme.color,
                    );
                  }
                  
                  double _getResponsiveIconSize(BuildContext context) {
                    if (ScreenUtil().screenWidth < {{context.responsiveMetrics.maxMobileWidth}}) {
                      return 20.r; // موبايل
                    } else if (ScreenUtil().screenWidth < {{context.responsiveMetrics.maxTabletWidth}}) {
                      return 24.r; // تابلت
                    } else {
                      return 28.r; // ديسكتوب
                    }
                  }
                }
                ```
                
                **2. الصور المتجاوبة:**
                ```dart
                class CodoraResponsiveImage extends StatelessWidget {
                  final String imagePath;
                  final double? width;
                  final double? height;
                  final BoxFit fit;
                  final bool isNetwork;
                  
                  const CodoraResponsiveImage({
                    Key? key,
                    required this.imagePath,
                    this.width,
                    this.height,
                    this.fit = BoxFit.cover,
                    this.isNetwork = false,
                  }) : super(key: key);
                  
                  @override
                  Widget build(BuildContext context) {
                    double imageWidth = width ?? _getResponsiveImageWidth(context);
                    double imageHeight = height ?? _getResponsiveImageHeight(context);
                    
                    if (isNetwork) {
                      return Image.network(
                        imagePath,
                        width: imageWidth,
                        height: imageHeight,
                        fit: fit,
                        errorBuilder: (context, error, stackTrace) {
                          return Container(
                            width: imageWidth,
                            height: imageHeight,
                            color: Colors.grey[300],
                            child: Icon(Icons.error, size: 32.r),
                          );
                        },
                      );
                    }
                    
                    return Image.asset(
                      imagePath,
                      width: imageWidth,
                      height: imageHeight,
                      fit: fit,
                    );
                  }
                  
                  double _getResponsiveImageWidth(BuildContext context) {
                    if (ScreenUtil().screenWidth < {{context.responsiveMetrics.maxMobileWidth}}) {
                      return 100.w; // موبايل
                    } else if (ScreenUtil().screenWidth < {{context.responsiveMetrics.maxTabletWidth}}) {
                      return 150.w; // تابلت
                    } else {
                      return 200.w; // ديسكتوب
                    }
                  }
                  
                  double _getResponsiveImageHeight(BuildContext context) {
                    return _getResponsiveImageWidth(context) * 0.75; // نسبة 4:3
                  }
                }
                ```
                
                **3. شعار كودورا متجاوب:**
                ```dart
                class CodoraLogo extends StatelessWidget {
                  final double? customWidth;
                  final double? customHeight;
                  
                  const CodoraLogo({Key? key, this.customWidth, this.customHeight}) : super(key: key);
                  
                  @override
                  Widget build(BuildContext context) {
                    return CodoraResponsiveImage(
                      imagePath: 'assets/images/codora_logo.png',
                      width: customWidth ?? _getLogoWidth(context),
                      height: customHeight ?? _getLogoHeight(context),
                    );
                  }
                  
                  double _getLogoWidth(BuildContext context) {
                    if (ScreenUtil().screenWidth < {{context.responsiveMetrics.maxMobileWidth}}) {
                      return 120.w; // موبايل
                    } else if (ScreenUtil().screenWidth < {{context.responsiveMetrics.maxTabletWidth}}) {
                      return 160.w; // تابلت
                    } else {
                      return 200.w; // ديسكتوب
                    }
                  }
                  
                  double _getLogoHeight(BuildContext context) {
                    return _getLogoWidth(context) * 0.6; // نسبة الشعار
                  }
                }
                ```
                
                **سأقوم بتطبيق هذه التحسينات على العناصر المكتشفة:** {{context.detectedUIElements.join(', ')}}
          skip_responsive:
            - action: no_op
              message: "تم تخطي تطبيق التصميم المتجاوب هذه المرة."

  # قاعدة منع المشاركة العامة وإجبار الفصل الكامل
  - id: strict-app-separation-no-shared-code
    description: "منع وضع أي كلاس في مجلد مشترك وإجبار الفصل الكامل بين التطبيقات"
    context:
      allowedSharedTypes: ["Model", "FirebaseX"]
      appDirectories:
        seller: "lib/الكود الخاص بتطبيق البائع/"
        delivery: "lib/الكود الخاص بتطبيق التوصيل/"
        customer: "lib/الكود الخاص بتطبيق العميل/"
        admin: "lib/الكود الخاص بتطبيق صاحب التطبيق/"
        model: "lib/Model/"
        shared: "lib/shared/"
      targetFilePath: >
        intent.details.edits.find(edit => edit.path)?.path || ''
      isSharedLocation: >
        (() => {
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          return filePath.includes('lib/shared/') || filePath.includes('lib/common/') || filePath.includes('lib/utils/') || filePath.includes('lib/helpers/');
        })()
      isModelFile: >
        (() => {
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          return filePath.includes('lib/Model/') || 
                 filePath.toLowerCase().includes('model') || 
                 content.includes('fromMap') || 
                 content.includes('toMap') || 
                 content.includes('fromJson') || 
                 content.includes('toJson');
        })()
      isFirebaseXFile: >
        (() => {
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          return content.includes('class FirebaseX') || 
                 content.includes('FirebaseX') ||
                 filePath.includes('firebase_x') ||
                 filePath.includes('FirebaseX');
        })()
      detectedSharedCode: >
        (() => {
          const content = intent.details.edits.find(edit => edit.content)?.content || '';
          const sharedIndicators = [];
          
          // البحث عن مؤشرات الكود المشترك
          if (content.includes('بائع') && (content.includes('عميل') || content.includes('توصيل') || content.includes('أدمن'))) {
            sharedIndicators.push('كود مختلط بين التطبيقات');
          }
          if (content.includes('shared') || content.includes('common') || content.includes('utils')) {
            sharedIndicators.push('استيراد من مجلد مشترك');
          }
          if (content.includes('class ') && content.includes('Helper') && !content.includes('FirebaseX') && !content.includes('Model')) {
            sharedIndicators.push('كلاس مساعد مشترك');
          }
          if (content.includes('static') && content.includes('class') && !content.includes('const')) {
            sharedIndicators.push('كلاس ثابت مشترك محتمل');
          }
          
          return sharedIndicators;
        })()
      currentAppType: >
        (() => {
          const filePath = intent.details.edits.find(edit => edit.path)?.path || '';
          if (filePath.includes('الكود الخاص بتطبيق البائع')) return 'البائع';
          if (filePath.includes('الكود الخاص بتطبيق التوصيل')) return 'التوصيل';
          if (filePath.includes('الكود الخاص بتطبيق العميل')) return 'العميل';
          if (filePath.includes('الكود الخاص بتطبيق صاحب التطبيق')) return 'الأدمن';
          if (filePath.includes('lib/Model/')) return 'Model';
          if (filePath.includes('lib/shared/')) return 'مشترك';
          return 'غير محدد';
        })()
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        (edit.kind == 'createFile' || edit.kind == 'editFile') &&
        edit.path && edit.path.endsWith('.dart') &&
        (
          // ملف في مجلد مشترك وليس Model أو FirebaseX
          (edit.path.includes('lib/shared/') || 
           edit.path.includes('lib/common/') || 
           edit.path.includes('lib/utils/') || 
           edit.path.includes('lib/helpers/')) &&
          !edit.path.includes('lib/Model/') &&
          !(edit.content && (edit.content.includes('class FirebaseX') || edit.content.includes('fromMap') || edit.content.includes('toMap')))
        ) ||
        // كود مختلط بين التطبيقات
        (edit.content && 
         ((edit.content.includes('بائع') && (edit.content.includes('عميل') || edit.content.includes('توصيل') || edit.content.includes('أدمن'))) ||
          (edit.content.includes('seller') && (edit.content.includes('customer') || edit.content.includes('delivery') || edit.content.includes('admin'))) ||
          (edit.content.includes('عميل') && (edit.content.includes('توصيل') || edit.content.includes('أدمن'))) ||
          (edit.content.includes('customer') && (edit.content.includes('delivery') || edit.content.includes('admin'))) ||
          (edit.content.includes('توصيل') && edit.content.includes('أدمن')) ||
          (edit.content.includes('delivery') && edit.content.includes('admin'))
         )
        )
      )
    then:
      - action: prompt
        message: >
          🚫 **تحذير: مخالفة قاعدة الفصل الكامل بين التطبيقات!**
          
          **📍 الملف الحالي:** {{context.targetFilePath}}
          **📱 التطبيق المكتشف:** {{context.currentAppType}}
          **🔍 المشاكل المكتشفة:** {{context.detectedSharedCode.join(', ') || 'كود في مجلد مشترك'}}
          
          **❌ القانون المنتهك:**
          🚫 **ممنوع تماماً** وضع أي كلاس في مجلد مشترك خارج التطبيق المخصص له
          ✅ **المسموح فقط:** ملفات Model وكلاس FirebaseX
          
          **📋 القواعد الصارمة:**
          1️⃣ كل كلاس في تطبيقه المخصص له
          2️⃣ إذا كان الكود يعمل في أكثر من تطبيق → **تكرار كامل**
          3️⃣ إذا كان جزء للتطبيق A وجزء للتطبيق B → **كتابة منفصلة**
          4️⃣ لا مجلدات مشتركة إلا Model وFirebaseX
          
          **🎯 التطبيقات الأربعة:**
          🏪 {{context.appDirectories.seller}}
          🚚 {{context.appDirectories.delivery}}
          👤 {{context.appDirectories.customer}}
          👨‍💼 {{context.appDirectories.admin}}
          
          **ماذا تريد أن تفعل؟**
        choices:
          - label: "🔄 تكرار الكود في كل تطبيق (مستحسن)"
            value: "duplicate_code_per_app"
          - label: "✂️ تقسيم الكود حسب التطبيق"
            value: "split_code_per_app"
          - label: "📦 نقل إلى التطبيق المناسب"
            value: "move_to_specific_app"
          - label: "🔧 إعادة كتابة منفصلة لكل تطبيق"
            value: "rewrite_per_app"
          - label: "❌ إلغاء العملية"
            value: "cancel_operation"
        next_actions:
          duplicate_code_per_app:
            - action: ai_command
              command: >
                🔄 **تكرار الكود في كل تطبيق**
                
                **المبدأ:** كل تطبيق مستقل تماماً ولا يعتمد على الآخرين
                
                **سأقوم بتكرار هذا الكود في التطبيقات التالية:**
                
                **1. تطبيق البائع:** {{context.appDirectories.seller}}
                ```dart
                // نسخة خاصة بالبائع
                class SellerSpecificClass {
                  // الكود الكامل مخصص للبائع فقط
                  // إزالة أي مراجع للتطبيقات الأخرى
                  // تخصيص الوظائف لاحتياجات البائع
                }
                ```
                
                **2. تطبيق التوصيل:** {{context.appDirectories.delivery}}
                ```dart
                // نسخة خاصة بالتوصيل
                class DeliverySpecificClass {
                  // الكود الكامل مخصص للتوصيل فقط
                  // تخصيص الوظائف لاحتياجات التوصيل
                }
                ```
                
                **3. تطبيق العميل:** {{context.appDirectories.customer}}
                ```dart
                // نسخة خاصة بالعميل
                class CustomerSpecificClass {
                  // الكود الكامل مخصص للعميل فقط
                  // تخصيص الوظائف لاحتياجات العميل
                }
                ```
                
                **4. تطبيق الأدمن:** {{context.appDirectories.admin}}
                ```dart
                // نسخة خاصة بالأدمن
                class AdminSpecificClass {
                  // الكود الكامل مخصص للأدمن فقط
                  // تخصيص الوظائف لاحتياجات الأدمن
                }
                ```
                
                **✅ المميزات:**
                - استقلالية كاملة لكل تطبيق
                - سهولة التطوير والصيانة
                - عدم تأثر التطبيقات ببعضها البعض
                - إمكانية تخصيص كل نسخة لاحتياجاتها
                
                **🎯 النتيجة:** 4 ملفات منفصلة، كل واحد في تطبيقه المخصص
          split_code_per_app:
            - action: ai_command
              command: >
                ✂️ **تقسيم الكود حسب التطبيق**
                
                **المبدأ:** فصل الوظائف حسب التطبيق المسؤول عنها
                
                **سأقوم بتحليل الكود وتقسيمه:**
                
                **تحليل الكود الحالي:**
                - الأجزاء الخاصة بالبائع → {{context.appDirectories.seller}}
                - الأجزاء الخاصة بالتوصيل → {{context.appDirectories.delivery}}
                - الأجزاء الخاصة بالعميل → {{context.appDirectories.customer}}
                - الأجزاء الخاصة بالأدمن → {{context.appDirectories.admin}}
                
                **مثال على التقسيم:**
                ```dart
                // في تطبيق البائع فقط
                class SellerOrderManager {
                  void createOrder() { /* خاص بالبائع */ }
                  void updateOrderStatus() { /* خاص بالبائع */ }
                }
                
                // في تطبيق التوصيل فقط  
                class DeliveryOrderTracker {
                  void acceptOrder() { /* خاص بالتوصيل */ }
                  void updateLocation() { /* خاص بالتوصيل */ }
                }
                
                // في تطبيق العميل فقط
                class CustomerOrderViewer {
                  void viewOrder() { /* خاص بالعميل */ }
                  void rateOrder() { /* خاص بالعميل */ }
                }
                ```
                
                **🎯 كل جزء في مكانه الصحيح، لا تداخل ولا اعتماد**
          move_to_specific_app:
            - action: ai_command
              command: >
                📦 **نقل إلى التطبيق المناسب**
                
                **تحليل الكود لتحديد التطبيق المناسب:**
                
                الكود الحالي في: {{context.targetFilePath}}
                التطبيق المكتشف: {{context.currentAppType}}
                
                **سأقوم بتحديد التطبيق الأنسب وفقاً لـ:**
                - الوظائف المستخدمة
                - المراجع في الكود
                - السياق العام للكلاس
                
                **إذا كان الكود يخص:**
                - إدارة المنتجات والمتجر → {{context.appDirectories.seller}}
                - التوصيل والشحن → {{context.appDirectories.delivery}}
                - التسوق والطلبات → {{context.appDirectories.customer}}
                - الإدارة والتحكم → {{context.appDirectories.admin}}
                
                **سأقوم بـ:**
                1. نقل الملف للتطبيق المناسب
                2. تعديل الكود ليناسب التطبيق فقط
                3. إزالة أي مراجع للتطبيقات الأخرى
                4. تحديث المسارات والاستيرادات
          rewrite_per_app:
            - action: ai_command
              command: >
                🔧 **إعادة كتابة منفصلة لكل تطبيق**
                
                **المبدأ:** إعادة كتابة الكود من الصفر لكل تطبيق بشكل منفصل
                
                **سأقوم بإنشاء نسخ مختلفة كلياً:**
                
                **🏪 للبائع - SellerVersion:**
                - تركيز على إدارة المنتجات
                - متابعة الطلبات الواردة
                - إحصائيات المبيعات
                - إدارة المخزون
                
                **🚚 للتوصيل - DeliveryVersion:**
                - تركيز على الطلبات الجاهزة للتوصيل
                - تتبع المواقع والمسارات
                - حالة التوصيل
                - التواصل مع العملاء
                
                **👤 للعميل - CustomerVersion:**
                - تركيز على تصفح المنتجات
                - عملية الشراء والدفع
                - تتبع الطلبات
                - التقييمات والمراجعات
                
                **👨‍💼 للأدمن - AdminVersion:**
                - تركيز على المراقبة والتحكم
                - إدارة المستخدمين
                - التقارير والإحصائيات
                - إعدادات النظام
                
                **🎯 كل نسخة مكتوبة خصيصاً لاحتياجات تطبيقها**
          cancel_operation:
            - action: stop_ai
              message: "تم إلغاء العملية. لا يمكن المتابعة مع مخالفة قاعدة الفصل الكامل."

  # قاعدة الأتمتة الذكية والروبوتات
  - id: intelligent-smart-automation-robotics
    description: "نظام الأتمتة الذكية والروبوتات - أتمتة العمليات بالذكاء الاصطناعي"
    context:
      smartAutomationMetrics:
        orderProcessingAutomation: 94.3
        chatbotSophisticationLevel: 87.6
        customerServiceAutomation: 89.2
        supplyChainOptimization: 91.8
        roboticProcessAutomationTasks: 156
        automatedWorkflowEfficiency: 88.4
        intelligentDecisionMaking: 85.7
        processIntelligenceScore: 90.3
        automationROI: 234.7
        errorReductionRate: 92.6
        processSpeedImprovement: 156.8
        staffProductivityIncrease: 78.9
        operationalCostSaving: 34.2
        automatedQualityControl: 95.1
        roboticMaintenanceScore: 82.4
      automationThresholds:
        minAutomationEfficiency: 90.0
        maxOrderProcessingTime: 5.0
        minCustomerServiceAutomation: 85.0
        minSupplyChainOptimization: 90.0
        automationROITarget: 200.0
        errorReductionTarget: 95.0
        speedImprovementTarget: 150.0
        productivityIncreaseTarget: 80.0
        costSavingTarget: 40.0
        qualityControlTarget: 96.0
    when:
      intent.name == "apply_edit" &&
      intent.details.edits.some(edit =>
        edit.content && (
          edit.content.includes('automation') ||
          edit.content.includes('robot') ||
          edit.content.includes('chatbot') ||
          edit.content.includes('bot') ||
          edit.content.includes('automatic') ||
          edit.content.includes('workflow') ||
          edit.content.includes('process') ||
          edit.content.includes('intelligent') ||
          edit.content.includes('ai') ||
          edit.content.includes('machine') ||
          edit.content.includes('smart') ||
          edit.content.includes('optimize') ||
          edit.content.includes('efficiency') ||
          edit.content.includes('productivity') ||
          edit.content.includes('supply')
        )
      )
    then:
      - action: prompt
        message: >
          🤖 **نظام الأتمتة الذكية والروبوتات مُفعّل!**
          
          📊 **تقييم الأتمتة الذكية الحالي:**
          - أتمتة معالجة الطلبات: {{context.smartAutomationMetrics.orderProcessingAutomation}}%
          - مستوى تطور روبوتات الدردشة: {{context.smartAutomationMetrics.chatbotSophisticationLevel}}%
          - أتمتة خدمة العملاء: {{context.smartAutomationMetrics.customerServiceAutomation}}%
          - تحسين سلسلة التوريد: {{context.smartAutomationMetrics.supplyChainOptimization}}%
          - مهام الأتمتة الروبوتية: {{context.smartAutomationMetrics.roboticProcessAutomationTasks}}
          - كفاءة سير العمل الآلي: {{context.smartAutomationMetrics.automatedWorkflowEfficiency}}%
          - اتخاذ القرارات الذكي: {{context.smartAutomationMetrics.intelligentDecisionMaking}}%
          - نقاط ذكاء العمليات: {{context.smartAutomationMetrics.processIntelligenceScore}}/100
          - عائد الاستثمار للأتمتة: {{context.smartAutomationMetrics.automationROI}}%
          
          📈 **تقليل الأخطاء**: {{context.smartAutomationMetrics.errorReductionRate}}%
          ⚡ **تحسين السرعة**: {{context.smartAutomationMetrics.processSpeedImprovement}}%
          
          🚀 **خيارات الأتمتة الذكية:**
        choices:
          - label: "🤖 أتمتة ذكية شاملة"
            value: "comprehensive_smart_automation"
          - label: "📦 معالجة الطلبات التلقائية"
            value: "automatic_order_processing"
          - label: "💬 روبوتات الدردشة المتطورة"
            value: "advanced_chatbots"
          - label: "🔗 تحسين سلسلة التوريد"
            value: "supply_chain_automation"
        next_actions:
          comprehensive_smart_automation:
            - action: ai_command
              command: >
                🤖 **تنفيذ الأتمتة الذكية الشاملة**
                
                **المرحلة 1: تحليل الأتمتة الحالية** ⚙️
                
                أتمتة معالجة الطلبات: {{context.smartAutomationMetrics.orderProcessingAutomation}}%
                كفاءة سير العمل الآلي: {{context.smartAutomationMetrics.automatedWorkflowEfficiency}}%
                مهام الأتمتة الروبوتية: {{context.smartAutomationMetrics.roboticProcessAutomationTasks}}
                عائد الاستثمار للأتمتة: {{context.smartAutomationMetrics.automationROI}}%
                
                سأقوم بإنشاء نظام أتمتة ذكية متطور مع CodoraSmartAutomationHub شامل يتضمن:
                - تحسين أتمتة معالجة الطلبات لـ {{context.automationThresholds.minAutomationEfficiency}}%+
                - تحسين كفاءة سير العمل لـ {{context.automationThresholds.minAutomationEfficiency}}%+
                - تطوير {{context.smartAutomationMetrics.roboticProcessAutomationTasks}} مهمة أتمتة روبوتية
                - تحسين أتمتة خدمة العملاء لـ {{context.automationThresholds.minCustomerServiceAutomation}}%+
                - تحسين سلسلة التوريد لـ {{context.automationThresholds.minSupplyChainOptimization}}%+
                - تحقيق عائد استثمار {{context.automationThresholds.automationROITarget}}%+
                - تقليل الأخطاء لـ {{context.automationThresholds.errorReductionTarget}}%+
                - تحسين السرعة لـ {{context.automationThresholds.speedImprovementTarget}}%+
                - زيادة الإنتاجية لـ {{context.automationThresholds.productivityIncreaseTarget}}%+
                - توفير التكاليف لـ {{context.automationThresholds.costSavingTarget}}%+
                - مراقبة الجودة التلقائية ({{context.smartAutomationMetrics.automatedQualityControl}}%)
                
                **الأهداف:** كفاءة {{context.automationThresholds.minAutomationEfficiency}}%+، عائد {{context.automationThresholds.automationROITarget}}%+، توفير {{context.automationThresholds.costSavingTarget}}%+
          automatic_order_processing:
            - action: ai_command
              command: >
                📦 **معالجة الطلبات التلقائية المتقدمة**
                
                سأقوم بتحسين معالجة الطلبات التلقائية:
                - تحسين أتمتة المعالجة من {{context.smartAutomationMetrics.orderProcessingAutomation}}% لـ {{context.automationThresholds.minAutomationEfficiency}}%+
                - تقليل وقت المعالجة لأقل من {{context.automationThresholds.maxOrderProcessingTime}} دقائق
                - معالجة ذكية للطلبات المعقدة
                - تكامل مع أنظمة المخزون والدفع
                - تتبع تلقائي للطلبات والشحنات
          advanced_chatbots:
            - action: ai_command
              command: >
                💬 **روبوتات الدردشة المتطورة**
                
                سأقوم بتطوير روبوتات دردشة متطورة:
                - تحسين مستوى التطور من {{context.smartAutomationMetrics.chatbotSophisticationLevel}}%
                - تحسين أتمتة خدمة العملاء لـ {{context.automationThresholds.minCustomerServiceAutomation}}%+
                - فهم طبيعي للغة ومعالجة ذكية
                - ردود شخصية ومخصصة للعملاء
                - تعلم مستمر من التفاعلات
          supply_chain_automation:
            - action: ai_command
              command: >
                🔗 **أتمتة سلسلة التوريد المتقدمة**
                
                سأقوم بتحسين أتمتة سلسلة التوريد:
                - تحسين التحسين من {{context.smartAutomationMetrics.supplyChainOptimization}}% لـ {{context.automationThresholds.minSupplyChainOptimization}}%+
                - أتمتة إدارة الموردين والمشتريات
                - تحسين توقيت التسليم والجودة
                - مراقبة تلقائية للأداء والتكاليف
                - تحسين شبكة التوزيع والخدمات اللوجستية
                - تحسين خدمة العملاء التلقائية 